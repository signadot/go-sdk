{
  "basePath": "/api/v1",
  "definitions": {
    "Branch": {
      "properties": {
        "headCommit": {
          "type": "string"
        },
        "pullRequest": {
          "type": "integer"
        },
        "vcsName": {
          "type": "string"
        },
        "vcsRepo": {
          "type": "string"
        },
        "vcsType": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Cluster": {
      "properties": {
        "createdAt": {
          "description": "The time when this cluster was registered with Signadot.",
          "type": "string"
        },
        "id": {
          "description": "The ID of the cluster.",
          "type": "string"
        },
        "name": {
          "description": "The name of the cluster.",
          "type": "string"
        },
        "operatorVersion": {
          "description": "The operator version of the cluster.  This may be\nnil if the cluster has not yet connected to Signadot.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConnectClusterRequest": {
      "properties": {
        "name": {
          "description": "Name for the new cluster you want to create",
          "example": "my-staging-cluster",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "ConnectClusterResponse": {
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreateClusterTokenResponse": {
      "properties": {
        "id": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreatePreviewEndpointRequest": {
      "properties": {
        "forkOf": {
          "$ref": "#/definitions/ForkOf"
        },
        "host": {
          "description": "Host is the host-name of a service within Kubernetes of the form\n`service-name.namespace.svc`. Only required when RouteType is 'static'",
          "type": "string",
          "x-order": "5"
        },
        "name": {
          "description": "Name of this endpoint.\nIf not specified, a name will be generated automatically.",
          "type": "string",
          "x-order": "0"
        },
        "port": {
          "description": "Port is the port on the above host that the preview will point to.\nOnly required when RouteType is 'static'",
          "type": "integer",
          "x-order": "6"
        },
        "protocol": {
          "description": "Protocol of the endpoint that we will be connecting to for this preview URL. One of 'http', 'https', or 'grpc'.\nIf not specified, the default is 'http'.",
          "type": "string",
          "x-order": "2"
        },
        "routeType": {
          "description": "RouteType is one of 'static' or 'fork'. If you choose a route of type 'static',\nthis preview endpoint will route traffic to the Host / Port specified. If you\nchoose a route of type 'fork', this preview endpoint will route traffic to a forked entity as specified in forkOf.",
          "type": "string",
          "x-order": "3"
        }
      },
      "required": [
        "routeType"
      ],
      "type": "object"
    },
    "CreateSandboxRequest": {
      "properties": {
        "cluster": {
          "description": "Cluster within which this sandbox should be created",
          "type": "string"
        },
        "description": {
          "description": "Description of the purpose of this sandbox",
          "type": "string"
        },
        "endpoints": {
          "description": "Endpoints that can be used to point to external DNS names or ingress gateways",
          "items": {
            "$ref": "#/definitions/SandboxEndpoint"
          },
          "type": "array"
        },
        "forks": {
          "description": "Forks is the specification of each forked entity",
          "items": {
            "$ref": "#/definitions/SandboxFork"
          },
          "type": "array"
        },
        "name": {
          "description": "Human-readable name of this sandbox",
          "type": "string"
        },
        "resources": {
          "description": "Resources specifies each required resource to spin up the sandbox",
          "items": {
            "$ref": "#/definitions/SandboxResource"
          },
          "type": "array"
        }
      },
      "required": [
        "cluster",
        "forks"
      ],
      "type": "object"
    },
    "CreateSandboxResponse": {
      "properties": {
        "previewEndpoints": {
          "items": {
            "$ref": "#/definitions/PreviewEndpoint"
          },
          "type": "array"
        },
        "sandboxID": {
          "type": "string"
        },
        "warnings": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "CustomPatch": {
      "properties": {
        "type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "EnvOp": {
      "properties": {
        "container": {
          "description": "name of container to which it applies",
          "type": "string"
        },
        "name": {
          "description": "environmental variable name",
          "type": "string"
        },
        "operation": {
          "description": "upsert or delete",
          "type": "string"
        },
        "value": {
          "description": "environmental variable value",
          "type": "string"
        },
        "valueFrom": {
          "$ref": "#/definitions/EnvValueFrom"
        }
      },
      "type": "object"
    },
    "EnvValueFrom": {
      "properties": {
        "fork": {
          "$ref": "#/definitions/EnvValueFromFork"
        },
        "resource": {
          "$ref": "#/definitions/EnvValueFromResource"
        }
      },
      "type": "object"
    },
    "EnvValueFromFork": {
      "properties": {
        "expression": {
          "type": "string"
        },
        "forkOf": {
          "$ref": "#/definitions/ForkOf"
        }
      },
      "type": "object"
    },
    "EnvValueFromResource": {
      "properties": {
        "name": {
          "type": "string"
        },
        "outputKey": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ForkEndpoint": {
      "properties": {
        "name": {
          "description": "Name of the endpoint",
          "type": "string"
        },
        "port": {
          "description": "Port it will map to on the forked workload",
          "type": "integer"
        },
        "protocol": {
          "description": "Protocol that this endpoint uses",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ForkOf": {
      "properties": {
        "kind": {
          "description": "Kind of entity that we want to route to. One of (Service or Deployment or Rollout).",
          "example": "Deployment",
          "type": "string"
        },
        "name": {
          "description": "Name of the entity within the Kubernetes cluster.",
          "example": "my-frontend",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace within which the entity lives in the Kubernetes cluster.",
          "example": "default",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name",
        "namespace"
      ],
      "type": "object"
    },
    "GetClustersResponse": {
      "properties": {
        "clusters": {
          "items": {
            "$ref": "#/definitions/Cluster"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GetSandboxByIdResponse": {
      "properties": {
        "sandbox": {
          "$ref": "#/definitions/SandboxDetails"
        }
      },
      "type": "object"
    },
    "GetSandboxesResponse": {
      "properties": {
        "sandboxes": {
          "items": {
            "$ref": "#/definitions/SandboxInfo"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Image": {
      "properties": {
        "container": {
          "description": "Container is the container this image must apply to in the forked workload",
          "type": "string"
        },
        "image": {
          "description": "Name of the image (e.g. gcr.io/my-image/repo:my-tag)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PreviewEndpoint": {
      "properties": {
        "baselinePreviewURL": {
          "type": "string"
        },
        "cluster": {
          "type": "string"
        },
        "clusterID": {
          "type": "string"
        },
        "forkOf": {
          "$ref": "#/definitions/ForkOf"
        },
        "host": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "port": {
          "type": "integer"
        },
        "previewURL": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        },
        "routeType": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SandboxCustomizations": {
      "properties": {
        "env": {
          "description": "Env var modifications that will be applied to the forked workload",
          "items": {
            "$ref": "#/definitions/EnvOp"
          },
          "type": "array"
        },
        "images": {
          "description": "One or more docker images that will be applied to the forked workload",
          "items": {
            "$ref": "#/definitions/Image"
          },
          "type": "array"
        },
        "patch": {
          "$ref": "#/definitions/CustomPatch"
        }
      },
      "type": "object"
    },
    "SandboxDetails": {
      "properties": {
        "branches": {
          "items": {
            "$ref": "#/definitions/Branch"
          },
          "type": "array"
        },
        "clusterName": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "defaultService": {
          "type": "string"
        },
        "defaultServicePort": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "previewEndpoints": {
          "items": {
            "$ref": "#/definitions/PreviewEndpoint"
          },
          "type": "array"
        },
        "previewURL": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SandboxEndpoint": {
      "properties": {
        "host": {
          "description": "Hostname that this endpoint points to",
          "type": "string"
        },
        "name": {
          "description": "Name of the endpoint",
          "type": "string"
        },
        "port": {
          "description": "Port it will map to on the specified host",
          "type": "integer"
        },
        "protocol": {
          "description": "Protocol that this endpoint uses",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SandboxFork": {
      "properties": {
        "customizations": {
          "$ref": "#/definitions/SandboxCustomizations"
        },
        "endpoints": {
          "description": "Endpoints that correspond to this forked workload",
          "items": {
            "$ref": "#/definitions/ForkEndpoint"
          },
          "type": "array"
        },
        "forkOf": {
          "$ref": "#/definitions/ForkOf"
        }
      },
      "type": "object"
    },
    "SandboxInfo": {
      "properties": {
        "clusterName": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "defaultService": {
          "type": "string"
        },
        "defaultServicePort": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "previewEndpoints": {
          "items": {
            "$ref": "#/definitions/PreviewEndpoint"
          },
          "type": "array"
        },
        "previewURL": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SandboxReadyResponse": {
      "properties": {
        "ready": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SandboxResource": {
      "properties": {
        "name": {
          "type": "string"
        },
        "params": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "plugin": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SandboxStatus": {
      "properties": {
        "id": {
          "description": "The id of the sandbox.",
          "type": "string"
        },
        "message": {
          "description": "Message is a human readable explanation of why\nthe sandbox is healthy or not.",
          "type": "string"
        },
        "ready": {
          "description": "Ready indicates whether the sandbox is ready,\nmeaning that it can be used for testing.",
          "type": "boolean"
        },
        "reason": {
          "description": "Reason is a machine readable explanation of why\nthe sandbox is healthy or not.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SandboxStatusResponse": {
      "properties": {
        "status": {
          "$ref": "#/definitions/SandboxStatus"
        }
      },
      "type": "object"
    },
    "UpsertPRWorkspacesRequest": {
      "properties": {
        "cluster": {
          "description": "Cluster within which this workspace should be created",
          "type": "string",
          "x-order": "2"
        },
        "defaultService": {
          "description": "Deprecated. use endpoints instead.",
          "type": "string"
        },
        "defaultServicePort": {
          "description": "Deprecated. use endpoints instead.",
          "type": "integer"
        },
        "description": {
          "description": "Description of the purpose of this workspace.",
          "type": "string",
          "x-order": "1"
        },
        "endpoints": {
          "description": "Each endpoint specifies a target service or workload corresponding to which\na preview URL will be generated.",
          "items": {
            "$ref": "#/definitions/CreatePreviewEndpointRequest"
          },
          "type": "array",
          "x-order": "5"
        },
        "headCommit": {
          "description": "HeadCommit is the commit hash of the current HEAD of the PR branch.\nIt is automatically computed if not specified but it is recommended that you specify this.",
          "type": "string"
        },
        "images": {
          "description": "Image replacement rules that are used to create the workspace.",
          "items": {
            "$ref": "#/definitions/v1.ImageReplacement"
          },
          "type": "array",
          "x-order": "4"
        },
        "name": {
          "description": "Human-readable name of this workspace",
          "type": "string",
          "x-order": "0"
        },
        "namespace": {
          "description": "Namespace within which this workspace should be created",
          "type": "string",
          "x-order": "3"
        }
      },
      "required": [
        "cluster",
        "namespace"
      ],
      "type": "object"
    },
    "UpsertWorkspaceResponse": {
      "properties": {
        "previewEndpoints": {
          "items": {
            "$ref": "#/definitions/PreviewEndpoint"
          },
          "type": "array"
        },
        "previewURLs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "warnings": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "workspaceIDs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "apierrs.Response": {
      "properties": {
        "error": {
          "type": "string"
        },
        "requestID": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "handler.EmptyResponse": {
      "type": "object"
    },
    "v1.ImageReplacement": {
      "properties": {
        "name": {
          "description": "Name specifies which image name in live workloads will be replaced.\n\nExample: us.gcr.io/my-staging-registry/widget",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace optionally specifies which namespace will be searched.",
          "type": "string"
        },
        "newName": {
          "description": "NewName provides a replacement for the image name (the part before the tag).\nIf this is left unset, the image name will not be changed.\n\nExample: us.gcr.io/my-dev-registry/username/widget",
          "type": "string"
        },
        "newTag": {
          "description": "NewTag provides a replacement tag for the image.\nIf this is left unset, the image tag will not be changed.\n\nExample: v1.0.0-snapshot-abc123",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "host": "api.signadot.com",
  "info": {
    "contact": {},
    "description": "API for Signadot Sandboxes",
    "title": "Signadot API",
    "version": "1.0"
  },
  "paths": {
    "/orgs/{orgName}/clusters": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "List clusters.",
        "operationId": "get-clusters",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetClustersResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List clusters",
        "tags": [
          "Cluster"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Connect a new Kubernetes cluster with Signadot",
        "operationId": "connect-cluster",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Request to create cluster",
            "in": "body",
            "name": "data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConnectClusterRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ConnectClusterResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Connect Cluster",
        "tags": [
          "Cluster"
        ]
      }
    },
    "/orgs/{orgName}/clusters/{clusterName}/tokens": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new token for connecting a cluster",
        "operationId": "create-cluster-token",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Cluster Name",
            "in": "path",
            "name": "clusterName",
            "required": true,
            "type": "string",
            "x-example": "my-new-cluster"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateClusterTokenResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create Cluster Token",
        "tags": [
          "Cluster"
        ]
      }
    },
    "/orgs/{orgName}/clusters/{clusterName}/tokens/{tokenId}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete a cluster token associated with a cluster",
        "operationId": "delete-cluster-token",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Cluster Name",
            "in": "path",
            "name": "clusterName",
            "required": true,
            "type": "string",
            "x-example": "my-new-cluster"
          },
          {
            "description": "Token Id",
            "in": "path",
            "name": "tokenId",
            "required": true,
            "type": "string",
            "x-example": "kq6mtksk7mn5"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/handler.EmptyResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Delete Cluster Token",
        "tags": [
          "Cluster"
        ]
      }
    },
    "/orgs/{orgName}/sandboxes": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "List all sandboxes under the specified Signadot org.",
        "operationId": "get-sandboxes",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetSandboxesResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List Sandboxes",
        "tags": [
          "Sandboxes"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Creates a new sandbox with the provided parameters",
        "operationId": "create-new-sandbox",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Request to create sandbox",
            "in": "body",
            "name": "data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSandboxRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateSandboxResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create a new sandbox",
        "tags": [
          "Sandboxes"
        ]
      }
    },
    "/orgs/{orgName}/sandboxes/by-name/{name}": {
      "delete": {
        "description": "Delete Sandbox with given name",
        "operationId": "delete-sandbox-by-name",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Sandbox Name to search for",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "force",
            "in": "query",
            "name": "force",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/handler.EmptyResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Delete Sandbox By Name",
        "tags": [
          "Sandboxes"
        ]
      }
    },
    "/orgs/{orgName}/sandboxes/{sandboxID}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete the sandbox when its ID is specified",
        "operationId": "delete-sandbox-by-id",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Sandbox ID",
            "in": "path",
            "name": "sandboxID",
            "required": true,
            "type": "string",
            "x-example": "8r32dkdgdg"
          },
          {
            "description": "force",
            "in": "query",
            "name": "force",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/handler.EmptyResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Delete a Sandbox by ID",
        "tags": [
          "Sandboxes"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Fetch the details about a sandbox when its ID is specified",
        "operationId": "get-sandbox-by-id",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Sandbox ID",
            "in": "path",
            "name": "sandboxID",
            "required": true,
            "type": "string",
            "x-example": "8r32dkdgdg"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetSandboxByIdResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a Sandbox by ID",
        "tags": [
          "Sandboxes"
        ]
      }
    },
    "/orgs/{orgName}/sandboxes/{sandboxID}/ready": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "Checks readiness of a sandbox with rate limiting enforced by polling.  Deprecated, please use getSandboxStatusById instead.",
        "operationId": "get-sandbox-ready",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Sandbox ID",
            "in": "path",
            "name": "sandboxID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SandboxReadyResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Check sandbox readiness",
        "tags": [
          "Sandboxes"
        ]
      }
    },
    "/orgs/{orgName}/sandboxes/{sandboxID}/status": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Gets",
        "operationId": "get-sandbox-status-by-id",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Sandbox ID",
            "in": "path",
            "name": "sandboxID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SandboxStatusResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierrs.Response"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/apierrs.Response"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get Sandbox Status by Sandbox ID with rate limiting.",
        "tags": [
          "Sandboxes"
        ]
      }
    },
    "/repos/{githubOrg}/{githubRepo}/pulls/{prNumber}/workspaces": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "Create a workspace that is associated with a specified pull request.\nIf no workspaces already exist for the given pull request, this creates a new workspace. Otherwise, the new changes are applied to the existing workspaces.\nThis endpoint uses the old terminology \"workspace\" instead of \"sandbox\" for backward compatability.\n### Example\n\nHere's an example to create/update a workspace from a pull request in the [HotROD](https://github.com/signadot/hotrod) application. To simplify the use case, consider that only the [Route Service](https://github.com/signadot/hotrod/tree/main/services/route) had changes, and that the changes were published to an image file named `signadot/hotrod-route` and tag `4e75b0b822ecbbbb4c917b0fffeb337589d82456`. This could be tagged as anything e.g. `latest`, `e2e-test` etc.\n\nAs a part of workspace creation, Signadot creates forked Kubernetes workloads (such as deployments) from existing workloads using the provided images. In order to access the forked workloads(s), `endpoints` are specified and corresponding to each endpoint, a preview URL is generated. These preview URLs are returned as part of the response. In the example below, we're dealing with a deployment named `route` in the `hotrod` namespace that is running the docker image `signadot/hotrod-route`.\n\nIn the below request to create a workspace, the deployment named `route` is forked and the fork will be created with the new docker image tag as specified by `newTag`. The new deployment that is created will be running the a new docker image tag as specified by `newTag`. There will be a single preview URL associated with this workspace as specified in `endpoints` and it will point to the fork of the `route`\ndeployment that was created.\n\n```json\n{\n  \"cluster\": \"signadot\",\n  \"namespace\": \"hotrod\",\n  \"headCommit\": \"5e35abfa94626c4853eca51ecd435a779ded4123\",\n  \"images\": [\n    {\n      \"name\": \"signadot/hotrod-route\",\n      \"newTag\": \"4e75b0b822ecbbbb4c917b0fffeb337589d82456\"\n    }\n  ],\n  \"endpoints\": [\n    {\n      \"routeType\": \"fork\",\n      \"protocol\": \"http\",\n      \"forkOf\": {\n        \"kind\": \"Deployment\",\n        \"name\": \"route\",\n        \"namespace\": \"hotrod\"\n      }\n    }\n  ]\n}\n```\n\nIn response the API call returns us a confirmation of the workspace created / updated along with the information on preview endpoints.\n\n```json\n{\n  \"workspaceIDs\": [\n    \"xtc54uh8p2rhs\"\n  ],\n  \"previewEndpoints\": [\n    {\n      \"id\": \"fbm4983sxb111\",\n      \"routeType\": \"fork\",\n      \"name\": \"route\",\n      \"protocol\": \"http\",\n      \"clusterID\": \"55rjfjf3rn222\",\n      \"cluster\": \"signadot\",\n      \"forkOf\": {\n        \"kind\": \"Deployment\",\n        \"namespace\": \"hotrod\",\n        \"name\": \"route\"\n      },\n      \"previewURL\": \"https://route--hotrod-131.preview.signadot.com\"\n    }\n  ]\n}\n\n```\n\nYou can parse the `previewEndpoints` section in the response to find the previewURL associated with the endpoint created as part of the workspace.\n",
        "operationId": "upsert-pr-workspace",
        "parameters": [
          {
            "description": "GitHub Org Name",
            "in": "path",
            "name": "githubOrg",
            "required": true,
            "type": "string"
          },
          {
            "description": "GitHub Repository Name",
            "in": "path",
            "name": "githubRepo",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pull Request Number",
            "in": "path",
            "name": "prNumber",
            "required": true,
            "type": "integer",
            "x-example": "123"
          },
          {
            "description": "Request to upsert workspace",
            "in": "body",
            "name": "data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpsertPRWorkspacesRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpsertWorkspaceResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create or Update workspace from Pull Request",
        "tags": [
          "Sandboxes"
        ]
      }
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "in": "header",
      "name": "signadot-api-key",
      "type": "apiKey"
    }
  },
  "swagger": "2.0"
}