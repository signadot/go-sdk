{
  "basePath": "/api/v2",
  "definitions": {
    "Cluster": {
      "properties": {
        "createdAt": {
          "description": "The time when this cluster was registered with Signadot.",
          "type": "string"
        },
        "name": {
          "description": "The name of the cluster.",
          "type": "string"
        },
        "operator": {
          "$ref": "#/definitions/cluster.Operator"
        }
      },
      "type": "object"
    },
    "ClusterToken": {
      "properties": {
        "createdAt": {
          "description": "The time when this cluster was registered with Signadot.",
          "type": "string"
        },
        "id": {
          "description": "The ID of this token",
          "type": "string"
        },
        "maskedValue": {
          "description": "A Masked token value.",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/ClusterTokenStatus"
        },
        "token": {
          "description": "The token value.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ClusterTokenStatus": {
      "properties": {
        "lastConnectedAt": {
          "description": "The last time at which this token was used to connect.",
          "type": "string"
        },
        "lastConnectedIp": {
          "description": "The last IP address from which this token connected.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "EmptyResponse": {
      "type": "object"
    },
    "ErrorResponse": {
      "properties": {
        "error": {
          "type": "string"
        },
        "requestId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Sandbox": {
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "endpoints": {
          "items": {
            "$ref": "#/definitions/sandbox.Endpoint"
          },
          "type": "array"
        },
        "name": {
          "description": "Human-readable name of this sandbox",
          "type": "string"
        },
        "routingKey": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/sandbox.Spec"
        },
        "status": {
          "$ref": "#/definitions/sandbox.Readiness"
        },
        "updatedAt": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "cluster.Operator": {
      "properties": {
        "version": {
          "description": "The operator version of the cluster.  This may be\nnil if the cluster has not yet connected to Signadot.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "sandbox.CustomPatch": {
      "properties": {
        "type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "sandbox.Customizations": {
      "properties": {
        "env": {
          "description": "Env var modifications that will be applied to the forked workload",
          "items": {
            "$ref": "#/definitions/sandbox.EnvVar"
          },
          "type": "array"
        },
        "images": {
          "description": "One or more docker images that will be applied to the forked workload",
          "items": {
            "$ref": "#/definitions/sandbox.Image"
          },
          "type": "array"
        },
        "patch": {
          "$ref": "#/definitions/sandbox.CustomPatch"
        }
      },
      "type": "object"
    },
    "sandbox.Endpoint": {
      "properties": {
        "baselineUrl": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "port": {
          "type": "integer"
        },
        "protocol": {
          "type": "string"
        },
        "routeType": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "sandbox.EnvValueFrom": {
      "properties": {
        "fork": {
          "$ref": "#/definitions/sandbox.EnvValueFromFork"
        },
        "resource": {
          "$ref": "#/definitions/sandbox.EnvValueFromResource"
        }
      },
      "type": "object"
    },
    "sandbox.EnvValueFromFork": {
      "properties": {
        "expression": {
          "type": "string"
        },
        "forkOf": {
          "$ref": "#/definitions/sandbox.ForkOf"
        }
      },
      "type": "object"
    },
    "sandbox.EnvValueFromResource": {
      "properties": {
        "name": {
          "type": "string"
        },
        "outputKey": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "sandbox.EnvVar": {
      "properties": {
        "container": {
          "description": "name of container to which it applies",
          "type": "string"
        },
        "name": {
          "description": "environmental variable name",
          "type": "string"
        },
        "operation": {
          "description": "upsert or delete",
          "type": "string"
        },
        "value": {
          "description": "environmental variable value",
          "type": "string"
        },
        "valueFrom": {
          "$ref": "#/definitions/sandbox.EnvValueFrom"
        }
      },
      "type": "object"
    },
    "sandbox.Fork": {
      "properties": {
        "customizations": {
          "$ref": "#/definitions/sandbox.Customizations"
        },
        "endpoints": {
          "description": "Endpoints that correspond to this forked workload",
          "items": {
            "$ref": "#/definitions/sandbox.ForkEndpoint"
          },
          "type": "array"
        },
        "forkOf": {
          "$ref": "#/definitions/sandbox.ForkOf"
        }
      },
      "type": "object"
    },
    "sandbox.ForkEndpoint": {
      "properties": {
        "name": {
          "description": "Name of the endpoint",
          "type": "string"
        },
        "port": {
          "description": "Port it will map to on the forked workload",
          "type": "integer"
        },
        "protocol": {
          "description": "Protocol that this endpoint uses",
          "type": "string"
        }
      },
      "type": "object"
    },
    "sandbox.ForkOf": {
      "properties": {
        "kind": {
          "description": "Kind of entity that we want to route to. One of (Service or Deployment or Rollout).",
          "example": "Deployment",
          "type": "string"
        },
        "name": {
          "description": "Name of the entity within the Kubernetes cluster.",
          "example": "my-frontend",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace within which the entity lives in the Kubernetes cluster.",
          "example": "default",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name",
        "namespace"
      ],
      "type": "object"
    },
    "sandbox.HostEndpoint": {
      "properties": {
        "host": {
          "description": "Hostname that this endpoint points to",
          "type": "string"
        },
        "name": {
          "description": "Name of the endpoint",
          "type": "string"
        },
        "port": {
          "description": "Port it will map to on the specified host",
          "type": "integer"
        },
        "protocol": {
          "description": "Protocol that this endpoint uses",
          "type": "string"
        }
      },
      "type": "object"
    },
    "sandbox.Image": {
      "properties": {
        "container": {
          "description": "Container is the container this image must apply to in the forked workload",
          "type": "string"
        },
        "image": {
          "description": "Name of the image (e.g. gcr.io/my-image/repo:my-tag)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "sandbox.Readiness": {
      "properties": {
        "message": {
          "description": "Message is a human readable explanation of why\nthe sandbox is healthy or not.",
          "type": "string"
        },
        "ready": {
          "description": "Ready indicates whether the sandbox is ready,\nmeaning that it can be used for testing.",
          "type": "boolean"
        },
        "reason": {
          "description": "Reason is a machine readable explanation of why\nthe sandbox is healthy or not.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "sandbox.Resource": {
      "properties": {
        "name": {
          "type": "string"
        },
        "params": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "plugin": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "sandbox.Spec": {
      "properties": {
        "cluster": {
          "description": "Cluster within which this sandbox should be created",
          "type": "string"
        },
        "description": {
          "description": "Description of the purpose of this sandbox",
          "type": "string"
        },
        "endpoints": {
          "description": "Endpoints that can be used to point to external DNS names or ingress gateways",
          "items": {
            "$ref": "#/definitions/sandbox.HostEndpoint"
          },
          "type": "array"
        },
        "forks": {
          "description": "Forks is the specification of each forked entity",
          "items": {
            "$ref": "#/definitions/sandbox.Fork"
          },
          "type": "array"
        },
        "resources": {
          "description": "Resources specifies each required resource to spin up the sandbox",
          "items": {
            "$ref": "#/definitions/sandbox.Resource"
          },
          "type": "array"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Tags are used to specify metadata associated with the sandbox as key-value pairs.",
          "type": "object"
        },
        "ttl": {
          "$ref": "#/definitions/sandbox.TTL"
        }
      },
      "required": [
        "cluster",
        "forks"
      ],
      "type": "object"
    },
    "sandbox.TTL": {
      "properties": {
        "duration": {
          "description": "Duration represents the duration until sandbox end of life.\nIt should be an unsigned integer not exceeding 32 bits followed by\na units character, which can be one of the following.\n - 'm' for minutes\n - 'h' for hours\n - 'd' for days\n - 'w' for weeks",
          "type": "string"
        },
        "offsetFrom": {
          "description": "OffsetFrom indicates what the Duration is relative to.  It\nmay be the empty string or \"createdAt\".  The empty string\ndefaults to meaning \"createdAt\".",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "host": "api.signadot.com",
  "info": {
    "contact": {},
    "description": "API for Signadot Sandboxes",
    "title": "Signadot API",
    "version": "2.0"
  },
  "paths": {
    "/orgs/{orgName}/clusters/": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "List clusters.",
        "operationId": "list-clusters",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/Cluster"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List clusters",
        "tags": [
          "Cluster"
        ]
      }
    },
    "/orgs/{orgName}/clusters/{clusterName}/": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Remove a Kubernetes cluster from Signadot.",
        "operationId": "remove-cluster",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Cluster Name",
            "in": "path",
            "name": "clusterName",
            "required": true,
            "type": "string",
            "x-example": "my-cluster"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EmptyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Remove a cluster",
        "tags": [
          "Cluster"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get a cluster.",
        "operationId": "get-cluster",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Cluster Name",
            "in": "path",
            "name": "clusterName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a cluster",
        "tags": [
          "Cluster"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Add a Kubernetes cluster to Signadot.",
        "operationId": "add-cluster",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Cluster Name",
            "in": "path",
            "name": "clusterName",
            "required": true,
            "type": "string",
            "x-example": "my-cluster"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Add a cluster",
        "tags": [
          "Cluster"
        ]
      }
    },
    "/orgs/{orgName}/clusters/{clusterName}/tokens": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new token for connecting a cluster.",
        "operationId": "create-cluster-token",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Cluster Name",
            "in": "path",
            "name": "clusterName",
            "required": true,
            "type": "string",
            "x-example": "my-new-cluster"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClusterToken"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create cluster token",
        "tags": [
          "Cluster"
        ]
      }
    },
    "/orgs/{orgName}/clusters/{clusterName}/tokens/": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "List the cluster tokens associated with a cluster.",
        "operationId": "list-cluster-tokens",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Cluster Name",
            "in": "path",
            "name": "clusterName",
            "required": true,
            "type": "string",
            "x-example": "my-new-cluster"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/ClusterToken"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List cluster tokens",
        "tags": [
          "Cluster"
        ]
      }
    },
    "/orgs/{orgName}/clusters/{clusterName}/tokens/{tokenId}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete a cluster token associated with a cluster.",
        "operationId": "delete-cluster-token",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Cluster Name",
            "in": "path",
            "name": "clusterName",
            "required": true,
            "type": "string",
            "x-example": "my-new-cluster"
          },
          {
            "description": "Token Id",
            "in": "path",
            "name": "tokenId",
            "required": true,
            "type": "string",
            "x-example": "kq6mtksk7mn5"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EmptyResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Delete cluster token",
        "tags": [
          "Cluster"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get a cluster token associated with a cluster.",
        "operationId": "get-cluster-token",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Cluster Name",
            "in": "path",
            "name": "clusterName",
            "required": true,
            "type": "string",
            "x-example": "my-new-cluster"
          },
          {
            "description": "Token Id",
            "in": "path",
            "name": "tokenId",
            "required": true,
            "type": "string",
            "x-example": "kq6mtksk7mn5"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClusterToken"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a cluster token",
        "tags": [
          "Cluster"
        ]
      }
    },
    "/orgs/{orgName}/sandboxes": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "List all sandboxes under the specified Signadot org.",
        "operationId": "list-sandboxes",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/Sandbox"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List sandboxes",
        "tags": [
          "Sandboxes"
        ]
      }
    },
    "/orgs/{orgName}/sandboxes/{sandboxName}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete a given sandbox.",
        "operationId": "delete-sandbox",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Sandbox Name",
            "in": "path",
            "name": "sandboxName",
            "required": true,
            "type": "string",
            "x-example": "my-sandbox"
          },
          {
            "description": "force",
            "in": "query",
            "name": "force",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EmptyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Delete a sandbox",
        "tags": [
          "Sandboxes"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Fetch the details about a given sandbox.",
        "operationId": "get-sandbox",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Sandbox Name",
            "in": "path",
            "name": "sandboxName",
            "required": true,
            "type": "string",
            "x-example": "my-sandbox"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Sandbox"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a sandbox",
        "tags": [
          "Sandboxes"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Creates or updates a sandbox with the provided parameters.",
        "operationId": "apply-sandbox",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Sandbox Name",
            "in": "path",
            "name": "sandboxName",
            "required": true,
            "type": "string",
            "x-example": "my-sandbox"
          },
          {
            "description": "Request to create sandbox",
            "in": "body",
            "name": "data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Sandbox"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Sandbox"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create or update a sandbox",
        "tags": [
          "Sandboxes"
        ]
      }
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "in": "header",
      "name": "signadot-api-key",
      "type": "apiKey"
    }
  },
  "swagger": "2.0"
}