{
  "basePath": "/api/v2",
  "definitions": {
    "apierrs.Response": {
      "properties": {
        "error": {
          "type": "string"
        },
        "requestID": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "cluster.Connection": {
      "properties": {
        "createdAt": {
          "description": "The time when this cluster was registered with Signadot.",
          "type": "string"
        },
        "name": {
          "description": "The name of the cluster.",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/cluster.Status"
        }
      },
      "type": "object"
    },
    "cluster.Status": {
      "properties": {
        "operatorVersion": {
          "description": "The operator version of the cluster.  This may be\nnil if the cluster has not yet connected to Signadot.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "handler.EmptyResponse": {
      "type": "object"
    },
    "jsonop.Empty": {
      "type": "object"
    },
    "sandbox.ByNameGetResult": {
      "properties": {
        "meta": {
          "$ref": "#/definitions/sandbox.SandboxMeta"
        },
        "previewEndpoints": {
          "items": {
            "$ref": "#/definitions/sandbox.PreviewEndpoint"
          },
          "type": "array"
        },
        "spec": {
          "$ref": "#/definitions/sandbox.Spec"
        },
        "status": {
          "$ref": "#/definitions/SandboxReadiness"
        }
      },
      "type": "object"
    },
    "sandbox.ByNamePutResult": {
      "properties": {
        "meta": {
          "$ref": "#/definitions/sandbox.SandboxMeta"
        },
        "previewEndpoints": {
          "items": {
            "$ref": "#/definitions/sandbox.PreviewEndpoint"
          },
          "type": "array"
        },
        "spec": {
          "$ref": "#/definitions/sandbox.Spec"
        },
        "status": {
          "$ref": "#/definitions/SandboxReadiness"
        }
      },
      "type": "object"
    },
    "sandbox.Customizations": {
      "properties": {
        "env": {
          "description": "Env var modifications that will be applied to the forked workload",
          "items": {
            "$ref": "#/definitions/EnvOp"
          },
          "type": "array"
        },
        "images": {
          "description": "One or more docker images that will be applied to the forked workload",
          "items": {
            "$ref": "#/definitions/Image"
          },
          "type": "array"
        },
        "patch": {
          "$ref": "#/definitions/CustomPatch"
        }
      },
      "type": "object"
    },
    "sandbox.ForkOf": {
      "properties": {
        "kind": {
          "description": "Kind of entity that we want to route to. One of (Service or Deployment or Rollout).",
          "example": "Deployment",
          "type": "string"
        },
        "name": {
          "description": "Name of the entity within the Kubernetes cluster.",
          "example": "my-frontend",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace within which the entity lives in the Kubernetes cluster.",
          "example": "default",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name",
        "namespace"
      ],
      "type": "object"
    },
    "sandbox.ForkSpec": {
      "properties": {
        "customizations": {
          "$ref": "#/definitions/sandbox.Customizations"
        },
        "endpoints": {
          "description": "Endpoints that correspond to this forked workload",
          "items": {
            "$ref": "#/definitions/ForkEndpoint"
          },
          "type": "array"
        },
        "forkOf": {
          "$ref": "#/definitions/sandbox.ForkOf"
        }
      },
      "type": "object"
    },
    "sandbox.PreviewEndpoint": {
      "properties": {
        "baselinePreviewURL": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "port": {
          "type": "integer"
        },
        "previewURL": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        },
        "routeType": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "sandbox.Resource": {
      "properties": {
        "name": {
          "type": "string"
        },
        "params": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "plugin": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "sandbox.Sandbox": {
      "properties": {
        "meta": {
          "$ref": "#/definitions/sandbox.SandboxMeta"
        },
        "previewEndpoints": {
          "items": {
            "$ref": "#/definitions/sandbox.PreviewEndpoint"
          },
          "type": "array"
        },
        "spec": {
          "$ref": "#/definitions/sandbox.Spec"
        },
        "status": {
          "$ref": "#/definitions/SandboxReadiness"
        }
      },
      "type": "object"
    },
    "sandbox.SandboxMeta": {
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "routingKey": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "sandbox.Spec": {
      "properties": {
        "cluster": {
          "description": "Cluster within which this sandbox should be created",
          "type": "string"
        },
        "description": {
          "description": "Description of the purpose of this sandbox",
          "type": "string"
        },
        "endpoints": {
          "description": "Endpoints that can be used to point to external DNS names or ingress gateways",
          "items": {
            "$ref": "#/definitions/SandboxEndpoint"
          },
          "type": "array"
        },
        "forks": {
          "description": "Forks is the specification of each forked entity",
          "items": {
            "$ref": "#/definitions/sandbox.ForkSpec"
          },
          "type": "array"
        },
        "name": {
          "description": "Human-readable name of this sandbox",
          "type": "string"
        },
        "resources": {
          "description": "Resources specifies each required resource to spin up the sandbox",
          "items": {
            "$ref": "#/definitions/sandbox.Resource"
          },
          "type": "array"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "required": [
        "cluster",
        "forks"
      ],
      "type": "object"
    },
    "CreateClusterTokenResponse": {
      "properties": {
        "id": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CustomPatch": {
      "properties": {
        "type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "EnvOp": {
      "properties": {
        "container": {
          "description": "name of container to which it applies",
          "type": "string"
        },
        "name": {
          "description": "environmental variable name",
          "type": "string"
        },
        "operation": {
          "description": "upsert or delete",
          "type": "string"
        },
        "value": {
          "description": "environmental variable value",
          "type": "string"
        },
        "valueFrom": {
          "$ref": "#/definitions/EnvValueFrom"
        }
      },
      "type": "object"
    },
    "EnvValueFrom": {
      "properties": {
        "fork": {
          "$ref": "#/definitions/EnvValueFromFork"
        },
        "resource": {
          "$ref": "#/definitions/EnvValueFromResource"
        }
      },
      "type": "object"
    },
    "EnvValueFromFork": {
      "properties": {
        "expression": {
          "type": "string"
        },
        "forkOf": {
          "$ref": "#/definitions/ForkOf"
        }
      },
      "type": "object"
    },
    "EnvValueFromResource": {
      "properties": {
        "name": {
          "type": "string"
        },
        "outputKey": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ForkEndpoint": {
      "properties": {
        "name": {
          "description": "Name of the endpoint",
          "type": "string"
        },
        "port": {
          "description": "Port it will map to on the forked workload",
          "type": "integer"
        },
        "protocol": {
          "description": "Protocol that this endpoint uses",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ForkOf": {
      "properties": {
        "kind": {
          "description": "Kind of entity that we want to route to. One of (Service or Deployment or Rollout).",
          "example": "Deployment",
          "type": "string"
        },
        "name": {
          "description": "Name of the entity within the Kubernetes cluster.",
          "example": "my-frontend",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace within which the entity lives in the Kubernetes cluster.",
          "example": "default",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name",
        "namespace"
      ],
      "type": "object"
    },
    "Image": {
      "properties": {
        "container": {
          "description": "Container is the container this image must apply to in the forked workload",
          "type": "string"
        },
        "image": {
          "description": "Name of the image (e.g. gcr.io/my-image/repo:my-tag)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SandboxEndpoint": {
      "properties": {
        "host": {
          "description": "Hostname that this endpoint points to",
          "type": "string"
        },
        "name": {
          "description": "Name of the endpoint",
          "type": "string"
        },
        "port": {
          "description": "Port it will map to on the specified host",
          "type": "integer"
        },
        "protocol": {
          "description": "Protocol that this endpoint uses",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SandboxReadiness": {
      "properties": {
        "message": {
          "description": "Message is a human readable explanation of why\nthe sandbox is healthy or not.",
          "type": "string"
        },
        "ready": {
          "description": "Ready indicates whether the sandbox is ready,\nmeaning that it can be used for testing.",
          "type": "boolean"
        },
        "reason": {
          "description": "Reason is a machine readable explanation of why\nthe sandbox is healthy or not.",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "host": "api.signadot.com",
  "info": {
    "contact": {},
    "description": "API for Signadot Sandboxes",
    "title": "Signadot API",
    "version": "2.0"
  },
  "paths": {
    "/orgs/{orgName}/clusters": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "List cluster.",
        "operationId": "list-clusters",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/cluster.Connection"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierrs.Response"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierrs.Response"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/apierrs.Response"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List clusters",
        "tags": [
          "Cluster"
        ]
      }
    },
    "/orgs/{orgName}/clusters/{clusterName}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete Cluster Connection.",
        "operationId": "delete-cluster",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Cluster Name",
            "in": "path",
            "name": "clusterName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/jsonop.Empty"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierrs.Response"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierrs.Response"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/apierrs.Response"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List clusters",
        "tags": [
          "Cluster"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "List cluster.",
        "operationId": "get-cluster",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Cluster Name",
            "in": "path",
            "name": "clusterName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/cluster.Connection"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierrs.Response"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierrs.Response"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/apierrs.Response"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List clusters",
        "tags": [
          "Cluster"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Connect a new Kubernetes cluster with Signadot",
        "operationId": "connect-cluster",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Cluster Name",
            "in": "path",
            "name": "clusterName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/cluster.Connection"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierrs.Response"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierrs.Response"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/apierrs.Response"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Connect Cluster",
        "tags": [
          "Cluster"
        ]
      }
    },
    "/orgs/{orgName}/sandboxes": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "List all sandboxes under the specified Signadot org.",
        "operationId": "list-sandboxes",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/sandbox.Sandbox"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierrs.Response"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierrs.Response"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/apierrs.Response"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List Sandboxes",
        "tags": [
          "Sandboxes"
        ]
      }
    },
    "/orgs/{orgName}/sandboxes/{sandboxName}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete a given sandbox",
        "operationId": "delete-sandbox",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Sandbox Name",
            "in": "path",
            "name": "sandboxName",
            "required": true,
            "type": "string",
            "x-example": "8r32dkdgdg"
          },
          {
            "description": "force",
            "in": "query",
            "name": "force",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/jsonop.Empty"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierrs.Response"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierrs.Response"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/apierrs.Response"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Delete a Sandbox",
        "tags": [
          "Sandboxes"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Fetch the details about a given sandbox",
        "operationId": "get-sandbox",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Sandbox Name",
            "in": "path",
            "name": "sandboxName",
            "required": true,
            "type": "string",
            "x-example": "8r32dkdgdg"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/sandbox.ByNameGetResult"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierrs.Response"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierrs.Response"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/apierrs.Response"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a Sandbox",
        "tags": [
          "Sandboxes"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Creates a new sandbox with the provided parameters",
        "operationId": "put-sandbox",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Sandbox Name",
            "in": "path",
            "name": "sandboxName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Request to create sandbox",
            "in": "body",
            "name": "data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sandbox.Sandbox"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/sandbox.ByNamePutResult"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierrs.Response"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierrs.Response"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/apierrs.Response"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create a new sandbox",
        "tags": [
          "Sandboxes"
        ]
      }
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "in": "header",
      "name": "signadot-api-key",
      "type": "apiKey"
    }
  },
  "swagger": "2.0"
}