{
    "swagger": "2.0",
    "info": {
        "description": "API for Signadot Sandboxes",
        "title": "Signadot API",
        "contact": {},
        "version": "2.0"
    },
    "host": "api.signadot.com",
    "basePath": "/api/v2",
    "paths": {
        "/auth/device/code/": {
            "post": {
                "description": "Get an authentication code for a device login flow",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Get Device Authentication Code",
                "operationId": "auth-device-get-code",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/authdevices.Code"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/device/token/": {
            "post": {
                "description": "Get an authentication token for a device login flow",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Get Device Authentication Token",
                "operationId": "auth-device-get-token",
                "parameters": [
                    {
                        "description": "Information to get the token",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authdevices.TokenInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/authdevices.Token"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/device/token/refresh": {
            "post": {
                "description": "Refresh an authentication token using a refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh Device Authentication Token",
                "operationId": "auth-device-refresh-token",
                "parameters": [
                    {
                        "description": "Refresh token string",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/authdevices.Token"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get organization details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orgs"
                ],
                "summary": "Get Org Name",
                "operationId": "get-org-name",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/orgs.GetOrgNameResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/artifacts/jobs/{jobName}/attempts/{jobAttempt}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List all artifacts for a given job attempt.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Artifacts"
                ],
                "summary": "List job attempt artifacts",
                "operationId": "list-job-attempt-artifacts",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Job Name",
                        "name": "jobName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Job Attempt ID",
                        "name": "jobAttempt",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "user",
                            "system"
                        ],
                        "type": "string",
                        "description": "Filter by artifact space, one of 'user' or 'system' (by default there is no filter)",
                        "name": "space",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/JobArtifact"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/artifacts/jobs/{jobName}/attempts/{jobAttempt}/objects/": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get info about a job attempt artifact",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Artifacts"
                ],
                "summary": "Job attempt artifact info",
                "operationId": "info-job-attempt-artifact",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Job Name",
                        "name": "jobName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Job Attempt ID",
                        "name": "jobAttempt",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Artifact Path",
                        "name": "path",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "user",
                            "system"
                        ],
                        "type": "string",
                        "description": "Artifact space, one of 'user' or 'system' (by default 'user')",
                        "name": "space",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JobArtifactInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/artifacts/jobs/{jobName}/attempts/{jobAttempt}/objects/download": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Downloads an artifact for a given job attempt.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "Artifacts"
                ],
                "summary": "Download job attempt artifact",
                "operationId": "download-job-attempt-artifact",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Job Name",
                        "name": "jobName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Job Attempt ID",
                        "name": "jobAttempt",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Artifact Path",
                        "name": "path",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "user",
                            "system"
                        ],
                        "type": "string",
                        "description": "Artifact space, one of 'user' or 'system' (by default 'user')",
                        "name": "space",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Downloads the specified byte range of the artifact. Retrieving multiple ranges of data per request is not supported",
                        "name": "Range",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Artifact successfully downloaded",
                        "schema": {
                            "type": "file"
                        },
                        "headers": {
                            "signadot-artifact-checksumSHA256": {
                                "type": "string",
                                "description": "A base64-encoded, 256-bit SHA-256 digest of the artifact"
                            },
                            "signadot-artifact-last-modified": {
                                "type": "string",
                                "description": "Date and time when the artifact was last modified"
                            },
                            "signadot-artifact-metadata": {
                                "type": "string",
                                "description": "A json-encoded, map of the artifact metadata"
                            }
                        }
                    },
                    "206": {
                        "description": "Artifact range successfully downloaded",
                        "schema": {
                            "type": "file"
                        },
                        "headers": {
                            "signadot-artifact-last-modified": {
                                "type": "string",
                                "description": "Date and time when the artifact was last modified"
                            },
                            "signadot-artifact-metadata": {
                                "type": "string",
                                "description": "A json-encoded, map of the artifact metadata"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/artifacts/jobs/{jobName}/attempts/{jobAttempt}/objects/upload": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Uploads an artifact for a given job attempt.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Artifacts"
                ],
                "summary": "Upload job attempt artifact",
                "operationId": "upload-job-attempt-artifact",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Job Name",
                        "name": "jobName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Job Attempt ID",
                        "name": "jobAttempt",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Artifact Path",
                        "name": "path",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "user",
                            "system"
                        ],
                        "type": "string",
                        "description": "Artifact space, one of 'user' or 'system' (by default 'user')",
                        "name": "space",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Job Execution ID",
                        "name": "jobExecution",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "A base64-encoded, 256-bit SHA-256 digest of the artifact",
                        "name": "checksumSHA256",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "A json-encoded, map of metadata to store with the artifact",
                        "name": "metadata",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Artifact File",
                        "name": "artifact",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EmptyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/clusters/": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List clusters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cluster"
                ],
                "summary": "List clusters",
                "operationId": "list-clusters",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Cluster"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/clusters/{clusterName}/": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a cluster.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cluster"
                ],
                "summary": "Get a cluster",
                "operationId": "get-cluster",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Cluster Name",
                        "name": "clusterName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Cluster"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Add a Kubernetes cluster to Signadot.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cluster"
                ],
                "summary": "Add a cluster",
                "operationId": "add-cluster",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "my-cluster",
                        "description": "Cluster Name",
                        "name": "clusterName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Cluster"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Remove a Kubernetes cluster from Signadot.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cluster"
                ],
                "summary": "Remove a cluster",
                "operationId": "remove-cluster",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "my-cluster",
                        "description": "Cluster Name",
                        "name": "clusterName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EmptyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/clusters/{clusterName}/devmesh/analyze": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Analyze DevMesh status for a given cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cluster"
                ],
                "summary": "Cluster DevMesh Analyze",
                "operationId": "cluster-devmesh-analyze",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "my-new-cluster",
                        "description": "Cluster Name",
                        "name": "clusterName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by statuses (comma separated value)",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by namespaces (comma separated value)",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/clusters.DevMeshEnabledWorkload"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/clusters/{clusterName}/tokens": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new token for connecting a cluster.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cluster"
                ],
                "summary": "Create cluster token",
                "operationId": "create-cluster-token",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "my-new-cluster",
                        "description": "Cluster Name",
                        "name": "clusterName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ClusterToken"
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/clusters/{clusterName}/tokens/": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List the cluster tokens associated with a cluster.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cluster"
                ],
                "summary": "List cluster tokens",
                "operationId": "list-cluster-tokens",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "my-new-cluster",
                        "description": "Cluster Name",
                        "name": "clusterName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ClusterToken"
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/clusters/{clusterName}/tokens/{tokenId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a cluster token associated with a cluster.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cluster"
                ],
                "summary": "Get a cluster token",
                "operationId": "get-cluster-token",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "my-new-cluster",
                        "description": "Cluster Name",
                        "name": "clusterName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "kq6mtksk7mn5",
                        "description": "Token Id",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ClusterToken"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a cluster token associated with a cluster.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cluster"
                ],
                "summary": "Delete cluster token",
                "operationId": "delete-cluster-token",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "my-new-cluster",
                        "description": "Cluster Name",
                        "name": "clusterName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "kq6mtksk7mn5",
                        "description": "Token Id",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EmptyResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/jobs": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List Jobs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobs"
                ],
                "summary": "List Jobs",
                "operationId": "list-jobs",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Job"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a job with the provided parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobs"
                ],
                "summary": "Create a job",
                "operationId": "create-job",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request to create a job",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Job"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Job"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/jobs/{jobName}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetch the details about a given job.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobs"
                ],
                "summary": "Get a job",
                "operationId": "get-job",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "job-xyz",
                        "description": "Job Name",
                        "name": "jobName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Job"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a given job.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobs"
                ],
                "summary": "Delete a job",
                "operationId": "delete-job",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "job-xyz",
                        "description": "Job  Name",
                        "name": "jobName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EmptyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/jobs/{jobName}/attempts/{jobAttempt}/logs/stream": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Stream logs for a given job attempt.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "JobLogs"
                ],
                "summary": "Stream job attempt logs",
                "operationId": "stream-job-attempt-logs",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Job Name",
                        "name": "jobName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Job Attempt ID",
                        "name": "jobAttempt",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "stdout",
                            "stderr"
                        ],
                        "type": "string",
                        "description": "Stream type (stdout or stderr)",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "If set, the number of lines from the end of the logs to show",
                        "name": "tailLines",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "If set, resume logs stream from the given cursor",
                        "name": "cursor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Log lines stream",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/jobs/{jobName}/cancel": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Cancel a given job.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobs"
                ],
                "summary": "Cancel a job",
                "operationId": "cancel-job",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "job-xyz",
                        "description": "Job Name",
                        "name": "jobName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Job"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/resource-plugins": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List all resource plugins under the specified Signadot org.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ResourcePlugins"
                ],
                "summary": "List resource plugins",
                "operationId": "list-resource-plugins",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResourcePlugin"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/resource-plugins/{pluginName}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get the specified resource plugin by name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ResourcePlugins"
                ],
                "summary": "Get the requested resource plugin",
                "operationId": "get-resource-plugin",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "mariadb-plugin",
                        "description": "Resource plugin name",
                        "name": "pluginName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ResourcePlugin"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Apply a resource plugin. Updates are not supported at this time.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ResourcePlugins"
                ],
                "summary": "Apply a resource plugin",
                "operationId": "apply-resource-plugin",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "mariadb-plugin",
                        "description": "Resource plugin name",
                        "name": "pluginName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request to create or update a resource plugin",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourcePlugin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EmptyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete the resource plugin by name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ResourcePlugins"
                ],
                "summary": "Delete a resource plugin",
                "operationId": "delete-resource-plugin",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "mariadb-plugin",
                        "description": "Resource plugin name",
                        "name": "pluginName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EmptyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/routegroups": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List all routegroups under the specified Signadot org.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RouteGroups"
                ],
                "summary": "List routegroups",
                "operationId": "list-routegroups",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RouteGroup"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/routegroups/{routegroupName}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetch the details about a given routegroup.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RouteGroups"
                ],
                "summary": "Get a routegroup",
                "operationId": "get-routegroup",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "my-routegroup",
                        "description": "RouteGroup Name",
                        "name": "routegroupName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RouteGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates or updates a routegroup with the provided parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RouteGroups"
                ],
                "summary": "Create or update a routegroup",
                "operationId": "apply-routegroup",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "my-routegroup",
                        "description": "RouteGroup Name",
                        "name": "routegroupName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request to create or update routegroup",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RouteGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RouteGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a given routegroup.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RouteGroups"
                ],
                "summary": "Delete a routegroup",
                "operationId": "delete-routegroup",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "my-routegroup",
                        "description": "RouteGroup Name",
                        "name": "routegroupName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EmptyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/runnergroups": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List RunnerGroups",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RunnerGroups"
                ],
                "summary": "List RunnerGroups",
                "operationId": "list-runnergroup",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/JobRunnerGroup"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/runnergroups/{runnergroupName}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetch the details about a given runnergroup.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RunnerGroups"
                ],
                "summary": "Get a runnergroup",
                "operationId": "get-runnergroup",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "my-runnergroup",
                        "description": "RunnerGroup Name",
                        "name": "runnergroupName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JobRunnerGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates or updates a runnergroup with the provided parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RunnerGroups"
                ],
                "summary": "Create or update a runnergroup",
                "operationId": "apply-runnergroup",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "my-runnergroup",
                        "description": "RunnerGroup Name",
                        "name": "runnergroupName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request to create or update runnergroup",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/JobRunnerGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JobRunnerGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a given runnergroup.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RunnerGroups"
                ],
                "summary": "Delete a runnergroup",
                "operationId": "delete-runnergroup",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "my-runnergroup",
                        "description": "RunnerGroup Name",
                        "name": "runnergroupName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EmptyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/sandboxes": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List all sandboxes under the specified Signadot org.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sandboxes"
                ],
                "summary": "List sandboxes",
                "operationId": "list-sandboxes",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Sandbox"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/sandboxes/{sandboxName}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetch the details about a given sandbox.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sandboxes"
                ],
                "summary": "Get a sandbox",
                "operationId": "get-sandbox",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "my-sandbox",
                        "description": "Sandbox Name",
                        "name": "sandboxName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Sandbox"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates or updates a sandbox with the provided parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sandboxes"
                ],
                "summary": "Create or update a sandbox",
                "operationId": "apply-sandbox",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "my-sandbox",
                        "description": "Sandbox Name",
                        "name": "sandboxName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request to create sandbox",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Sandbox"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Sandbox"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a given sandbox.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sandboxes"
                ],
                "summary": "Delete a sandbox",
                "operationId": "delete-sandbox",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "my-sandbox",
                        "description": "Sandbox Name",
                        "name": "sandboxName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "force",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EmptyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/tests": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List Tests",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tests"
                ],
                "summary": "List Tests",
                "operationId": "list-tests",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Test"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/tests/executions/": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Query test executions based on different criteria",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TestExecutions"
                ],
                "summary": "Query Test Executions",
                "operationId": "query-test-executions",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Only include auto diff executions",
                        "name": "isAutoDiff",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Do not include executions from deleted tests",
                        "name": "skipDeletedTests",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Test source external or saas",
                        "name": "source",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Target sandbox name",
                        "name": "targetSandbox",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Target route group name",
                        "name": "targetRouteGroup",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Target routing key",
                        "name": "targetRoutingKey",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Revision of the target routing context",
                        "name": "targetRevision",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Cluster name",
                        "name": "cluster",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Whether the test is published to the UI by default",
                        "name": "published",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Test name",
                        "name": "testName",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Trigger name",
                        "name": "triggerID",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Trigger workload in JSON format",
                        "name": "triggerWorkload",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Test execution phase",
                        "name": "executionPhase",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "CLI run identifier",
                        "name": "runID",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Repository name",
                        "name": "repo",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Repository path",
                        "name": "repoPath",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Repository path",
                        "name": "repoBranch",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Repository commit SHA",
                        "name": "repoCommitSHA",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "Label constraint key:value (may be specified multiple times)",
                        "name": "label",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results starting from this time",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results until this time",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sorting direction",
                        "name": "orderDir",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of rows to be included in the response",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start sending results from this cursor",
                        "name": "cursor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/testexecutions.QueryResult"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create an external test execution",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TestExecutions"
                ],
                "summary": "Create External Test Execution",
                "operationId": "create-external-test-execution",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request to create a test execution",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TestExecution"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TestExecution"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/tests/executions/{executionID}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetch the details about a given test execution.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TestExecutions"
                ],
                "summary": "Get a test execution",
                "operationId": "get-test-execution",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Test Execution ID",
                        "name": "executionID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TestExecution"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/tests/executions/{executionID}/cancel": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Cancel a given test execution.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TestExecutions"
                ],
                "summary": "Cancel a test execution",
                "operationId": "cancel-test-execution",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Test Execution ID",
                        "name": "executionID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EmptyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/tests/executions/{executionID}/traffic-diff": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get the full traffic diff of a test execution",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TestExecutions"
                ],
                "summary": "Get the full traffic diff of a test execution",
                "operationId": "test-execution-traffic-diff",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Test Execution ID",
                        "name": "executionID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TrafficDiffResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/tests/executions/{executionID}/traffic-diff-findings": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get the findings view of the traffic diff of a test execution",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TestExecutions"
                ],
                "summary": "Get the findings view of the traffic diff of a test execution",
                "operationId": "test-execution-traffic-diff-findings",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Test Execution ID",
                        "name": "executionID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Context",
                        "name": "diffContext",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Category",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Max Findings",
                        "name": "maxFindings",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TrafficDiffResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/tests/{testName}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetch the details about a given test.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tests"
                ],
                "summary": "Get a test",
                "operationId": "get-test",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Test Name",
                        "name": "testName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Test"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates or updates a test with the provided parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tests"
                ],
                "summary": "Create or update a Test",
                "operationId": "apply-test",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Test Name",
                        "name": "testName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Test Spec",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TestSpec"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Test"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a given test.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tests"
                ],
                "summary": "Delete a test",
                "operationId": "delete-test",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "job-xyz",
                        "description": "Test Name",
                        "name": "testName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EmptyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{orgName}/tests/{testName}/executions/": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List test executions for a given test",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TestExecutions"
                ],
                "summary": "List Test Executions",
                "operationId": "list-test-executions",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Test name",
                        "name": "testName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TestExecution"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a hosted test execution",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TestExecutions"
                ],
                "summary": "Create Hosted Test Execution",
                "operationId": "create-hosted-test-execution",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "my-company",
                        "description": "Signadot Org Name",
                        "name": "orgName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Test name",
                        "name": "testName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request to create a test execution",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TestExecution"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TestExecution"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Cluster": {
            "type": "object",
            "properties": {
                "clusterConfig": {
                    "description": "Cluster config read from the cluster",
                    "allOf": [
                        {
                            "$ref": "#/definitions/config.ClusterConfig"
                        }
                    ]
                },
                "createdAt": {
                    "description": "The time when this cluster was registered with Signadot.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the cluster.",
                    "type": "string"
                },
                "operator": {
                    "description": "Information about the Signadot Operator in this cluster.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/cluster.Operator"
                        }
                    ]
                }
            }
        },
        "ClusterToken": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "The time when this cluster was registered with Signadot.",
                    "type": "string"
                },
                "id": {
                    "description": "The ID of this token",
                    "type": "string"
                },
                "maskedValue": {
                    "description": "A Masked token value.",
                    "type": "string"
                },
                "status": {
                    "description": "Token status.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ClusterTokenStatus"
                        }
                    ]
                },
                "token": {
                    "description": "The token value.",
                    "type": "string"
                }
            }
        },
        "ClusterTokenStatus": {
            "type": "object",
            "properties": {
                "lastConnectedAt": {
                    "description": "The last time at which this token was used to connect.",
                    "type": "string"
                },
                "lastConnectedIp": {
                    "description": "The last IP address from which this token connected.",
                    "type": "string"
                }
            }
        },
        "DiffOp": {
            "type": "object",
            "properties": {
                "classification": {
                    "$ref": "#/definitions/DiffOpClassification"
                },
                "oldValue": {},
                "op": {
                    "$ref": "#/definitions/trafficmodels.DiffOperation"
                },
                "path": {
                    "type": "string"
                },
                "value": {}
            }
        },
        "DiffOpClassification": {
            "type": "object",
            "properties": {
                "noise": {
                    "type": "number"
                }
            }
        },
        "EmptyResponse": {
            "type": "object"
        },
        "ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                },
                "requestId": {
                    "type": "string"
                }
            }
        },
        "ExternalSpec": {
            "type": "object",
            "properties": {
                "branch": {
                    "type": "string"
                },
                "commitSHA": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "repo": {
                    "type": "string"
                },
                "script": {
                    "type": "string"
                },
                "testName": {
                    "type": "string"
                }
            }
        },
        "HostedSpec": {
            "type": "object",
            "properties": {
                "testName": {
                    "type": "string"
                }
            }
        },
        "Job": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "spec": {
                    "$ref": "#/definitions/job.Spec"
                },
                "status": {
                    "$ref": "#/definitions/jobs.Status"
                }
            }
        },
        "JobArtifact": {
            "type": "object",
            "properties": {
                "lastModified": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "space": {
                    "$ref": "#/definitions/artifacts.JobArtifactSpace"
                }
            }
        },
        "JobArtifactInfo": {
            "type": "object",
            "properties": {
                "checksumSHA256": {
                    "type": "string"
                },
                "contentEncoding": {
                    "type": "string"
                },
                "contentLength": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "lastModified": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "JobRunnerGroup": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "spec": {
                    "$ref": "#/definitions/jobRunnerGroup.Spec"
                },
                "status": {
                    "$ref": "#/definitions/jobRunnerGroup.Status"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "RequestDiff": {
            "type": "object",
            "properties": {
                "baseline": {
                    "$ref": "#/definitions/capture.Request"
                },
                "diffOps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DiffOp"
                    }
                },
                "target": {
                    "$ref": "#/definitions/capture.Request"
                }
            }
        },
        "ResourceInfo": {
            "type": "object",
            "properties": {
                "cluster": {
                    "description": "Cluster that the resource is created in",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the created resource",
                    "type": "string"
                },
                "sandbox": {
                    "description": "Name of the sandbox containing the resource",
                    "type": "string"
                }
            }
        },
        "ResourcePlugin": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "The time at which the resource plugin was created",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the resource plugin",
                    "type": "string"
                },
                "spec": {
                    "description": "Specification for the resource plugin",
                    "allOf": [
                        {
                            "$ref": "#/definitions/resourceplugin.Spec"
                        }
                    ]
                },
                "status": {
                    "description": "Status of the resource plugin",
                    "allOf": [
                        {
                            "$ref": "#/definitions/resourceplugin.Status"
                        }
                    ]
                },
                "updatedAt": {
                    "description": "The time at which the resource plugin was last updated",
                    "type": "string"
                }
            }
        },
        "ResponseDiff": {
            "type": "object",
            "properties": {
                "baseline": {
                    "$ref": "#/definitions/capture.Response"
                },
                "diffOps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DiffOp"
                    }
                },
                "target": {
                    "$ref": "#/definitions/capture.Response"
                }
            }
        },
        "RouteGroup": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "defaults": {
                    "$ref": "#/definitions/defaults.CompositeDefaults"
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/routegroups.EndpointURL"
                    },
                    "x-omitempty": true
                },
                "name": {
                    "type": "string"
                },
                "routingKey": {
                    "type": "string"
                },
                "spec": {
                    "$ref": "#/definitions/routeGroup.Spec"
                },
                "status": {
                    "$ref": "#/definitions/routeGroup.Status"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "Sandbox": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "defaults": {
                    "$ref": "#/definitions/defaults.CompositeDefaults"
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/sandbox.Endpoint"
                    }
                },
                "name": {
                    "description": "Human-readable name of this sandbox",
                    "type": "string"
                },
                "routingKey": {
                    "type": "string"
                },
                "spec": {
                    "$ref": "#/definitions/sandbox.Spec"
                },
                "status": {
                    "description": "Status *sdv1.SandboxReadiness `json:\"status,omitempty\"`",
                    "allOf": [
                        {
                            "$ref": "#/definitions/sandbox.Readiness"
                        }
                    ]
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "Source": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "requestName": {
                    "type": "string"
                },
                "scriptRef": {
                    "$ref": "#/definitions/capturemeta.ScriptRef"
                }
            }
        },
        "Test": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "spec": {
                    "$ref": "#/definitions/TestSpec"
                },
                "status": {
                    "$ref": "#/definitions/TestStatus"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "TestExecution": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "results": {
                    "$ref": "#/definitions/TestExecutionResults"
                },
                "spec": {
                    "$ref": "#/definitions/TestExecutionSpec"
                },
                "status": {
                    "$ref": "#/definitions/TestExecutionStatus"
                }
            }
        },
        "TestExecutionAutoDiff": {
            "type": "object",
            "properties": {
                "enabled": {
                    "description": "Enabled = true, requires the definition of a valid routing context",
                    "type": "boolean"
                }
            }
        },
        "TestExecutionCanceledState": {
            "type": "object",
            "properties": {
                "canceledAt": {
                    "type": "string"
                },
                "canceledBy": {
                    "$ref": "#/definitions/jobs.CanceledBy"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "TestExecutionContext": {
            "type": "object",
            "properties": {
                "autoDiff": {
                    "$ref": "#/definitions/TestExecutionAutoDiff"
                },
                "cluster": {
                    "type": "string"
                },
                "publish": {
                    "description": "Publish represents whether the test execution will show up by default\nin the UI, i.e. to filter out ad-hoc and test the test usage.",
                    "type": "boolean"
                },
                "routing": {
                    "$ref": "#/definitions/job.RoutingContext"
                },
                "runID": {
                    "type": "string"
                },
                "timeout": {
                    "description": "Timeout represents an optional timeout for the test execution.\nIf not supplied, it defaults to the DefaultTimeout of the associated\ntest, if that is present.  If that is not present, it defaults to \"5m\".\nIt should be a string representing an unsigned integer not exceeding 32 bits followed by\na units character, which can be one of the following.\n  - 'm' for minutes\n  - 'h' for hours\n  - 'd' for days\n  - 'w' for weeks",
                    "type": "string"
                }
            }
        },
        "TestExecutionFailedState": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "TestExecutionResults": {
            "type": "object",
            "properties": {
                "checks": {
                    "$ref": "#/definitions/testexecutions.Checks"
                },
                "trafficDiff": {
                    "$ref": "#/definitions/TrafficDiff"
                }
            }
        },
        "TestExecutionSpec": {
            "type": "object",
            "properties": {
                "executionContext": {
                    "description": "Execution context",
                    "allOf": [
                        {
                            "$ref": "#/definitions/TestExecutionContext"
                        }
                    ]
                },
                "external": {
                    "$ref": "#/definitions/ExternalSpec"
                },
                "hosted": {
                    "description": "Hosted/External source information, these are one or the other",
                    "allOf": [
                        {
                            "$ref": "#/definitions/HostedSpec"
                        }
                    ]
                },
                "labels": {
                    "description": "Labels",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "TestExecutionState": {
            "type": "object",
            "properties": {
                "canceled": {
                    "$ref": "#/definitions/TestExecutionCanceledState"
                },
                "failed": {
                    "$ref": "#/definitions/TestExecutionFailedState"
                }
            }
        },
        "TestExecutionStatus": {
            "type": "object",
            "properties": {
                "baselineJob": {
                    "type": "string"
                },
                "finalState": {
                    "$ref": "#/definitions/TestExecutionState"
                },
                "finishedAt": {
                    "type": "string"
                },
                "phase": {
                    "$ref": "#/definitions/testexecutions.Phase"
                },
                "startedAt": {
                    "type": "string"
                },
                "targetJob": {
                    "type": "string"
                },
                "testDeletedAt": {
                    "type": "string"
                },
                "triggeredBy": {
                    "description": "info about the trigger of the execution, empty means a manual trigger",
                    "allOf": [
                        {
                            "$ref": "#/definitions/TestExecutionTriggeredBy"
                        }
                    ]
                }
            }
        },
        "TestExecutionTemplate": {
            "type": "object",
            "properties": {
                "autoDiff": {
                    "$ref": "#/definitions/TestExecutionAutoDiff"
                },
                "cluster": {
                    "type": "string"
                },
                "publish": {
                    "description": "Publish represents whether the test execution will show up by default\nin the UI, i.e. to filter out ad-hoc and test the test usage.",
                    "type": "boolean"
                },
                "timeout": {
                    "description": "Timeout represents an optional timeout for the test execution.\nIf not supplied, it defaults to the DefaultTimeout of the associated\ntest, if that is present.  If that is not present, it defaults to \"5m\".\nIt should be a string representing an unsigned integer not exceeding 32 bits followed by\na units character, which can be one of the following.\n  - 'm' for minutes\n  - 'h' for hours\n  - 'd' for days\n  - 'w' for weeks",
                    "type": "string"
                }
            }
        },
        "TestExecutionTriggeredBy": {
            "type": "object",
            "properties": {
                "sandbox": {
                    "type": "string"
                },
                "trigger": {
                    "$ref": "#/definitions/TestTrigger"
                }
            }
        },
        "TestSpec": {
            "type": "object",
            "properties": {
                "defaultTimeout": {
                    "description": "DefaultTimeout represents an optional default timeout for the test\nexecutions associated with this test, which can override this value.\nIf not supplied, it defaults to \"5m\".  It should be a string\nrepresenting an unsigned integer in decimal not exceeding 32 bits\nfollowed by a units character, which can be one of the following.\n  - 'm' for minutes\n  - 'h' for hours\n  - 'd' for days\n  - 'w' for weeks",
                    "type": "string"
                },
                "script": {
                    "type": "string"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TestTrigger"
                    }
                }
            }
        },
        "TestStatus": {
            "type": "object"
        },
        "TestTrigger": {
            "type": "object",
            "properties": {
                "executionTemplate": {
                    "description": "ExecutionTemplate specifies a template for creating the actual execution",
                    "allOf": [
                        {
                            "$ref": "#/definitions/TestExecutionTemplate"
                        }
                    ]
                },
                "id": {
                    "type": "string"
                },
                "sandboxOf": {
                    "description": "SandboxOf specifies a workload that when being sandboxed, will\ntrigger an execution of the test (for now, only forks are supported)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/workload.Workload"
                        }
                    ]
                }
            }
        },
        "TrafficDiff": {
            "type": "object",
            "properties": {
                "additions": {
                    "type": "integer"
                },
                "baselineSession": {
                    "type": "string"
                },
                "capturePoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/trafficmodels.By"
                    }
                },
                "captures": {
                    "type": "integer"
                },
                "green": {
                    "$ref": "#/definitions/TrafficDiffSummary"
                },
                "maxRelevance": {
                    "type": "number"
                },
                "red": {
                    "$ref": "#/definitions/TrafficDiffSummary"
                },
                "removals": {
                    "type": "integer"
                },
                "replacements": {
                    "type": "integer"
                },
                "targetSession": {
                    "type": "string"
                },
                "unpairedCaptures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/testexecutions.UnpairedCapture"
                    }
                },
                "yellow": {
                    "$ref": "#/definitions/TrafficDiffSummary"
                }
            }
        },
        "TrafficDiffPairedDiff": {
            "type": "object",
            "properties": {
                "baselineCaptureID": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "request": {
                    "$ref": "#/definitions/RequestDiff"
                },
                "response": {
                    "$ref": "#/definitions/ResponseDiff"
                },
                "source": {
                    "$ref": "#/definitions/Source"
                },
                "targetCaptureID": {
                    "type": "string"
                }
            }
        },
        "TrafficDiffPointResult": {
            "type": "object",
            "properties": {
                "by": {
                    "$ref": "#/definitions/trafficmodels.By"
                },
                "diffs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TrafficDiffPairedDiff"
                    }
                }
            }
        },
        "TrafficDiffResult": {
            "type": "object",
            "properties": {
                "baseline": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TrafficDiffPointResult"
                    }
                },
                "target": {
                    "type": "string"
                }
            }
        },
        "TrafficDiffSummary": {
            "type": "object",
            "properties": {
                "additions": {
                    "type": "integer"
                },
                "captures": {
                    "type": "integer"
                },
                "maxRelevance": {
                    "type": "number"
                },
                "removals": {
                    "type": "integer"
                },
                "replacements": {
                    "type": "integer"
                }
            }
        },
        "artifacts.JobArtifactSpace": {
            "type": "string",
            "enum": [
                "user",
                "system"
            ],
            "x-enum-varnames": [
                "UserSpace",
                "SystemSpace"
            ]
        },
        "auth.UserFlags": {
            "type": "object",
            "additionalProperties": {
                "type": "boolean"
            }
        },
        "authdevices.Code": {
            "type": "object",
            "properties": {
                "deviceCode": {
                    "type": "string"
                },
                "expiresIn": {
                    "type": "integer"
                },
                "interval": {
                    "type": "integer"
                },
                "userCode": {
                    "type": "string"
                },
                "verificationURI": {
                    "type": "string"
                }
            }
        },
        "authdevices.Status": {
            "type": "string",
            "enum": [
                "pending",
                "slow_down",
                "completed"
            ],
            "x-enum-varnames": [
                "PendingStatus",
                "SlowDownStatus",
                "CompletedStatus"
            ]
        },
        "authdevices.Token": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "expiresIn": {
                    "type": "integer"
                },
                "refreshToken": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/authdevices.Status"
                }
            }
        },
        "authdevices.TokenInput": {
            "type": "object",
            "properties": {
                "deviceCode": {
                    "type": "string"
                }
            }
        },
        "capture.Message": {
            "type": "object",
            "properties": {
                "body": {},
                "finishedAt": {
                    "type": "string"
                },
                "headers": {
                    "$ref": "#/definitions/capture.Values"
                },
                "startedAt": {
                    "type": "string"
                }
            }
        },
        "capture.Request": {
            "type": "object",
            "properties": {
                "host": {
                    "type": "string"
                },
                "message": {
                    "$ref": "#/definitions/capture.Message"
                },
                "method": {
                    "type": "string"
                },
                "proto": {
                    "type": "string"
                },
                "query": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "uri": {
                    "type": "string"
                }
            }
        },
        "capture.Response": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "$ref": "#/definitions/capture.Message"
                },
                "proto": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "capture.Values": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "capturemeta.ScriptRef": {
            "type": "object",
            "properties": {
                "callNum": {
                    "description": "call number",
                    "type": "integer"
                },
                "col": {
                    "description": "1-based column (rune) number; 0 if column unknown",
                    "type": "integer"
                },
                "file": {
                    "description": "filename",
                    "type": "string"
                },
                "line": {
                    "description": "1-based line number; 0 if line unknown",
                    "type": "integer"
                }
            }
        },
        "cluster.Operator": {
            "type": "object",
            "properties": {
                "version": {
                    "description": "The operator version of the cluster.  This may be\nnil if the cluster has not yet connected to Signadot.",
                    "type": "string"
                }
            }
        },
        "clusters.DevMeshEnabledWorkload": {
            "type": "object",
            "properties": {
                "statusCounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/clusters.DevMeshWorkloadStatusCount"
                    }
                },
                "workload": {
                    "$ref": "#/definitions/workload.Workload"
                }
            }
        },
        "clusters.DevMeshWorkloadStatus": {
            "type": "string",
            "enum": [
                "ok",
                "missing",
                "needs_update"
            ],
            "x-enum-varnames": [
                "OKDevMeshWorkloadStatus",
                "MissingDevMeshWorkloadStatus",
                "NeedsUpdateDevMeshWorkloadStatus"
            ]
        },
        "clusters.DevMeshWorkloadStatusCount": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/clusters.DevMeshWorkloadStatus"
                }
            }
        },
        "config.ClusterConfig": {
            "type": "object",
            "properties": {
                "allowOrphanedResources": {
                    "type": "boolean"
                },
                "allowedNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "controlPlane": {
                    "$ref": "#/definitions/config.ControlPlaneConfig"
                },
                "routing": {
                    "$ref": "#/definitions/config.RoutingConfig"
                },
                "sandboxTrafficManager": {
                    "description": "Deprecated field",
                    "allOf": [
                        {
                            "$ref": "#/definitions/config.SandboxTrafficManagerConfig"
                        }
                    ]
                },
                "trafficCapture": {
                    "$ref": "#/definitions/config.TrafficCaptureConfig"
                }
            }
        },
        "config.ControlPlaneConfig": {
            "type": "object",
            "properties": {
                "disabled": {
                    "description": "ControlPlane can be disabled",
                    "type": "boolean"
                },
                "proxy": {
                    "description": "ControlPlaneProxy can be \"enabled\" or \"disabled\"",
                    "type": "string"
                },
                "tunnelAddr": {
                    "description": "for on-prem",
                    "type": "string"
                },
                "tunnelTLS": {
                    "type": "boolean"
                }
            }
        },
        "config.IstioConfig": {
            "type": "object",
            "properties": {
                "enableHostRouting": {
                    "description": "Deprecated fields",
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean"
                },
                "operator": {
                    "$ref": "#/definitions/config.IstioSignadotOperator"
                }
            }
        },
        "config.IstioSignadotOperator": {
            "type": "object",
            "properties": {
                "podLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "config.LinkerdConfig": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "operator": {
                    "$ref": "#/definitions/config.LinkerdSignadotOperator"
                }
            }
        },
        "config.LinkerdSignadotOperator": {
            "type": "object",
            "properties": {
                "podAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "config.RoutingConfig": {
            "type": "object",
            "properties": {
                "customHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "iptablesMode": {
                    "type": "string"
                },
                "istio": {
                    "$ref": "#/definitions/config.IstioConfig"
                },
                "linkerd": {
                    "$ref": "#/definitions/config.LinkerdConfig"
                }
            }
        },
        "config.SandboxTrafficManagerConfig": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "config.TrafficCaptureConfig": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "requestHeadersElide": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "responseHeadersElide": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "defaults.CompositeDefaults": {
            "type": "object",
            "properties": {
                "cluster": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/defaults.Default"
                    }
                }
            }
        },
        "defaults.Default": {
            "type": "object",
            "properties": {
                "class": {
                    "$ref": "#/definitions/defaults.DefaultClass"
                },
                "createdAt": {
                    "type": "string"
                },
                "resourceKind": {
                    "$ref": "#/definitions/defaults.ResourceKind"
                },
                "updatedAt": {
                    "type": "string"
                },
                "value": {}
            }
        },
        "defaults.DefaultClass": {
            "type": "string",
            "enum": [
                "ttl"
            ],
            "x-enum-varnames": [
                "TTL"
            ]
        },
        "defaults.ResourceKind": {
            "type": "string",
            "enum": [
                "sandbox",
                "routegroup"
            ],
            "x-enum-varnames": [
                "SandboxResourceKind",
                "RouteGroupResourceKind"
            ]
        },
        "endpoints.Endpoint": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "target": {
                    "type": "string"
                }
            }
        },
        "job.EnvItem": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "job.RoutingContext": {
            "type": "object",
            "properties": {
                "routegroup": {
                    "type": "string"
                },
                "sandbox": {
                    "type": "string"
                }
            }
        },
        "job.Spec": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "env": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/job.EnvItem"
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "namePrefix": {
                    "type": "string"
                },
                "routingContext": {
                    "$ref": "#/definitions/job.RoutingContext"
                },
                "runnerGroup": {
                    "type": "string"
                },
                "script": {
                    "type": "string"
                },
                "trafficManager": {
                    "$ref": "#/definitions/job.TrafficManager"
                },
                "uploadArtifact": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/job.UploadArtifact"
                    }
                }
            }
        },
        "job.TrafficManager": {
            "type": "object",
            "properties": {
                "enabled": {
                    "description": "Explicitly enable traffic manager in runner pods for this job.",
                    "type": "boolean"
                },
                "injectRoutingKey": {
                    "description": "InjectRoutingKey indicates if the system should perform automatic\ninjection of routing key headers or not.  It may be the empty string,\n\"auto\" or \"disabled\".  The empty string defaults to meaning \"disabled\".\nThe \"auto\" value will overwrite the value of the Enabled field, setting\nit to true.",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "auto"
                    ]
                }
            }
        },
        "job.UploadArtifact": {
            "type": "object",
            "properties": {
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "path": {
                    "type": "string"
                }
            }
        },
        "jobRunnerGroup.AutoScaling": {
            "type": "object",
            "properties": {
                "maxPods": {
                    "type": "integer"
                },
                "minPods": {
                    "type": "integer"
                }
            }
        },
        "jobRunnerGroup.ExecutionsStatus": {
            "type": "object",
            "properties": {
                "queued": {
                    "type": "integer"
                },
                "running": {
                    "type": "integer"
                }
            }
        },
        "jobRunnerGroup.ManualScaling": {
            "type": "object",
            "properties": {
                "desiredPods": {
                    "type": "integer"
                }
            }
        },
        "jobRunnerGroup.PodsStatus": {
            "type": "object",
            "properties": {
                "idle": {
                    "type": "integer"
                },
                "notReady": {
                    "type": "integer"
                },
                "ready": {
                    "type": "integer"
                }
            }
        },
        "jobRunnerGroup.Scaling": {
            "type": "object",
            "properties": {
                "auto": {
                    "$ref": "#/definitions/jobRunnerGroup.AutoScaling"
                },
                "manual": {
                    "$ref": "#/definitions/jobRunnerGroup.ManualScaling"
                }
            }
        },
        "jobRunnerGroup.Spec": {
            "type": "object",
            "properties": {
                "cluster": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "jobTimeout": {
                    "description": "JobTimeout specifies the max job execution time of jobs running with this\nRunnerGroup.  If not specified, it defaults to 30 minutes (\"30m\")",
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "namespace": {
                    "type": "string"
                },
                "podTemplate": {},
                "reusePods": {
                    "description": "ReusePods specifies whether JRG pods are reused after job executions.\nIf false (default), JRG pods are always recreated after each job.",
                    "type": "boolean"
                },
                "scaling": {
                    "$ref": "#/definitions/jobRunnerGroup.Scaling"
                }
            }
        },
        "jobRunnerGroup.Status": {
            "type": "object",
            "properties": {
                "executions": {
                    "$ref": "#/definitions/jobRunnerGroup.ExecutionsStatus"
                },
                "pods": {
                    "$ref": "#/definitions/jobRunnerGroup.PodsStatus"
                }
            }
        },
        "jobs.Attempt": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "executionCount": {
                    "type": "integer"
                },
                "finishedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "phase": {
                    "$ref": "#/definitions/jobs.Phase"
                },
                "startedAt": {
                    "type": "string"
                },
                "state": {
                    "$ref": "#/definitions/jobs.State"
                }
            }
        },
        "jobs.CanceledBy": {
            "type": "string",
            "enum": [
                "timeout",
                "apiRequest",
                "internal"
            ],
            "x-enum-varnames": [
                "CanceledByTimeout",
                "CanceledByAPIRequest",
                "CanceledByInternal"
            ]
        },
        "jobs.CanceledState": {
            "type": "object",
            "properties": {
                "canceledAt": {
                    "type": "string"
                },
                "canceledBy": {
                    "$ref": "#/definitions/jobs.CanceledBy"
                },
                "inCluster": {
                    "type": "boolean"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "jobs.FailedState": {
            "type": "object",
            "properties": {
                "exitCode": {
                    "type": "integer",
                    "x-nullable": true
                },
                "message": {
                    "type": "string"
                },
                "retryAttempt": {
                    "type": "boolean"
                }
            }
        },
        "jobs.Phase": {
            "type": "string",
            "enum": [
                "queued",
                "running",
                "failed",
                "succeeded",
                "canceled"
            ],
            "x-enum-varnames": [
                "QueuedPhase",
                "RunningPhase",
                "FailedPhase",
                "SucceededPhase",
                "CanceledPhase"
            ]
        },
        "jobs.PhaseCount": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "phase": {
                    "$ref": "#/definitions/jobs.Phase"
                }
            }
        },
        "jobs.QueuedState": {
            "type": "object",
            "properties": {
                "lastMessage": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "jobs.RunningState": {
            "type": "object",
            "properties": {
                "podName": {
                    "type": "string"
                },
                "podNamespace": {
                    "type": "string"
                }
            }
        },
        "jobs.State": {
            "type": "object",
            "properties": {
                "canceled": {
                    "$ref": "#/definitions/jobs.CanceledState"
                },
                "failed": {
                    "$ref": "#/definitions/jobs.FailedState"
                },
                "queued": {
                    "$ref": "#/definitions/jobs.QueuedState"
                },
                "running": {
                    "$ref": "#/definitions/jobs.RunningState"
                },
                "succeeded": {
                    "$ref": "#/definitions/jobs.SucceededState"
                }
            }
        },
        "jobs.Status": {
            "type": "object",
            "properties": {
                "attempts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/jobs.Attempt"
                    }
                },
                "routingKey": {
                    "type": "string"
                },
                "runnerGroupDeletionCompletedAt": {
                    "type": "string"
                }
            }
        },
        "jobs.SucceededState": {
            "type": "object",
            "properties": {
                "exitCode": {
                    "type": "integer"
                }
            }
        },
        "local": {
            "type": "object",
            "properties": {
                "env": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/sandbox.EnvVar"
                    }
                },
                "files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/sandbox.FileOp"
                    }
                },
                "from": {
                    "$ref": "#/definitions/local.From"
                },
                "mappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/local.PortMapping"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "local.From": {
            "type": "object",
            "required": [
                "kind",
                "name",
                "namespace"
            ],
            "properties": {
                "kind": {
                    "description": "Kind of the baseline workload.",
                    "type": "string",
                    "example": "Deployment"
                },
                "name": {
                    "description": "Name of the entity within the Kubernetes cluster.",
                    "type": "string",
                    "example": "my-frontend"
                },
                "namespace": {
                    "description": "Namespace within which the entity lives in the Kubernetes cluster.",
                    "type": "string",
                    "example": "default"
                }
            }
        },
        "local.PortMapping": {
            "type": "object",
            "properties": {
                "appProtocol": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "toLocal": {
                    "type": "string"
                }
            }
        },
        "orgs.GetOrgNameResponse": {
            "type": "object",
            "properties": {
                "clusterID": {
                    "description": "ID of Authenticated Cluster, if any (via signadot-cluster-token header)",
                    "type": "string"
                },
                "featureFlags": {
                    "description": "Feature Flags as result of authentication",
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                },
                "orgs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/orgs.Org"
                    }
                },
                "user": {
                    "description": "Authenticated User, if any",
                    "allOf": [
                        {
                            "$ref": "#/definitions/orgs.User"
                        }
                    ]
                },
                "userFlags": {
                    "description": "Flags of authenticated user, if any",
                    "allOf": [
                        {
                            "$ref": "#/definitions/auth.UserFlags"
                        }
                    ]
                }
            }
        },
        "orgs.Org": {
            "type": "object",
            "properties": {
                "displayName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "orgs.User": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "resourceplugin.Runner": {
            "type": "object",
            "properties": {
                "image": {
                    "description": "Image for the runner instance",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace to create this runner instance in",
                    "type": "string"
                },
                "podTemplateOverlay": {
                    "description": "Pod template overlay",
                    "type": "string"
                }
            }
        },
        "resourceplugin.Spec": {
            "type": "object",
            "properties": {
                "create": {
                    "description": "Create refers to the `create` steps for spinning up the resource",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/resourceplugin.Step"
                    }
                },
                "delete": {
                    "description": "Delete refers to the `delete` steps for spinning up the resource",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/resourceplugin.Step"
                    }
                },
                "description": {
                    "description": "Description for the resource",
                    "type": "string"
                },
                "runner": {
                    "description": "Runner for the resource plugin",
                    "allOf": [
                        {
                            "$ref": "#/definitions/resourceplugin.Runner"
                        }
                    ]
                }
            }
        },
        "resourceplugin.Status": {
            "type": "object",
            "properties": {
                "resources": {
                    "description": "Resources created using the resource plugin",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceInfo"
                    }
                }
            }
        },
        "resourceplugin.Step": {
            "type": "object",
            "properties": {
                "inputs": {
                    "description": "Inputs for the step",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/resourceplugin.StepInput"
                    }
                },
                "name": {
                    "description": "Name for the step",
                    "type": "string"
                },
                "outputs": {
                    "description": "Outputs for the step",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/resourceplugin.StepOut"
                    }
                },
                "script": {
                    "description": "Script to execute in the step",
                    "type": "string"
                }
            }
        },
        "resourceplugin.StepInput": {
            "type": "object",
            "properties": {
                "as": {
                    "description": "If the As field is not speficied, we will take the input name\nuppercase it, convert \"-\" to \"_\", and inject it as an env var into\nthe main container",
                    "allOf": [
                        {
                            "$ref": "#/definitions/resourceplugin.StepInputTo"
                        }
                    ]
                },
                "name": {
                    "description": "Name for the input",
                    "type": "string"
                },
                "type": {
                    "description": "Type of input",
                    "type": "string"
                },
                "valueFromSandbox": {
                    "description": "ValueFromSandbox defines whether or not to source value from the sandbox spec",
                    "type": "boolean"
                },
                "valueFromStep": {
                    "description": "ValueFromStep is an optional string specifying the output of\nanother step when not nil.  Exactly one of ValueFromSandbox\nand 'ValueFromStep != nil' must hold.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/resourceplugin.ValueFromStep"
                        }
                    ]
                }
            }
        },
        "resourceplugin.StepInputTo": {
            "type": "object",
            "properties": {
                "env": {
                    "description": "Inject the input as an env variable with name Env inside the\nmain container",
                    "type": "string"
                },
                "path": {
                    "description": "Expose the input as a file at Path inside the main container",
                    "type": "string"
                }
            }
        },
        "resourceplugin.StepOut": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description for the output",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the output variable",
                    "type": "string"
                },
                "type": {
                    "description": "Type of output",
                    "type": "string"
                },
                "valueFromPath": {
                    "description": "Path within the main container from where the output will be read",
                    "type": "string"
                }
            }
        },
        "resourceplugin.ValueFromStep": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the step",
                    "type": "string"
                },
                "output": {
                    "description": "Name of the variable from the step",
                    "type": "string"
                }
            }
        },
        "routeGroup.Match": {
            "type": "object",
            "properties": {
                "all": {
                    "description": "When All is non-nil, T matches a set of labels if and only if every element of All matches them.\nOnly one field may be non-nil.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/routeGroup.Match"
                    },
                    "x-omitempty": true
                },
                "any": {
                    "description": "When Any is non-nil, T matches a set of labels if and only if some element of Any matches them.\nOnly one field may be non-nil.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/routeGroup.Match"
                    },
                    "x-omitempty": true
                },
                "label": {
                    "description": "When Label is non-nil, T matches a set of labels L if and only if t.Label.Matches(L).\nOnly one field may be non-nil.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/routeGroup.MatchLabel"
                        }
                    ]
                }
            }
        },
        "routeGroup.MatchLabel": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "Key is an exact match on a label key, glob\ncharacters are just considered normal characters.",
                    "type": "string"
                },
                "value": {
                    "description": "Value is a glob match for the value of a\nsandbox label.  See https://pkg.go.dev/path/filepath#Match\nfor the file glob syntax.",
                    "type": "string"
                }
            }
        },
        "routeGroup.Spec": {
            "type": "object",
            "properties": {
                "cluster": {
                    "description": "Cluster gives the cluster to which the route group applies.\nIf left empty, this RG will become a multi-cluster RG..",
                    "type": "string"
                },
                "description": {
                    "description": "Description provides a short description of the route group.",
                    "type": "string"
                },
                "endpoints": {
                    "description": "Endpoints define endpoints which target different in-cluster\nservices.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/routegroups.Endpoint"
                    }
                },
                "match": {
                    "description": "Match defines a matcher for labels, which matches\nsandboxes that should be a part of this route group.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/routeGroup.Match"
                        }
                    ]
                },
                "ttl": {
                    "description": "TTL define when/how the route group should be deleted",
                    "allOf": [
                        {
                            "$ref": "#/definitions/routeGroup.TTL"
                        }
                    ]
                }
            }
        },
        "routeGroup.Status": {
            "type": "object",
            "properties": {
                "matchedSandboxes": {
                    "description": "MatchedSandboxes gives the list of sandboxes whose labels\nwere matched by the 'match' object in the spec.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "message": {
                    "description": "Message is a human readable explanation of why\nthe sandbox is healthy or not.",
                    "type": "string"
                },
                "ready": {
                    "description": "Ready indicates whether the sandbox is ready,\nmeaning that it can be used for testing.",
                    "type": "boolean"
                },
                "reason": {
                    "description": "Reason is a machine readable explanation of why\nthe sandbox is healthy or not.",
                    "type": "string"
                },
                "scheduledDeleteTime": {
                    "description": "ScheduledDeleteTime returns the formatted and computed ttl based on the Duration\nand OffsetFrom",
                    "type": "string"
                }
            }
        },
        "routeGroup.TTL": {
            "type": "object",
            "properties": {
                "duration": {
                    "description": "Duration represents the duration until routegroup's end of life.\nIt should be an unsigned integer not exceeding 32 bits followed by\na units character, which can be one of the following.\n  - 'm' for minutes\n  - 'h' for hours\n  - 'd' for days\n  - 'w' for weeks",
                    "type": "string"
                },
                "offsetFrom": {
                    "description": "OffsetFrom indicates what the Duration is relative to.  It\nmay be the empty string, \"noMatchedSandboxes\", \"createdAt\" or \"updatedAt\". The empty string\ndefaults to meaning \"noMatchedSandboxes\".",
                    "type": "string"
                }
            }
        },
        "routegroups.Endpoint": {
            "type": "object",
            "properties": {
                "cluster": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "target": {
                    "type": "string"
                }
            }
        },
        "routegroups.EndpointURL": {
            "type": "object",
            "properties": {
                "cluster": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "target": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "sandbox.CustomPatch": {
            "type": "object",
            "properties": {
                "type": {
                    "$ref": "#/definitions/sandboxes.PatchType"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "sandbox.Customizations": {
            "type": "object",
            "properties": {
                "env": {
                    "description": "Environment variable modifications that will be applied to the forked workload",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/sandbox.EnvVar"
                    }
                },
                "images": {
                    "description": "One or more docker images that will be applied to the forked workload",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/sandbox.Image"
                    }
                },
                "patch": {
                    "$ref": "#/definitions/sandbox.CustomPatch"
                }
            }
        },
        "sandbox.DefaultRouteGroup": {
            "type": "object",
            "properties": {
                "endpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/endpoints.Endpoint"
                    }
                }
            }
        },
        "sandbox.Endpoint": {
            "type": "object",
            "properties": {
                "baselineUrl": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                },
                "routeType": {
                    "type": "string"
                },
                "target": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "sandbox.EnvValueFrom": {
            "type": "object",
            "properties": {
                "configMap": {
                    "$ref": "#/definitions/sandbox.EnvValueFromMap"
                },
                "fork": {
                    "$ref": "#/definitions/sandbox.EnvValueFromFork"
                },
                "resource": {
                    "$ref": "#/definitions/sandbox.EnvValueFromResource"
                },
                "secret": {
                    "$ref": "#/definitions/sandbox.EnvValueFromMap"
                }
            }
        },
        "sandbox.EnvValueFromFork": {
            "type": "object",
            "properties": {
                "expression": {
                    "type": "string"
                },
                "forkOf": {
                    "$ref": "#/definitions/sandbox.ForkOf"
                }
            }
        },
        "sandbox.EnvValueFromMap": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "optional": {
                    "type": "boolean"
                }
            }
        },
        "sandbox.EnvValueFromResource": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "outputKey": {
                    "type": "string"
                }
            }
        },
        "sandbox.EnvVar": {
            "type": "object",
            "properties": {
                "container": {
                    "description": "name of container to which it applies",
                    "type": "string"
                },
                "name": {
                    "description": "environmental variable name",
                    "type": "string"
                },
                "operation": {
                    "description": "upsert or delete",
                    "allOf": [
                        {
                            "$ref": "#/definitions/sandboxes.EnvOpName"
                        }
                    ]
                },
                "value": {
                    "description": "environmental variable value",
                    "type": "string"
                },
                "valueFrom": {
                    "description": "environmental variable dynamic value",
                    "allOf": [
                        {
                            "$ref": "#/definitions/sandbox.EnvValueFrom"
                        }
                    ]
                }
            }
        },
        "sandbox.FileOp": {
            "type": "object",
            "properties": {
                "path": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "valueFrom": {
                    "$ref": "#/definitions/sandbox.FileSource"
                }
            }
        },
        "sandbox.FileSource": {
            "type": "object",
            "properties": {
                "configMap": {
                    "$ref": "#/definitions/sandbox.FileSourceMap"
                },
                "resource": {
                    "$ref": "#/definitions/sandbox.FileSourceResource"
                },
                "secret": {
                    "$ref": "#/definitions/sandbox.FileSourceMap"
                }
            }
        },
        "sandbox.FileSourceMap": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "optional": {
                    "type": "boolean"
                }
            }
        },
        "sandbox.FileSourceResource": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "outputKey": {
                    "type": "string"
                }
            }
        },
        "sandbox.Fork": {
            "type": "object",
            "properties": {
                "customizations": {
                    "description": "Customizations specify the customizations we will apply on the fork",
                    "allOf": [
                        {
                            "$ref": "#/definitions/sandbox.Customizations"
                        }
                    ]
                },
                "endpoints": {
                    "description": "Deprecated. Use defaultRouteGroup.Endpoints instead.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/sandbox.ForkEndpoint"
                    },
                    "x-omitempty": "true"
                },
                "forkOf": {
                    "description": "ForkOf specifies the target workload that we will be forking.  In this usage\nthe Kind of the ForkOf object must not be a service.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/sandbox.ForkOf"
                        }
                    ]
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "sandbox.ForkEndpoint": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the endpoint",
                    "type": "string"
                },
                "port": {
                    "description": "Port it will map to on the forked workload",
                    "type": "integer"
                },
                "protocol": {
                    "description": "Protocol that this endpoint uses",
                    "type": "string"
                }
            }
        },
        "sandbox.ForkOf": {
            "type": "object",
            "required": [
                "kind",
                "name",
                "namespace"
            ],
            "properties": {
                "kind": {
                    "description": "Kind of the baseline workload.",
                    "type": "string",
                    "example": "Deployment"
                },
                "name": {
                    "description": "Name of the entity within the Kubernetes cluster.",
                    "type": "string",
                    "example": "my-frontend"
                },
                "namespace": {
                    "description": "Namespace within which the entity lives in the Kubernetes cluster.",
                    "type": "string",
                    "example": "default"
                }
            }
        },
        "sandbox.HostEndpoint": {
            "type": "object",
            "properties": {
                "host": {
                    "description": "Hostname that this endpoint points to",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the endpoint",
                    "type": "string"
                },
                "port": {
                    "description": "Port it will map to on the specified host",
                    "type": "integer"
                },
                "protocol": {
                    "description": "Protocol that this endpoint uses",
                    "type": "string"
                }
            }
        },
        "sandbox.Image": {
            "type": "object",
            "properties": {
                "container": {
                    "description": "Container is the container this image must apply to in the forked workload",
                    "type": "string"
                },
                "image": {
                    "description": "Name of the image (e.g. gcr.io/my-image/repo:my-tag)",
                    "type": "string"
                }
            }
        },
        "sandbox.LocalWorkloadStatus": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "tunnel": {
                    "$ref": "#/definitions/sandbox.TunnelStatus"
                }
            }
        },
        "sandbox.Readiness": {
            "type": "object",
            "properties": {
                "forwards": {
                    "description": "Forwards status",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/sandboxes.ForwardStatus"
                    }
                },
                "jobs": {
                    "description": "status of the jobs running in the context of the given sandbox",
                    "allOf": [
                        {
                            "$ref": "#/definitions/sandboxes.JobsSummary"
                        }
                    ]
                },
                "local": {
                    "description": "local workloads status",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/sandbox.LocalWorkloadStatus"
                    }
                },
                "message": {
                    "description": "Message is a human readable explanation of why\nthe sandbox is healthy or not.",
                    "type": "string"
                },
                "ready": {
                    "description": "Ready indicates whether the sandbox is ready,\nmeaning that it can be used for testing.",
                    "type": "boolean"
                },
                "reason": {
                    "description": "Reason is a machine readable explanation of why\nthe sandbox is healthy or not.",
                    "type": "string"
                },
                "scheduledDeleteTime": {
                    "description": "ScheduledDeleteTime returns the formatted and computed ttl based on the Duration\nand OffsetFrom",
                    "type": "string"
                },
                "testExecutions": {
                    "description": "status of the test executions running in the context of the given sandbox",
                    "allOf": [
                        {
                            "$ref": "#/definitions/sandbox.TestExecutionsSummary"
                        }
                    ]
                }
            }
        },
        "sandbox.Resource": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "params": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "plugin": {
                    "type": "string"
                }
            }
        },
        "sandbox.Spec": {
            "type": "object",
            "required": [
                "cluster",
                "forks"
            ],
            "properties": {
                "cluster": {
                    "description": "Cluster within which this sandbox should be created",
                    "type": "string"
                },
                "defaultRouteGroup": {
                    "description": "DefaultRouteGroup can be used to define route group endpoints for the sandbox.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/sandbox.DefaultRouteGroup"
                        }
                    ]
                },
                "description": {
                    "description": "Description of the purpose of this sandbox",
                    "type": "string"
                },
                "disableSandboxTrafficManager": {
                    "description": "DisableSandboxTrafficManager provides a way of turning off the sandbox\ntraffic manager for forks in this sandbox.\nDeprecated in operators since v1.1. The sandbox traffic manager has been\nretired.",
                    "type": "boolean"
                },
                "endpoints": {
                    "description": "Deprecated. Use defaultRouteGroup.Endpoints instead.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/sandbox.HostEndpoint"
                    },
                    "x-omitempty": "true"
                },
                "forks": {
                    "description": "Forks is the specification of each forked entity",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/sandbox.Fork"
                    }
                },
                "labels": {
                    "description": "Labels are used to specify metadata associated with the sandbox as key-value pairs.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "local": {
                    "description": "Local Workloads",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/local"
                    }
                },
                "localMachineID": {
                    "description": "Identifier of the machine from where a sandbox containing local workloads\nwas created or is intended to be ran",
                    "type": "string"
                },
                "middleware": {
                    "description": "Request Middleware",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/sandboxes.Middleware"
                    }
                },
                "resources": {
                    "description": "Resources specifies each required resource to spin up the sandbox",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/sandbox.Resource"
                    }
                },
                "routing": {
                    "description": "Routing specification",
                    "allOf": [
                        {
                            "$ref": "#/definitions/sandboxes.Routing"
                        }
                    ]
                },
                "ttl": {
                    "description": "TTL gives the maximum lifetime of the sandbox.\nIt may be empty, in which case it defaults to forever.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/sandbox.TTL"
                        }
                    ]
                },
                "virtual": {
                    "description": "Virtual Workloads",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/virtual"
                    }
                }
            }
        },
        "sandbox.TTL": {
            "type": "object",
            "properties": {
                "duration": {
                    "description": "Duration represents the duration until sandbox end of life.\nIt should be an unsigned integer not exceeding 32 bits followed by\na units character, which can be one of the following.\n  - 'm' for minutes\n  - 'h' for hours\n  - 'd' for days\n  - 'w' for weeks",
                    "type": "string"
                },
                "offsetFrom": {
                    "description": "OffsetFrom indicates what the Duration is relative to.  It\nmay be the empty string, \"createdAt\" or \"updatedAt\".  The empty string\ndefaults to meaning \"createdAt\".",
                    "type": "string"
                }
            }
        },
        "sandbox.TestExecutionsSummary": {
            "type": "object",
            "properties": {
                "checks": {
                    "$ref": "#/definitions/sandbox.TestExecutionsSummaryChecks"
                },
                "phaseCounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/testexecutions.PhaseCount"
                    }
                },
                "trafficDiffs": {
                    "$ref": "#/definitions/sandbox.TestExecutionsSummaryTrafficDiffs"
                }
            }
        },
        "sandbox.TestExecutionsSummaryChecks": {
            "type": "object",
            "properties": {
                "failed": {
                    "type": "integer"
                },
                "passed": {
                    "type": "integer"
                }
            }
        },
        "sandbox.TestExecutionsSummaryTrafficDiffs": {
            "type": "object",
            "properties": {
                "green": {
                    "type": "integer"
                },
                "red": {
                    "type": "integer"
                },
                "yellow": {
                    "type": "integer"
                }
            }
        },
        "sandbox.TunnelStatus": {
            "type": "object",
            "properties": {
                "health": {
                    "type": "object",
                    "properties": {
                        "connected": {
                            "type": "boolean"
                        },
                        "lastCheckTime": {
                            "type": "string"
                        },
                        "lastConnectedTime": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "sandboxes.ArgValueFrom": {
            "type": "object",
            "properties": {
                "forward": {
                    "type": "string"
                }
            }
        },
        "sandboxes.Argument": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name indicates the name of the associated parameter.",
                    "type": "string"
                },
                "value": {
                    "description": "Value indicates the value passed to the parameter of\nthe same name.",
                    "type": "string"
                },
                "valueFrom": {
                    "description": "ValueFrom indicates from where to grab the value",
                    "allOf": [
                        {
                            "$ref": "#/definitions/sandboxes.ArgValueFrom"
                        }
                    ]
                }
            }
        },
        "sandboxes.EnvOpName": {
            "type": "string",
            "enum": [
                "upsert",
                "delete"
            ],
            "x-enum-varnames": [
                "EnvOpUpsert",
                "EnvOpDelete"
            ]
        },
        "sandboxes.Forward": {
            "type": "object",
            "properties": {
                "appProtocol": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "toLocal": {
                    "type": "string"
                }
            }
        },
        "sandboxes.ForwardStatus": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "tunnel": {
                    "$ref": "#/definitions/sandbox.TunnelStatus"
                }
            }
        },
        "sandboxes.JobsSummary": {
            "type": "object",
            "properties": {
                "phaseCounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/jobs.PhaseCount"
                    }
                }
            }
        },
        "sandboxes.Middleware": {
            "type": "object",
            "properties": {
                "args": {
                    "description": "Middleware arguments",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/sandboxes.Argument"
                    }
                },
                "match": {
                    "description": "Matches specifies a disjunction of matching criteria for dispatching\nthe middleware.  Any empty list means don't dispatch anything.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/sandboxes.MiddlewareMatch"
                    }
                },
                "name": {
                    "description": "Middleware name",
                    "type": "string"
                }
            }
        },
        "sandboxes.MiddlewareMatch": {
            "type": "object",
            "properties": {
                "workload": {
                    "description": "Workload specifies a glob which matches\neach workload name in the spec.",
                    "type": "string"
                }
            }
        },
        "sandboxes.PatchType": {
            "type": "string",
            "enum": [
                "strategic",
                "merge",
                "json",
                "signadot/env",
                "signadot/image"
            ],
            "x-enum-varnames": [
                "PatchTypeStrategic",
                "PatchTypeMerge",
                "PatchTypeJSON",
                "PatchTypeSDEnv",
                "PatchTypeSDImage"
            ]
        },
        "sandboxes.Routing": {
            "type": "object",
            "properties": {
                "forwards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/sandboxes.Forward"
                    }
                }
            }
        },
        "syntax.Position": {
            "type": "object",
            "properties": {
                "col": {
                    "description": "1-based column (rune) number; 0 if column unknown",
                    "type": "integer",
                    "format": "int32"
                },
                "line": {
                    "description": "1-based line number; 0 if line unknown",
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "testexecutions.Check": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/testexecutions.CheckError"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "testexecutions.CheckError": {
            "type": "object",
            "properties": {
                "attrs": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "message": {
                    "type": "string"
                },
                "sourcePosition": {
                    "$ref": "#/definitions/syntax.Position"
                }
            }
        },
        "testexecutions.Checks": {
            "type": "object",
            "properties": {
                "baseline": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/testexecutions.Check"
                    }
                },
                "sandbox": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/testexecutions.Check"
                    }
                }
            }
        },
        "testexecutions.Phase": {
            "type": "string",
            "enum": [
                "pending",
                "in_progress",
                "failed",
                "succeeded",
                "canceled"
            ],
            "x-enum-varnames": [
                "PendingPhase",
                "InProgressPhase",
                "FailedPhase",
                "SucceededPhase",
                "CanceledPhase"
            ]
        },
        "testexecutions.PhaseCount": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "phase": {
                    "$ref": "#/definitions/testexecutions.Phase"
                }
            }
        },
        "testexecutions.QueryResult": {
            "type": "object",
            "properties": {
                "cursor": {
                    "type": "string"
                },
                "execution": {
                    "$ref": "#/definitions/TestExecution"
                }
            }
        },
        "testexecutions.UnpairedCapture": {
            "type": "object",
            "properties": {
                "baselineCaptureID": {
                    "type": "string"
                },
                "targetCaptureID": {
                    "type": "string"
                }
            }
        },
        "trafficmodels.By": {
            "type": "object",
            "properties": {
                "direction": {
                    "$ref": "#/definitions/trafficmodels.Direction"
                },
                "kind": {
                    "$ref": "#/definitions/trafficmodels.Kind"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                }
            }
        },
        "trafficmodels.DiffOperation": {
            "type": "string",
            "enum": [
                "add",
                "remove",
                "replace"
            ],
            "x-enum-varnames": [
                "Add",
                "Remove",
                "Replace"
            ]
        },
        "trafficmodels.Direction": {
            "type": "string",
            "enum": [
                "Inbound",
                "Outbound"
            ],
            "x-enum-varnames": [
                "Inbound",
                "Outbound"
            ]
        },
        "trafficmodels.Kind": {
            "type": "string",
            "enum": [
                "Job",
                "Deployment",
                "Rollout"
            ],
            "x-enum-varnames": [
                "Job",
                "Deployment",
                "Rollout"
            ]
        },
        "virtual": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "workload": {
                    "$ref": "#/definitions/local.From"
                }
            }
        },
        "workload.Workload": {
            "type": "object",
            "required": [
                "kind",
                "name",
                "namespace"
            ],
            "properties": {
                "kind": {
                    "description": "Kind of the baseline workload.",
                    "type": "string",
                    "example": "Deployment"
                },
                "name": {
                    "description": "Name of the entity within the Kubernetes cluster.",
                    "type": "string",
                    "example": "my-frontend"
                },
                "namespace": {
                    "description": "Namespace within which the entity lives in the Kubernetes cluster.",
                    "type": "string",
                    "example": "default"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "signadot-api-key",
            "in": "header"
        }
    }
}