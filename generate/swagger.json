{
  "basePath": "/api/v2",
  "definitions": {
    "Cluster": {
      "properties": {
        "createdAt": {
          "description": "The time when this cluster was registered with Signadot.",
          "type": "string"
        },
        "name": {
          "description": "The name of the cluster.",
          "type": "string"
        },
        "operator": {
          "$ref": "#/definitions/cluster.Operator"
        }
      },
      "type": "object"
    },
    "ClusterToken": {
      "properties": {
        "createdAt": {
          "description": "The time when this cluster was registered with Signadot.",
          "type": "string"
        },
        "id": {
          "description": "The ID of this token",
          "type": "string"
        },
        "maskedValue": {
          "description": "A Masked token value.",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/ClusterTokenStatus"
        },
        "token": {
          "description": "The token value.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ClusterTokenStatus": {
      "properties": {
        "lastConnectedAt": {
          "description": "The last time at which this token was used to connect.",
          "type": "string"
        },
        "lastConnectedIp": {
          "description": "The last IP address from which this token connected.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "EmptyResponse": {
      "type": "object"
    },
    "ErrorResponse": {
      "properties": {
        "error": {
          "type": "string"
        },
        "requestId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ResourceInfo": {
      "properties": {
        "cluster": {
          "description": "Cluster that the resource is created in",
          "type": "string"
        },
        "name": {
          "description": "Name of the created resource",
          "type": "string"
        },
        "sandbox": {
          "description": "Name of the sandbox containing the resource",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ResourcePlugin": {
      "properties": {
        "createdAt": {
          "description": "The time at which the resource plugin was created",
          "type": "string"
        },
        "name": {
          "description": "Name of the resource plugin",
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/resourceplugin.Spec"
        },
        "status": {
          "$ref": "#/definitions/resourceplugin.Status"
        },
        "updatedAt": {
          "description": "The time at which the resource plugin was last updated",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RouteGroup": {
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "endpoints": {
          "items": {
            "$ref": "#/definitions/routeGroup.Endpoint"
          },
          "type": "array",
          "x-omitempty": true
        },
        "name": {
          "type": "string"
        },
        "routingKey": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/routeGroup.Spec"
        },
        "status": {
          "$ref": "#/definitions/routeGroup.Status"
        }
      },
      "type": "object"
    },
    "Sandbox": {
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "endpoints": {
          "items": {
            "$ref": "#/definitions/sandbox.Endpoint"
          },
          "type": "array"
        },
        "name": {
          "description": "Human-readable name of this sandbox",
          "type": "string"
        },
        "routingKey": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/sandbox.Spec"
        },
        "status": {
          "$ref": "#/definitions/sandboxes.SandboxStatus"
        }
      },
      "type": "object"
    },
    "cluster.Operator": {
      "properties": {
        "version": {
          "description": "The operator version of the cluster.  This may be\nnil if the cluster has not yet connected to Signadot.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "intstr.IntOrString": {
      "properties": {
        "intVal": {
          "type": "integer"
        },
        "strVal": {
          "type": "string"
        },
        "type": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "resource.Quantity": {
      "properties": {
        "Format": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "resourceplugin.Runner": {
      "properties": {
        "basePodTemplate": {
          "$ref": "#/definitions/v1.PodTemplateSpec"
        },
        "image": {
          "description": "Image for the runner instance",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace to create this runner instance in",
          "type": "string"
        }
      },
      "type": "object"
    },
    "resourceplugin.Spec": {
      "properties": {
        "create": {
          "description": "Create refers to the `create` lifecycle method for spinning up the resource",
          "items": {
            "$ref": "#/definitions/resourceplugin.Step"
          },
          "type": "array"
        },
        "delete": {
          "description": "Delete refers to the `delete` lifecycle method for spinning up the resource",
          "items": {
            "$ref": "#/definitions/resourceplugin.Step"
          },
          "type": "array"
        },
        "description": {
          "description": "Description for the resource",
          "type": "string"
        },
        "runner": {
          "$ref": "#/definitions/resourceplugin.Runner"
        }
      },
      "type": "object"
    },
    "resourceplugin.Status": {
      "properties": {
        "resources": {
          "description": "Resources created using the resource plugin",
          "items": {
            "$ref": "#/definitions/ResourceInfo"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "resourceplugin.Step": {
      "properties": {
        "env": {
          "description": "Env vars for the step",
          "items": {
            "$ref": "#/definitions/resourceplugin.StepEnv"
          },
          "type": "array"
        },
        "inputs": {
          "description": "Inputs for the step",
          "items": {
            "$ref": "#/definitions/resourceplugin.StepInput"
          },
          "type": "array"
        },
        "name": {
          "description": "Name for the step",
          "type": "string"
        },
        "outputs": {
          "description": "Outputs for the step",
          "items": {
            "$ref": "#/definitions/resourceplugin.StepOut"
          },
          "type": "array"
        },
        "script": {
          "description": "Script to execute in the step",
          "type": "string"
        }
      },
      "type": "object"
    },
    "resourceplugin.StepEnv": {
      "properties": {
        "name": {
          "description": "Name for the environment variable",
          "type": "string"
        },
        "valueFromInput": {
          "description": "The input variable from which to source the value for the environment variable",
          "type": "string"
        }
      },
      "type": "object"
    },
    "resourceplugin.StepInput": {
      "properties": {
        "name": {
          "description": "Name for the input",
          "type": "string"
        },
        "to": {
          "$ref": "#/definitions/resourceplugin.StepInputTo"
        },
        "type": {
          "description": "Type of input",
          "type": "string"
        },
        "valueFromSandbox": {
          "description": "ValueFromSandbox defines whether or not to source value from the sandbox spec",
          "type": "boolean"
        },
        "valueFromStep": {
          "$ref": "#/definitions/resourceplugin.ValueFromStep"
        }
      },
      "type": "object"
    },
    "resourceplugin.StepInputTo": {
      "properties": {
        "env": {
          "description": "Inject the input as an env variable with name Env inside the\nmain container",
          "type": "string"
        },
        "localPath": {
          "description": "Expose the input as a file at LocalPath inside the main container",
          "type": "string"
        }
      },
      "type": "object"
    },
    "resourceplugin.StepOut": {
      "properties": {
        "description": {
          "description": "Description for the output",
          "type": "string"
        },
        "from": {
          "description": "TBD",
          "type": "string"
        },
        "name": {
          "description": "Name of the output variable",
          "type": "string"
        },
        "type": {
          "description": "Type of output",
          "type": "string"
        }
      },
      "type": "object"
    },
    "resourceplugin.ValueFromStep": {
      "properties": {
        "name": {
          "description": "Name of the step",
          "type": "string"
        },
        "output": {
          "description": "Name of the variable from the step",
          "type": "string"
        }
      },
      "type": "object"
    },
    "resourceplugins.ResourcePlugin": {
      "properties": {
        "createdAt": {
          "description": "The time at which the resource plugin was created",
          "type": "string"
        },
        "name": {
          "description": "Name of the resource plugin",
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/resourceplugin.Spec"
        },
        "status": {
          "$ref": "#/definitions/resourceplugin.Status"
        },
        "updatedAt": {
          "description": "The time at which the resource plugin was last updated",
          "type": "string"
        }
      },
      "type": "object"
    },
    "routeGroup.Endpoint": {
      "properties": {
        "name": {
          "type": "string"
        },
        "target": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "routeGroup.Match": {
      "properties": {
        "all": {
          "description": "When All is non-nil, T matches a set of labels if and only if every element of All matches them.\nOnly one field may be non-nil.",
          "items": {
            "$ref": "#/definitions/routeGroup.Match"
          },
          "type": "array",
          "x-omitempty": true
        },
        "any": {
          "description": "When Any is non-nil, T matches a set of labels if and only if some element of Any matches them.\nOnly one field may be non-nil.",
          "items": {
            "$ref": "#/definitions/routeGroup.Match"
          },
          "type": "array",
          "x-omitempty": true
        },
        "label": {
          "$ref": "#/definitions/routeGroup.MatchLabel"
        }
      },
      "type": "object"
    },
    "routeGroup.MatchLabel": {
      "properties": {
        "key": {
          "description": "Key is an exact match on a label key, glob\ncharacters are just considered normal characters.",
          "type": "string"
        },
        "value": {
          "description": "Value is a glob match for the value of a\nsandbox label.  See https://pkg.go.dev/path/filepath#Match\nfor the file glob syntax.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "routeGroup.Spec": {
      "properties": {
        "cluster": {
          "description": "Cluster gives the cluster to which the route group applies.",
          "type": "string"
        },
        "description": {
          "description": "Description provides a short description of the route group.",
          "type": "string"
        },
        "endpoints": {
          "description": "Endpoints define endpoints which target different in-cluster\nservices.",
          "items": {
            "$ref": "#/definitions/routeGroup.SpecEndpoint"
          },
          "type": "array"
        },
        "match": {
          "$ref": "#/definitions/routeGroup.Match"
        }
      },
      "type": "object"
    },
    "routeGroup.SpecEndpoint": {
      "properties": {
        "name": {
          "type": "string"
        },
        "target": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "routeGroup.Status": {
      "properties": {
        "matchedSandboxes": {
          "description": "MatchedSandboxes gives the list of sandboxes whose labels\nwere matched by the 'match' object in the spec.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "message": {
          "description": "Message is a human readable explanation of why\nthe sandbox is healthy or not.",
          "type": "string"
        },
        "ready": {
          "description": "Ready indicates whether the sandbox is ready,\nmeaning that it can be used for testing.",
          "type": "boolean"
        },
        "reason": {
          "description": "Reason is a machine readable explanation of why\nthe sandbox is healthy or not.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "sandbox.CustomPatch": {
      "properties": {
        "type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "sandbox.Customizations": {
      "properties": {
        "env": {
          "description": "Env var modifications that will be applied to the forked workload",
          "items": {
            "$ref": "#/definitions/sandbox.EnvVar"
          },
          "type": "array"
        },
        "images": {
          "description": "One or more docker images that will be applied to the forked workload",
          "items": {
            "$ref": "#/definitions/sandbox.Image"
          },
          "type": "array"
        },
        "patch": {
          "$ref": "#/definitions/sandbox.CustomPatch"
        }
      },
      "type": "object"
    },
    "sandbox.DefaultRouteGroup": {
      "properties": {
        "endpoints": {
          "items": {
            "$ref": "#/definitions/routeGroup.SpecEndpoint"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "sandbox.Endpoint": {
      "properties": {
        "baselineUrl": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "port": {
          "type": "integer"
        },
        "protocol": {
          "type": "string"
        },
        "routeType": {
          "type": "string"
        },
        "target": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "sandbox.EnvValueFrom": {
      "properties": {
        "fork": {
          "$ref": "#/definitions/sandbox.EnvValueFromFork"
        },
        "resource": {
          "$ref": "#/definitions/sandbox.EnvValueFromResource"
        }
      },
      "type": "object"
    },
    "sandbox.EnvValueFromFork": {
      "properties": {
        "expression": {
          "type": "string"
        },
        "forkOf": {
          "$ref": "#/definitions/sandbox.ForkOf"
        }
      },
      "type": "object"
    },
    "sandbox.EnvValueFromResource": {
      "properties": {
        "name": {
          "type": "string"
        },
        "outputKey": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "sandbox.EnvVar": {
      "properties": {
        "container": {
          "description": "name of container to which it applies",
          "type": "string"
        },
        "name": {
          "description": "environmental variable name",
          "type": "string"
        },
        "operation": {
          "description": "upsert or delete",
          "type": "string"
        },
        "value": {
          "description": "environmental variable value",
          "type": "string"
        },
        "valueFrom": {
          "$ref": "#/definitions/sandbox.EnvValueFrom"
        }
      },
      "type": "object"
    },
    "sandbox.Fork": {
      "properties": {
        "customizations": {
          "$ref": "#/definitions/sandbox.Customizations"
        },
        "endpoints": {
          "description": "Deprecated. Use defaultRouteGroup.Endpoints instead.",
          "items": {
            "$ref": "#/definitions/sandbox.ForkEndpoint"
          },
          "type": "array",
          "x-omitempty": "true"
        },
        "forkOf": {
          "$ref": "#/definitions/sandbox.ForkOf"
        }
      },
      "type": "object"
    },
    "sandbox.ForkEndpoint": {
      "properties": {
        "name": {
          "description": "Name of the endpoint",
          "type": "string"
        },
        "port": {
          "description": "Port it will map to on the forked workload",
          "type": "integer"
        },
        "protocol": {
          "description": "Protocol that this endpoint uses",
          "type": "string"
        }
      },
      "type": "object"
    },
    "sandbox.ForkOf": {
      "properties": {
        "kind": {
          "description": "Kind of entity that we want to route to. One of (Service or Deployment or Rollout).",
          "example": "Deployment",
          "type": "string"
        },
        "name": {
          "description": "Name of the entity within the Kubernetes cluster.",
          "example": "my-frontend",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace within which the entity lives in the Kubernetes cluster.",
          "example": "default",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name",
        "namespace"
      ],
      "type": "object"
    },
    "sandbox.HostEndpoint": {
      "properties": {
        "host": {
          "description": "Hostname that this endpoint points to",
          "type": "string"
        },
        "name": {
          "description": "Name of the endpoint",
          "type": "string"
        },
        "port": {
          "description": "Port it will map to on the specified host",
          "type": "integer"
        },
        "protocol": {
          "description": "Protocol that this endpoint uses",
          "type": "string"
        }
      },
      "type": "object"
    },
    "sandbox.Image": {
      "properties": {
        "container": {
          "description": "Container is the container this image must apply to in the forked workload",
          "type": "string"
        },
        "image": {
          "description": "Name of the image (e.g. gcr.io/my-image/repo:my-tag)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "sandbox.Resource": {
      "properties": {
        "name": {
          "type": "string"
        },
        "params": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "plugin": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "sandbox.Spec": {
      "properties": {
        "cluster": {
          "description": "Cluster within which this sandbox should be created",
          "type": "string"
        },
        "defaultRouteGroup": {
          "$ref": "#/definitions/sandbox.DefaultRouteGroup"
        },
        "description": {
          "description": "Description of the purpose of this sandbox",
          "type": "string"
        },
        "endpoints": {
          "description": "Deprecated. Use defaultRouteGroup.Endpoints instead.",
          "items": {
            "$ref": "#/definitions/sandbox.HostEndpoint"
          },
          "type": "array",
          "x-omitempty": "true"
        },
        "forks": {
          "description": "Forks is the specification of each forked entity",
          "items": {
            "$ref": "#/definitions/sandbox.Fork"
          },
          "type": "array"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels are used to specify metadata associated with the sandbox as key-value pairs.",
          "type": "object"
        },
        "resources": {
          "description": "Resources specifies each required resource to spin up the sandbox",
          "items": {
            "$ref": "#/definitions/sandbox.Resource"
          },
          "type": "array"
        },
        "ttl": {
          "$ref": "#/definitions/sandbox.TTL"
        }
      },
      "required": [
        "cluster",
        "forks"
      ],
      "type": "object"
    },
    "sandbox.TTL": {
      "properties": {
        "duration": {
          "description": "Duration represents the duration until sandbox end of life.\nIt should be an unsigned integer not exceeding 32 bits followed by\na units character, which can be one of the following.\n - 'm' for minutes\n - 'h' for hours\n - 'd' for days\n - 'w' for weeks",
          "type": "string"
        },
        "offsetFrom": {
          "description": "OffsetFrom indicates what the Duration is relative to.  It\nmay be the empty string or \"createdAt\".  The empty string\ndefaults to meaning \"createdAt\".",
          "type": "string"
        }
      },
      "type": "object"
    },
    "sandboxes.SandboxStatus": {
      "properties": {
        "message": {
          "description": "Message is a human readable explanation of why\nthe sandbox is healthy or not.",
          "type": "string"
        },
        "ready": {
          "description": "Ready indicates whether the sandbox is ready,\nmeaning that it can be used for testing.",
          "type": "boolean"
        },
        "reason": {
          "description": "Reason is a machine readable explanation of why\nthe sandbox is healthy or not.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.AWSElasticBlockStoreVolumeSource": {
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional",
          "type": "string"
        },
        "partition": {
          "description": "partition is the partition in the volume that you want to mount.\nIf omitted, the default is to mount by volume name.\nExamples: For volume /dev/sda1, you specify the partition as \"1\".\nSimilarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).\n+optional",
          "type": "integer"
        },
        "readOnly": {
          "description": "readOnly value true will force the readOnly setting in VolumeMounts.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n+optional",
          "type": "boolean"
        },
        "volumeID": {
          "description": "volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.Affinity": {
      "properties": {
        "nodeAffinity": {
          "$ref": "#/definitions/v1.NodeAffinity"
        },
        "podAffinity": {
          "$ref": "#/definitions/v1.PodAffinity"
        },
        "podAntiAffinity": {
          "$ref": "#/definitions/v1.PodAntiAffinity"
        }
      },
      "type": "object"
    },
    "v1.AzureDiskVolumeSource": {
      "properties": {
        "cachingMode": {
          "description": "cachingMode is the Host Caching mode: None, Read Only, Read Write.\n+optional",
          "type": "string"
        },
        "diskName": {
          "description": "diskName is the Name of the data disk in the blob storage",
          "type": "string"
        },
        "diskURI": {
          "description": "diskURI is the URI of data disk in the blob storage",
          "type": "string"
        },
        "fsType": {
          "description": "fsType is Filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n+optional",
          "type": "string"
        },
        "kind": {
          "description": "kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1.AzureFileVolumeSource": {
      "properties": {
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
          "type": "boolean"
        },
        "secretName": {
          "description": "secretName is the  name of secret that contains Azure Storage Account Name and Key",
          "type": "string"
        },
        "shareName": {
          "description": "shareName is the azure share Name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.CSIVolumeSource": {
      "properties": {
        "driver": {
          "description": "driver is the name of the CSI driver that handles this volume.\nConsult with your admin for the correct name as registered in the cluster.",
          "type": "string"
        },
        "fsType": {
          "description": "fsType to mount. Ex. \"ext4\", \"xfs\", \"ntfs\".\nIf not provided, the empty value is passed to the associated CSI driver\nwhich will determine the default filesystem to apply.\n+optional",
          "type": "string"
        },
        "nodePublishSecretRef": {
          "$ref": "#/definitions/v1.LocalObjectReference"
        },
        "readOnly": {
          "description": "readOnly specifies a read-only configuration for the volume.\nDefaults to false (read/write).\n+optional",
          "type": "boolean"
        },
        "volumeAttributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "volumeAttributes stores driver-specific properties that are passed to the CSI\ndriver. Consult your driver's documentation for supported values.\n+optional",
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1.Capabilities": {
      "properties": {
        "add": {
          "description": "Added capabilities\n+optional",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "drop": {
          "description": "Removed capabilities\n+optional",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1.CephFSVolumeSource": {
      "properties": {
        "monitors": {
          "description": "monitors is Required: Monitors is a collection of Ceph monitors\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "path": {
          "description": "path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /\n+optional",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional",
          "type": "boolean"
        },
        "secretFile": {
          "description": "secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional",
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/definitions/v1.LocalObjectReference"
        },
        "user": {
          "description": "user is optional: User is the rados user name, default is admin\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.CinderVolumeSource": {
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md\n+optional",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md\n+optional",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/v1.LocalObjectReference"
        },
        "volumeID": {
          "description": "volumeID used to identify the volume in cinder.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.ConfigMapEnvSource": {
      "properties": {
        "name": {
          "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap must be defined\n+optional",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1.ConfigMapKeySelector": {
      "properties": {
        "key": {
          "description": "The key to select.",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap or its key must be defined\n+optional",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1.ConfigMapProjection": {
      "properties": {
        "items": {
          "description": "items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional",
          "items": {
            "$ref": "#/definitions/v1.KeyToPath"
          },
          "type": "array"
        },
        "name": {
          "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
          "type": "string"
        },
        "optional": {
          "description": "optional specify whether the ConfigMap or its keys must be defined\n+optional",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1.ConfigMapVolumeSource": {
      "properties": {
        "defaultMode": {
          "description": "defaultMode is optional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDefaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
          "type": "integer"
        },
        "items": {
          "description": "items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional",
          "items": {
            "$ref": "#/definitions/v1.KeyToPath"
          },
          "type": "array"
        },
        "name": {
          "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
          "type": "string"
        },
        "optional": {
          "description": "optional specify whether the ConfigMap or its keys must be defined\n+optional",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1.Container": {
      "properties": {
        "args": {
          "description": "Arguments to the entrypoint.\nThe container image's CMD is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "command": {
          "description": "Entrypoint array. Not executed within a shell.\nThe container image's ENTRYPOINT is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "description": "List of environment variables to set in the container.\nCannot be updated.\n+optional\n+patchMergeKey=name\n+patchStrategy=merge",
          "items": {
            "$ref": "#/definitions/v1.EnvVar"
          },
          "type": "array"
        },
        "envFrom": {
          "description": "List of sources to populate environment variables in the container.\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\nwill be reported as an event when the container is starting. When a key exists in multiple\nsources, the value associated with the last source will take precedence.\nValues defined by an Env with a duplicate key will take precedence.\nCannot be updated.\n+optional",
          "items": {
            "$ref": "#/definitions/v1.EnvFromSource"
          },
          "type": "array"
        },
        "image": {
          "description": "Container image name.\nMore info: https://kubernetes.io/docs/concepts/containers/images\nThis field is optional to allow higher level config management to default or override\ncontainer images in workload controllers like Deployments and StatefulSets.\n+optional",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy.\nOne of Always, Never, IfNotPresent.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n+optional",
          "type": "string"
        },
        "lifecycle": {
          "$ref": "#/definitions/v1.Lifecycle"
        },
        "livenessProbe": {
          "$ref": "#/definitions/v1.Probe"
        },
        "name": {
          "description": "Name of the container specified as a DNS_LABEL.\nEach container in a pod must have a unique name (DNS_LABEL).\nCannot be updated.",
          "type": "string"
        },
        "ports": {
          "description": "List of ports to expose from the container. Not specifying a port here\nDOES NOT prevent that port from being exposed. Any port which is\nlistening on the default \"0.0.0.0\" address inside a container will be\naccessible from the network.\nModifying this array with strategic merge patch may corrupt the data.\nFor more information See https://github.com/kubernetes/kubernetes/issues/108255.\nCannot be updated.\n+optional\n+patchMergeKey=containerPort\n+patchStrategy=merge\n+listType=map\n+listMapKey=containerPort\n+listMapKey=protocol",
          "items": {
            "$ref": "#/definitions/v1.ContainerPort"
          },
          "type": "array"
        },
        "readinessProbe": {
          "$ref": "#/definitions/v1.Probe"
        },
        "resources": {
          "$ref": "#/definitions/v1.ResourceRequirements"
        },
        "securityContext": {
          "$ref": "#/definitions/v1.SecurityContext"
        },
        "startupProbe": {
          "$ref": "#/definitions/v1.Probe"
        },
        "stdin": {
          "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this\nis not set, reads from stdin in the container will always result in EOF.\nDefault is false.\n+optional",
          "type": "boolean"
        },
        "stdinOnce": {
          "description": "Whether the container runtime should close the stdin channel after it has been opened by\na single attach. When stdin is true the stdin stream will remain open across multiple attach\nsessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the\nfirst client attaches to stdin, and then remains open and accepts data until the client disconnects,\nat which time stdin is closed and remains closed until the container is restarted. If this\nflag is false, a container processes that reads from stdin will never receive an EOF.\nDefault is false\n+optional",
          "type": "boolean"
        },
        "terminationMessagePath": {
          "description": "Optional: Path at which the file to which the container's termination message\nwill be written is mounted into the container's filesystem.\nMessage written is intended to be brief final status, such as an assertion failure message.\nWill be truncated by the node if greater than 4096 bytes. The total message length across\nall containers will be limited to 12kb.\nDefaults to /dev/termination-log.\nCannot be updated.\n+optional",
          "type": "string"
        },
        "terminationMessagePolicy": {
          "description": "Indicate how the termination message should be populated. File will use the contents of\nterminationMessagePath to populate the container status message on both success and failure.\nFallbackToLogsOnError will use the last chunk of container log output if the termination\nmessage file is empty and the container exited with an error.\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller.\nDefaults to File.\nCannot be updated.\n+optional",
          "type": "string"
        },
        "tty": {
          "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.\nDefault is false.\n+optional",
          "type": "boolean"
        },
        "volumeDevices": {
          "description": "volumeDevices is the list of block devices to be used by the container.\n+patchMergeKey=devicePath\n+patchStrategy=merge\n+optional",
          "items": {
            "$ref": "#/definitions/v1.VolumeDevice"
          },
          "type": "array"
        },
        "volumeMounts": {
          "description": "Pod volumes to mount into the container's filesystem.\nCannot be updated.\n+optional\n+patchMergeKey=mountPath\n+patchStrategy=merge",
          "items": {
            "$ref": "#/definitions/v1.VolumeMount"
          },
          "type": "array"
        },
        "workingDir": {
          "description": "Container's working directory.\nIf not specified, the container runtime's default will be used, which\nmight be configured in the container image.\nCannot be updated.\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.ContainerPort": {
      "properties": {
        "containerPort": {
          "description": "Number of port to expose on the pod's IP address.\nThis must be a valid port number, 0 \u003c x \u003c 65536.",
          "type": "integer"
        },
        "hostIP": {
          "description": "What host IP to bind the external port to.\n+optional",
          "type": "string"
        },
        "hostPort": {
          "description": "Number of port to expose on the host.\nIf specified, this must be a valid port number, 0 \u003c x \u003c 65536.\nIf HostNetwork is specified, this must match ContainerPort.\nMost containers do not need this.\n+optional",
          "type": "integer"
        },
        "name": {
          "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each\nnamed port in a pod must have a unique name. Name for the port that can be\nreferred to by services.\n+optional",
          "type": "string"
        },
        "protocol": {
          "description": "Protocol for port. Must be UDP, TCP, or SCTP.\nDefaults to \"TCP\".\n+optional\n+default=\"TCP\"",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.DownwardAPIProjection": {
      "properties": {
        "items": {
          "description": "Items is a list of DownwardAPIVolume file\n+optional",
          "items": {
            "$ref": "#/definitions/v1.DownwardAPIVolumeFile"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1.DownwardAPIVolumeFile": {
      "properties": {
        "fieldRef": {
          "$ref": "#/definitions/v1.ObjectFieldSelector"
        },
        "mode": {
          "description": "Optional: mode bits used to set permissions on this file, must be an octal value\nbetween 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
          "type": "integer"
        },
        "path": {
          "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
          "type": "string"
        },
        "resourceFieldRef": {
          "$ref": "#/definitions/v1.ResourceFieldSelector"
        }
      },
      "type": "object"
    },
    "v1.DownwardAPIVolumeSource": {
      "properties": {
        "defaultMode": {
          "description": "Optional: mode bits to use on created files by default. Must be a\nOptional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDefaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
          "type": "integer"
        },
        "items": {
          "description": "Items is a list of downward API volume file\n+optional",
          "items": {
            "$ref": "#/definitions/v1.DownwardAPIVolumeFile"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1.EmptyDirVolumeSource": {
      "properties": {
        "medium": {
          "description": "medium represents what type of storage medium should back this directory.\nThe default is \"\" which means to use the node's default medium.\nMust be an empty string (default) or Memory.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\n+optional",
          "type": "string"
        },
        "sizeLimit": {
          "$ref": "#/definitions/resource.Quantity"
        }
      },
      "type": "object"
    },
    "v1.EnvFromSource": {
      "properties": {
        "configMapRef": {
          "$ref": "#/definitions/v1.ConfigMapEnvSource"
        },
        "prefix": {
          "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.\n+optional",
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/definitions/v1.SecretEnvSource"
        }
      },
      "type": "object"
    },
    "v1.EnvVar": {
      "properties": {
        "name": {
          "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
          "type": "string"
        },
        "value": {
          "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".\n+optional",
          "type": "string"
        },
        "valueFrom": {
          "$ref": "#/definitions/v1.EnvVarSource"
        }
      },
      "type": "object"
    },
    "v1.EnvVarSource": {
      "properties": {
        "configMapKeyRef": {
          "$ref": "#/definitions/v1.ConfigMapKeySelector"
        },
        "fieldRef": {
          "$ref": "#/definitions/v1.ObjectFieldSelector"
        },
        "resourceFieldRef": {
          "$ref": "#/definitions/v1.ResourceFieldSelector"
        },
        "secretKeyRef": {
          "$ref": "#/definitions/v1.SecretKeySelector"
        }
      },
      "type": "object"
    },
    "v1.EphemeralContainer": {
      "properties": {
        "args": {
          "description": "Arguments to the entrypoint.\nThe image's CMD is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "command": {
          "description": "Entrypoint array. Not executed within a shell.\nThe image's ENTRYPOINT is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "description": "List of environment variables to set in the container.\nCannot be updated.\n+optional\n+patchMergeKey=name\n+patchStrategy=merge",
          "items": {
            "$ref": "#/definitions/v1.EnvVar"
          },
          "type": "array"
        },
        "envFrom": {
          "description": "List of sources to populate environment variables in the container.\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\nwill be reported as an event when the container is starting. When a key exists in multiple\nsources, the value associated with the last source will take precedence.\nValues defined by an Env with a duplicate key will take precedence.\nCannot be updated.\n+optional",
          "items": {
            "$ref": "#/definitions/v1.EnvFromSource"
          },
          "type": "array"
        },
        "image": {
          "description": "Container image name.\nMore info: https://kubernetes.io/docs/concepts/containers/images",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy.\nOne of Always, Never, IfNotPresent.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n+optional",
          "type": "string"
        },
        "lifecycle": {
          "$ref": "#/definitions/v1.Lifecycle"
        },
        "livenessProbe": {
          "$ref": "#/definitions/v1.Probe"
        },
        "name": {
          "description": "Name of the ephemeral container specified as a DNS_LABEL.\nThis name must be unique among all containers, init containers and ephemeral containers.",
          "type": "string"
        },
        "ports": {
          "description": "Ports are not allowed for ephemeral containers.\n+optional\n+patchMergeKey=containerPort\n+patchStrategy=merge\n+listType=map\n+listMapKey=containerPort\n+listMapKey=protocol",
          "items": {
            "$ref": "#/definitions/v1.ContainerPort"
          },
          "type": "array"
        },
        "readinessProbe": {
          "$ref": "#/definitions/v1.Probe"
        },
        "resources": {
          "$ref": "#/definitions/v1.ResourceRequirements"
        },
        "securityContext": {
          "$ref": "#/definitions/v1.SecurityContext"
        },
        "startupProbe": {
          "$ref": "#/definitions/v1.Probe"
        },
        "stdin": {
          "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this\nis not set, reads from stdin in the container will always result in EOF.\nDefault is false.\n+optional",
          "type": "boolean"
        },
        "stdinOnce": {
          "description": "Whether the container runtime should close the stdin channel after it has been opened by\na single attach. When stdin is true the stdin stream will remain open across multiple attach\nsessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the\nfirst client attaches to stdin, and then remains open and accepts data until the client disconnects,\nat which time stdin is closed and remains closed until the container is restarted. If this\nflag is false, a container processes that reads from stdin will never receive an EOF.\nDefault is false\n+optional",
          "type": "boolean"
        },
        "targetContainerName": {
          "description": "If set, the name of the container from PodSpec that this ephemeral container targets.\nThe ephemeral container will be run in the namespaces (IPC, PID, etc) of this container.\nIf not set then the ephemeral container uses the namespaces configured in the Pod spec.\n\nThe container runtime must implement support for this feature. If the runtime does not\nsupport namespace targeting then the result of setting this field is undefined.\n+optional",
          "type": "string"
        },
        "terminationMessagePath": {
          "description": "Optional: Path at which the file to which the container's termination message\nwill be written is mounted into the container's filesystem.\nMessage written is intended to be brief final status, such as an assertion failure message.\nWill be truncated by the node if greater than 4096 bytes. The total message length across\nall containers will be limited to 12kb.\nDefaults to /dev/termination-log.\nCannot be updated.\n+optional",
          "type": "string"
        },
        "terminationMessagePolicy": {
          "description": "Indicate how the termination message should be populated. File will use the contents of\nterminationMessagePath to populate the container status message on both success and failure.\nFallbackToLogsOnError will use the last chunk of container log output if the termination\nmessage file is empty and the container exited with an error.\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller.\nDefaults to File.\nCannot be updated.\n+optional",
          "type": "string"
        },
        "tty": {
          "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.\nDefault is false.\n+optional",
          "type": "boolean"
        },
        "volumeDevices": {
          "description": "volumeDevices is the list of block devices to be used by the container.\n+patchMergeKey=devicePath\n+patchStrategy=merge\n+optional",
          "items": {
            "$ref": "#/definitions/v1.VolumeDevice"
          },
          "type": "array"
        },
        "volumeMounts": {
          "description": "Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers.\nCannot be updated.\n+optional\n+patchMergeKey=mountPath\n+patchStrategy=merge",
          "items": {
            "$ref": "#/definitions/v1.VolumeMount"
          },
          "type": "array"
        },
        "workingDir": {
          "description": "Container's working directory.\nIf not specified, the container runtime's default will be used, which\nmight be configured in the container image.\nCannot be updated.\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.EphemeralVolumeSource": {
      "properties": {
        "volumeClaimTemplate": {
          "$ref": "#/definitions/v1.PersistentVolumeClaimTemplate"
        }
      },
      "type": "object"
    },
    "v1.ExecAction": {
      "properties": {
        "command": {
          "description": "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.\n+optional",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1.FCVolumeSource": {
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional",
          "type": "string"
        },
        "lun": {
          "description": "lun is Optional: FC target lun number\n+optional",
          "type": "integer"
        },
        "readOnly": {
          "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
          "type": "boolean"
        },
        "targetWWNs": {
          "description": "targetWWNs is Optional: FC target worldwide names (WWNs)\n+optional",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "wwids": {
          "description": "wwids Optional: FC volume world wide identifiers (wwids)\nEither wwids or combination of targetWWNs and lun must be set, but not both simultaneously.\n+optional",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1.FieldsV1": {
      "type": "object"
    },
    "v1.FlexVolumeSource": {
      "properties": {
        "driver": {
          "description": "driver is the name of the driver to use for this volume.",
          "type": "string"
        },
        "fsType": {
          "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.\n+optional",
          "type": "string"
        },
        "options": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "options is Optional: this field holds extra command options if any.\n+optional",
          "type": "object"
        },
        "readOnly": {
          "description": "readOnly is Optional: defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/v1.LocalObjectReference"
        }
      },
      "type": "object"
    },
    "v1.FlockerVolumeSource": {
      "properties": {
        "datasetName": {
          "description": "datasetName is Name of the dataset stored as metadata -\u003e name on the dataset for Flocker\nshould be considered as deprecated\n+optional",
          "type": "string"
        },
        "datasetUUID": {
          "description": "datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.GCEPersistentDiskVolumeSource": {
      "properties": {
        "fsType": {
          "description": "fsType is filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional",
          "type": "string"
        },
        "partition": {
          "description": "partition is the partition in the volume that you want to mount.\nIf omitted, the default is to mount by volume name.\nExamples: For volume /dev/sda1, you specify the partition as \"1\".\nSimilarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n+optional",
          "type": "integer"
        },
        "pdName": {
          "description": "pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n+optional",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1.GRPCAction": {
      "properties": {
        "port": {
          "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
          "type": "integer"
        },
        "service": {
          "description": "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.\n+optional\n+default=\"\"",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.GitRepoVolumeSource": {
      "properties": {
        "directory": {
          "description": "directory is the target directory name.\nMust not contain or start with '..'.  If '.' is supplied, the volume directory will be the\ngit repository.  Otherwise, if specified, the volume will contain the git repository in\nthe subdirectory with the given name.\n+optional",
          "type": "string"
        },
        "repository": {
          "description": "repository is the URL",
          "type": "string"
        },
        "revision": {
          "description": "revision is the commit hash for the specified revision.\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.GlusterfsVolumeSource": {
      "properties": {
        "endpoints": {
          "description": "endpoints is the endpoint name that details Glusterfs topology.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "path": {
          "description": "path is the Glusterfs volume path.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the Glusterfs volume to be mounted with read-only permissions.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod\n+optional",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1.HTTPGetAction": {
      "properties": {
        "host": {
          "description": "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.\n+optional",
          "type": "string"
        },
        "httpHeaders": {
          "description": "Custom headers to set in the request. HTTP allows repeated headers.\n+optional",
          "items": {
            "$ref": "#/definitions/v1.HTTPHeader"
          },
          "type": "array"
        },
        "path": {
          "description": "Path to access on the HTTP server.\n+optional",
          "type": "string"
        },
        "port": {
          "$ref": "#/definitions/intstr.IntOrString"
        },
        "scheme": {
          "description": "Scheme to use for connecting to the host.\nDefaults to HTTP.\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.HTTPHeader": {
      "properties": {
        "name": {
          "description": "The header field name",
          "type": "string"
        },
        "value": {
          "description": "The header field value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.HostAlias": {
      "properties": {
        "hostnames": {
          "description": "Hostnames for the above IP address.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ip": {
          "description": "IP address of the host file entry.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.HostPathVolumeSource": {
      "properties": {
        "path": {
          "description": "path of the directory on the host.\nIf the path is a symlink, it will follow the link to the real path.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
          "type": "string"
        },
        "type": {
          "description": "type for HostPath Volume\nDefaults to \"\"\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.ISCSIVolumeSource": {
      "properties": {
        "chapAuthDiscovery": {
          "description": "chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication\n+optional",
          "type": "boolean"
        },
        "chapAuthSession": {
          "description": "chapAuthSession defines whether support iSCSI Session CHAP authentication\n+optional",
          "type": "boolean"
        },
        "fsType": {
          "description": "fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional",
          "type": "string"
        },
        "initiatorName": {
          "description": "initiatorName is the custom iSCSI Initiator Name.\nIf initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface\n\u003ctarget portal\u003e:\u003cvolume name\u003e will be created for the connection.\n+optional",
          "type": "string"
        },
        "iqn": {
          "description": "iqn is the target iSCSI Qualified Name.",
          "type": "string"
        },
        "iscsiInterface": {
          "description": "iscsiInterface is the interface Name that uses an iSCSI transport.\nDefaults to 'default' (tcp).\n+optional",
          "type": "string"
        },
        "lun": {
          "description": "lun represents iSCSI Target Lun number.",
          "type": "integer"
        },
        "portals": {
          "description": "portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260).\n+optional",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "readOnly": {
          "description": "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\n+optional",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/v1.LocalObjectReference"
        },
        "targetPortal": {
          "description": "targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260).",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.KeyToPath": {
      "properties": {
        "key": {
          "description": "key is the key to project.",
          "type": "string"
        },
        "mode": {
          "description": "mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
          "type": "integer"
        },
        "path": {
          "description": "path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.LabelSelector": {
      "properties": {
        "matchExpressions": {
          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.\n+optional",
          "items": {
            "$ref": "#/definitions/v1.LabelSelectorRequirement"
          },
          "type": "array"
        },
        "matchLabels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n+optional",
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1.LabelSelectorRequirement": {
      "properties": {
        "key": {
          "description": "key is the label key that the selector applies to.\n+patchMergeKey=key\n+patchStrategy=merge",
          "type": "string"
        },
        "operator": {
          "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
          "type": "string"
        },
        "values": {
          "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.\n+optional",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1.Lifecycle": {
      "properties": {
        "postStart": {
          "$ref": "#/definitions/v1.LifecycleHandler"
        },
        "preStop": {
          "$ref": "#/definitions/v1.LifecycleHandler"
        }
      },
      "type": "object"
    },
    "v1.LifecycleHandler": {
      "properties": {
        "exec": {
          "$ref": "#/definitions/v1.ExecAction"
        },
        "httpGet": {
          "$ref": "#/definitions/v1.HTTPGetAction"
        },
        "tcpSocket": {
          "$ref": "#/definitions/v1.TCPSocketAction"
        }
      },
      "type": "object"
    },
    "v1.LocalObjectReference": {
      "properties": {
        "name": {
          "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.ManagedFieldsEntry": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the version of this resource that this field set\napplies to. The format is \"group/version\" just like the top-level\nAPIVersion field. It is necessary to track the version of a field\nset because it cannot be automatically converted.",
          "type": "string"
        },
        "fieldsType": {
          "description": "FieldsType is the discriminator for the different fields format and version.\nThere is currently only one possible value: \"FieldsV1\"",
          "type": "string"
        },
        "fieldsV1": {
          "$ref": "#/definitions/v1.FieldsV1"
        },
        "manager": {
          "description": "Manager is an identifier of the workflow managing these fields.",
          "type": "string"
        },
        "operation": {
          "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created.\nThe only valid values for this field are 'Apply' and 'Update'.",
          "type": "string"
        },
        "subresource": {
          "description": "Subresource is the name of the subresource used to update that object, or\nempty string if the object was updated through the main resource. The\nvalue of this field is used to distinguish between managers, even if they\nshare the same name. For example, a status update will be distinct from a\nregular update using the same manager name.\nNote that the APIVersion field is not related to the Subresource field and\nit always corresponds to the version of the main resource.",
          "type": "string"
        },
        "time": {
          "description": "Time is the timestamp of when the ManagedFields entry was added. The\ntimestamp will also be updated if a field is added, the manager\nchanges any of the owned fields value or removes a field. The\ntimestamp does not update when a field is removed from the entry\nbecause another manager took it over.\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.NFSVolumeSource": {
      "properties": {
        "path": {
          "description": "path that is exported by the NFS server.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the NFS export to be mounted with read-only permissions.\nDefaults to false.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n+optional",
          "type": "boolean"
        },
        "server": {
          "description": "server is the hostname or IP address of the NFS server.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.NodeAffinity": {
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node matches the corresponding matchExpressions; the\nnode(s) with the highest sum are the most preferred.\n+optional",
          "items": {
            "$ref": "#/definitions/v1.PreferredSchedulingTerm"
          },
          "type": "array"
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "$ref": "#/definitions/v1.NodeSelector"
        }
      },
      "type": "object"
    },
    "v1.NodeSelector": {
      "properties": {
        "nodeSelectorTerms": {
          "description": "Required. A list of node selector terms. The terms are ORed.",
          "items": {
            "$ref": "#/definitions/v1.NodeSelectorTerm"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1.NodeSelectorRequirement": {
      "properties": {
        "key": {
          "description": "The label key that the selector applies to.",
          "type": "string"
        },
        "operator": {
          "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
          "type": "string"
        },
        "values": {
          "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.\n+optional",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1.NodeSelectorTerm": {
      "properties": {
        "matchExpressions": {
          "description": "A list of node selector requirements by node's labels.\n+optional",
          "items": {
            "$ref": "#/definitions/v1.NodeSelectorRequirement"
          },
          "type": "array"
        },
        "matchFields": {
          "description": "A list of node selector requirements by node's fields.\n+optional",
          "items": {
            "$ref": "#/definitions/v1.NodeSelectorRequirement"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1.ObjectFieldSelector": {
      "properties": {
        "apiVersion": {
          "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".\n+optional",
          "type": "string"
        },
        "fieldPath": {
          "description": "Path of the field to select in the specified API version.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.OwnerReference": {
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "blockOwnerDeletion": {
          "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then\nthe owner cannot be deleted from the key-value store until this\nreference is removed.\nSee https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion\nfor how the garbage collector interacts with this field and enforces the foreground deletion.\nDefaults to false.\nTo set this field, a user needs \"delete\" permission of the owner,\notherwise 422 (Unprocessable Entity) will be returned.\n+optional",
          "type": "boolean"
        },
        "controller": {
          "description": "If true, this reference points to the managing controller.\n+optional",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.PersistentVolumeClaimSpec": {
      "properties": {
        "accessModes": {
          "description": "accessModes contains the desired access modes the volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\n+optional",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "dataSource": {
          "$ref": "#/definitions/v1.TypedLocalObjectReference"
        },
        "dataSourceRef": {
          "$ref": "#/definitions/v1.TypedLocalObjectReference"
        },
        "resources": {
          "$ref": "#/definitions/v1.ResourceRequirements"
        },
        "selector": {
          "$ref": "#/definitions/v1.LabelSelector"
        },
        "storageClassName": {
          "description": "storageClassName is the name of the StorageClass required by the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1\n+optional",
          "type": "string"
        },
        "volumeMode": {
          "description": "volumeMode defines what type of volume is required by the claim.\nValue of Filesystem is implied when not included in claim spec.\n+optional",
          "type": "string"
        },
        "volumeName": {
          "description": "volumeName is the binding reference to the PersistentVolume backing this claim.\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.PersistentVolumeClaimTemplate": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations\n+optional",
          "type": "object"
        },
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was\ncreated. It is not guaranteed to be set in happens-before order across separate operations.\nClients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system.\nRead-only.\nNull for lists.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
          "type": "string"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before\nit will be removed from the system. Only set when deletionTimestamp is also set.\nMay only be shortened.\nRead-only.\n+optional",
          "type": "integer"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\nfield is set by the server when a graceful deletion is requested by the user, and is not\ndirectly settable by a client. The resource is expected to be deleted (no longer visible\nfrom resource lists, and not reachable by name) after the time in this field, once the\nfinalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\nOnce the deletionTimestamp is set, this value may not be unset or be set further into the\nfuture, although it may be shortened or the resource may be deleted prior to this time.\nFor example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\nby sending a graceful termination signal to the containers in the pod. After that 30 seconds,\nthe Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\nremove the pod from the API. In the presence of network partitions, this object may still\nexist after this timestamp, until an administrator or automated process can determine the\nresource is fully terminated.\nIf not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
          "type": "string"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry\nis an identifier for the responsible component that will remove the entry\nfrom the list. If the deletionTimestamp of the object is non-nil, entries\nin this list can only be removed.\nFinalizers may be processed and removed in any order.  Order is NOT enforced\nbecause it introduces significant risk of stuck finalizers.\nfinalizers is a shared field, any actor with permission can reorder it.\nIf the finalizer list is processed in order, then this can lead to a situation\nin which the component responsible for the first finalizer in the list is\nwaiting for a signal (field value, external system, or other) produced by a\ncomponent responsible for a finalizer later in the list, resulting in a deadlock.\nWithout enforced ordering finalizers are free to order amongst themselves and\nare not vulnerable to ordering changes in the list.\n+optional\n+patchStrategy=merge",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique\nname ONLY IF the Name field has not been provided.\nIf this field is used, the name returned to the client will be different\nthan the name passed. This value will also be combined with a unique suffix.\nThe provided value has the same validation rules as the Name field,\nand may be truncated by the length of the suffix required to make the value\nunique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n+optional",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state.\nPopulated by the system. Read-only.\n+optional",
          "type": "integer"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels\n+optional",
          "type": "object"
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields\nthat are managed by that workflow. This is mostly for internal\nhousekeeping, and users typically shouldn't need to set or\nunderstand this field. A workflow can be the user's name, a\ncontroller's name, or the name of a specific apply path like\n\"ci-cd\". The set of fields is always in the version that the\nworkflow used when modifying the object.\n\n+optional",
          "items": {
            "$ref": "#/definitions/v1.ManagedFieldsEntry"
          },
          "type": "array"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names\n+optional",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is\nequivalent to the \"default\" namespace, but \"default\" is the canonical representation.\nNot all objects are required to be scoped to a namespace - the value of this field for\nthose objects will be empty.\n\nMust be a DNS_LABEL.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/namespaces\n+optional",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have\nbeen deleted, this object will be garbage collected. If this object is managed by a controller,\nthen an entry in this list will point to this controller, with the controller field set to true.\nThere cannot be more than one managing controller.\n+optional\n+patchMergeKey=uid\n+patchStrategy=merge",
          "items": {
            "$ref": "#/definitions/v1.OwnerReference"
          },
          "type": "array"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can\nbe used by clients to determine when objects have changed. May be used for optimistic\nconcurrency, change detection, and the watch operation on a resource or set of resources.\nClients must treat these values as opaque and passed unmodified back to the server.\nThey may only be valid for a particular resource or set of resources.\n\nPopulated by the system.\nRead-only.\nValue must be treated as opaque by clients and .\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional",
          "type": "string"
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.\n+optional",
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/v1.PersistentVolumeClaimSpec"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by\nthe server on successful creation of a resource and is not allowed to change on PUT\noperations.\n\nPopulated by the system.\nRead-only.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#uids\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.PersistentVolumeClaimVolumeSource": {
      "properties": {
        "claimName": {
          "description": "claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly Will force the ReadOnly setting in VolumeMounts.\nDefault false.\n+optional",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1.PhotonPersistentDiskVolumeSource": {
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "pdID": {
          "description": "pdID is the ID that identifies Photon Controller persistent disk",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.PodAffinity": {
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.\n+optional",
          "items": {
            "$ref": "#/definitions/v1.WeightedPodAffinityTerm"
          },
          "type": "array"
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\n+optional",
          "items": {
            "$ref": "#/definitions/v1.PodAffinityTerm"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1.PodAffinityTerm": {
      "properties": {
        "labelSelector": {
          "$ref": "#/definitions/v1.LabelSelector"
        },
        "namespaceSelector": {
          "$ref": "#/definitions/v1.LabelSelector"
        },
        "namespaces": {
          "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".\n+optional",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "topologyKey": {
          "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.PodAntiAffinity": {
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe anti-affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.\n+optional",
          "items": {
            "$ref": "#/definitions/v1.WeightedPodAffinityTerm"
          },
          "type": "array"
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the anti-affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the anti-affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\n+optional",
          "items": {
            "$ref": "#/definitions/v1.PodAffinityTerm"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1.PodDNSConfig": {
      "properties": {
        "nameservers": {
          "description": "A list of DNS name server IP addresses.\nThis will be appended to the base nameservers generated from DNSPolicy.\nDuplicated nameservers will be removed.\n+optional",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "options": {
          "description": "A list of DNS resolver options.\nThis will be merged with the base options generated from DNSPolicy.\nDuplicated entries will be removed. Resolution options given in Options\nwill override those that appear in the base DNSPolicy.\n+optional",
          "items": {
            "$ref": "#/definitions/v1.PodDNSConfigOption"
          },
          "type": "array"
        },
        "searches": {
          "description": "A list of DNS search domains for host-name lookup.\nThis will be appended to the base search paths generated from DNSPolicy.\nDuplicated search paths will be removed.\n+optional",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1.PodDNSConfigOption": {
      "properties": {
        "name": {
          "description": "Required.",
          "type": "string"
        },
        "value": {
          "description": "+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.PodOS": {
      "properties": {
        "name": {
          "description": "Name is the name of the operating system. The currently supported values are linux and windows.\nAdditional value may be defined in future and can be one of:\nhttps://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration\nClients should expect to handle additional values and treat unrecognized values in this field as os: null",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.PodReadinessGate": {
      "properties": {
        "conditionType": {
          "description": "ConditionType refers to a condition in the pod's condition list with matching type.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.PodSecurityContext": {
      "properties": {
        "fsGroup": {
          "description": "A special supplemental group that applies to all containers in a pod.\nSome volume types allow the Kubelet to change the ownership of that volume\nto be owned by the pod:\n\n1. The owning GID will be the FSGroup\n2. The setgid bit is set (new files created in the volume will be owned by FSGroup)\n3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
          "type": "integer"
        },
        "fsGroupChangePolicy": {
          "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume\nbefore being exposed inside Pod. This field will only apply to\nvolume types which support fsGroup based ownership(and permissions).\nIt will have no effect on ephemeral volume types such as: secret, configmaps\nand emptydir.\nValid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
          "type": "string"
        },
        "runAsGroup": {
          "description": "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence\nfor that container.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
          "type": "integer"
        },
        "runAsNonRoot": {
          "description": "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional",
          "type": "boolean"
        },
        "runAsUser": {
          "description": "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence\nfor that container.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
          "type": "integer"
        },
        "seLinuxOptions": {
          "$ref": "#/definitions/v1.SELinuxOptions"
        },
        "seccompProfile": {
          "$ref": "#/definitions/v1.SeccompProfile"
        },
        "supplementalGroups": {
          "description": "A list of groups applied to the first process run in each container, in addition\nto the container's primary GID.  If unspecified, no groups will be added to\nany container.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "sysctls": {
          "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported\nsysctls (by the container runtime) might fail to launch.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
          "items": {
            "$ref": "#/definitions/v1.Sysctl"
          },
          "type": "array"
        },
        "windowsOptions": {
          "$ref": "#/definitions/v1.WindowsSecurityContextOptions"
        }
      },
      "type": "object"
    },
    "v1.PodSpec": {
      "properties": {
        "activeDeadlineSeconds": {
          "description": "Optional duration in seconds the pod may be active on the node relative to\nStartTime before the system will actively try to mark it failed and kill associated containers.\nValue must be a positive integer.\n+optional",
          "type": "integer"
        },
        "affinity": {
          "$ref": "#/definitions/v1.Affinity"
        },
        "automountServiceAccountToken": {
          "description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n+optional",
          "type": "boolean"
        },
        "containers": {
          "description": "List of containers belonging to the pod.\nContainers cannot currently be added or removed.\nThere must be at least one container in a Pod.\nCannot be updated.\n+patchMergeKey=name\n+patchStrategy=merge",
          "items": {
            "$ref": "#/definitions/v1.Container"
          },
          "type": "array"
        },
        "dnsConfig": {
          "$ref": "#/definitions/v1.PodDNSConfig"
        },
        "dnsPolicy": {
          "description": "Set DNS policy for the pod.\nDefaults to \"ClusterFirst\".\nValid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.\nDNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.\nTo have DNS options set along with hostNetwork, you have to specify DNS policy\nexplicitly to 'ClusterFirstWithHostNet'.\n+optional",
          "type": "string"
        },
        "enableServiceLinks": {
          "description": "EnableServiceLinks indicates whether information about services should be injected into pod's\nenvironment variables, matching the syntax of Docker links.\nOptional: Defaults to true.\n+optional",
          "type": "boolean"
        },
        "ephemeralContainers": {
          "description": "List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing\npod to perform user-initiated actions such as debugging. This list cannot be specified when\ncreating a pod, and it cannot be modified by updating the pod spec. In order to add an\nephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.\n+optional\n+patchMergeKey=name\n+patchStrategy=merge",
          "items": {
            "$ref": "#/definitions/v1.EphemeralContainer"
          },
          "type": "array"
        },
        "hostAliases": {
          "description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts\nfile if specified. This is only valid for non-hostNetwork pods.\n+optional\n+patchMergeKey=ip\n+patchStrategy=merge",
          "items": {
            "$ref": "#/definitions/v1.HostAlias"
          },
          "type": "array"
        },
        "hostIPC": {
          "description": "Use the host's ipc namespace.\nOptional: Default to false.\n+k8s:conversion-gen=false\n+optional",
          "type": "boolean"
        },
        "hostNetwork": {
          "description": "Host networking requested for this pod. Use the host's network namespace.\nIf this option is set, the ports that will be used must be specified.\nDefault to false.\n+k8s:conversion-gen=false\n+optional",
          "type": "boolean"
        },
        "hostPID": {
          "description": "Use the host's pid namespace.\nOptional: Default to false.\n+k8s:conversion-gen=false\n+optional",
          "type": "boolean"
        },
        "hostUsers": {
          "description": "Use the host's user namespace.\nOptional: Default to true.\nIf set to true or not present, the pod will be run in the host user namespace, useful\nfor when the pod needs a feature only available to the host user namespace, such as\nloading a kernel module with CAP_SYS_MODULE.\nWhen set to false, a new userns is created for the pod. Setting false is useful for\nmitigating container breakout vulnerabilities even allowing users to run their\ncontainers as root without actually having root privileges on the host.\nThis field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.\n+k8s:conversion-gen=false\n+optional",
          "type": "boolean"
        },
        "hostname": {
          "description": "Specifies the hostname of the Pod\nIf not specified, the pod's hostname will be set to a system-defined value.\n+optional",
          "type": "string"
        },
        "imagePullSecrets": {
          "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.\nIf specified, these secrets will be passed to individual puller implementations for them to use.\nMore info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\n+optional\n+patchMergeKey=name\n+patchStrategy=merge",
          "items": {
            "$ref": "#/definitions/v1.LocalObjectReference"
          },
          "type": "array"
        },
        "initContainers": {
          "description": "List of initialization containers belonging to the pod.\nInit containers are executed in order prior to containers being started. If any\ninit container fails, the pod is considered to have failed and is handled according\nto its restartPolicy. The name for an init container or normal container must be\nunique among all containers.\nInit containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes.\nThe resourceRequirements of an init container are taken into account during scheduling\nby finding the highest request/limit for each resource type, and then using the max of\nof that value or the sum of the normal containers. Limits are applied to init containers\nin a similar fashion.\nInit containers cannot currently be added or removed.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n+patchMergeKey=name\n+patchStrategy=merge",
          "items": {
            "$ref": "#/definitions/v1.Container"
          },
          "type": "array"
        },
        "nodeName": {
          "description": "NodeName is a request to schedule this pod onto a specific node. If it is non-empty,\nthe scheduler simply schedules this pod onto that node, assuming that it fits resource\nrequirements.\n+optional",
          "type": "string"
        },
        "nodeSelector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "NodeSelector is a selector which must be true for the pod to fit on a node.\nSelector which must match a node's labels for the pod to be scheduled on that node.\nMore info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n+optional\n+mapType=atomic",
          "type": "object"
        },
        "os": {
          "$ref": "#/definitions/v1.PodOS"
        },
        "overhead": {
          "$ref": "#/definitions/v1.ResourceList"
        },
        "preemptionPolicy": {
          "description": "PreemptionPolicy is the Policy for preempting pods with lower priority.\nOne of Never, PreemptLowerPriority.\nDefaults to PreemptLowerPriority if unset.\n+optional",
          "type": "string"
        },
        "priority": {
          "description": "The priority value. Various system components use this field to find the\npriority of the pod. When Priority Admission Controller is enabled, it\nprevents users from setting this field. The admission controller populates\nthis field from PriorityClassName.\nThe higher the value, the higher the priority.\n+optional",
          "type": "integer"
        },
        "priorityClassName": {
          "description": "If specified, indicates the pod's priority. \"system-node-critical\" and\n\"system-cluster-critical\" are two special keywords which indicate the\nhighest priorities with the former being the highest priority. Any other\nname must be defined by creating a PriorityClass object with that name.\nIf not specified, the pod priority will be default or zero if there is no\ndefault.\n+optional",
          "type": "string"
        },
        "readinessGates": {
          "description": "If specified, all readiness gates will be evaluated for pod readiness.\nA pod is ready when all its containers are ready AND\nall conditions specified in the readiness gates have status equal to \"True\"\nMore info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates\n+optional",
          "items": {
            "$ref": "#/definitions/v1.PodReadinessGate"
          },
          "type": "array"
        },
        "restartPolicy": {
          "description": "Restart policy for all containers within the pod.\nOne of Always, OnFailure, Never.\nDefault to Always.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n+optional",
          "type": "string"
        },
        "runtimeClassName": {
          "description": "RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used\nto run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run.\nIf unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an\nempty definition that uses the default runtime handler.\nMore info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class\n+optional",
          "type": "string"
        },
        "schedulerName": {
          "description": "If specified, the pod will be dispatched by specified scheduler.\nIf not specified, the pod will be dispatched by default scheduler.\n+optional",
          "type": "string"
        },
        "securityContext": {
          "$ref": "#/definitions/v1.PodSecurityContext"
        },
        "serviceAccount": {
          "description": "DeprecatedServiceAccount is a depreciated alias for ServiceAccountName.\nDeprecated: Use serviceAccountName instead.\n+k8s:conversion-gen=false\n+optional",
          "type": "string"
        },
        "serviceAccountName": {
          "description": "ServiceAccountName is the name of the ServiceAccount to use to run this pod.\nMore info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n+optional",
          "type": "string"
        },
        "setHostnameAsFQDN": {
          "description": "If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default).\nIn Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname).\nIn Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\Tcpip\\\\Parameters to FQDN.\nIf a pod does not have FQDN, this has no effect.\nDefault to false.\n+optional",
          "type": "boolean"
        },
        "shareProcessNamespace": {
          "description": "Share a single process namespace between all of the containers in a pod.\nWhen this is set containers will be able to view and signal processes from other containers\nin the same pod, and the first process in each container will not be assigned PID 1.\nHostPID and ShareProcessNamespace cannot both be set.\nOptional: Default to false.\n+k8s:conversion-gen=false\n+optional",
          "type": "boolean"
        },
        "subdomain": {
          "description": "If specified, the fully qualified Pod hostname will be \"\u003chostname\u003e.\u003csubdomain\u003e.\u003cpod namespace\u003e.svc.\u003ccluster domain\u003e\".\nIf not specified, the pod will not have a domainname at all.\n+optional",
          "type": "string"
        },
        "terminationGracePeriodSeconds": {
          "description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nIf this value is nil, the default grace period will be used instead.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nDefaults to 30 seconds.\n+optional",
          "type": "integer"
        },
        "tolerations": {
          "description": "If specified, the pod's tolerations.\n+optional",
          "items": {
            "$ref": "#/definitions/v1.Toleration"
          },
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "TopologySpreadConstraints describes how a group of pods ought to spread across topology\ndomains. Scheduler will schedule pods in a way which abides by the constraints.\nAll topologySpreadConstraints are ANDed.\n+optional\n+patchMergeKey=topologyKey\n+patchStrategy=merge\n+listType=map\n+listMapKey=topologyKey\n+listMapKey=whenUnsatisfiable",
          "items": {
            "$ref": "#/definitions/v1.TopologySpreadConstraint"
          },
          "type": "array"
        },
        "volumes": {
          "description": "List of volumes that can be mounted by containers belonging to the pod.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes\n+optional\n+patchMergeKey=name\n+patchStrategy=merge,retainKeys",
          "items": {
            "$ref": "#/definitions/v1.Volume"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1.PodTemplateSpec": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations\n+optional",
          "type": "object"
        },
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was\ncreated. It is not guaranteed to be set in happens-before order across separate operations.\nClients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system.\nRead-only.\nNull for lists.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
          "type": "string"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before\nit will be removed from the system. Only set when deletionTimestamp is also set.\nMay only be shortened.\nRead-only.\n+optional",
          "type": "integer"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\nfield is set by the server when a graceful deletion is requested by the user, and is not\ndirectly settable by a client. The resource is expected to be deleted (no longer visible\nfrom resource lists, and not reachable by name) after the time in this field, once the\nfinalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\nOnce the deletionTimestamp is set, this value may not be unset or be set further into the\nfuture, although it may be shortened or the resource may be deleted prior to this time.\nFor example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\nby sending a graceful termination signal to the containers in the pod. After that 30 seconds,\nthe Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\nremove the pod from the API. In the presence of network partitions, this object may still\nexist after this timestamp, until an administrator or automated process can determine the\nresource is fully terminated.\nIf not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
          "type": "string"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry\nis an identifier for the responsible component that will remove the entry\nfrom the list. If the deletionTimestamp of the object is non-nil, entries\nin this list can only be removed.\nFinalizers may be processed and removed in any order.  Order is NOT enforced\nbecause it introduces significant risk of stuck finalizers.\nfinalizers is a shared field, any actor with permission can reorder it.\nIf the finalizer list is processed in order, then this can lead to a situation\nin which the component responsible for the first finalizer in the list is\nwaiting for a signal (field value, external system, or other) produced by a\ncomponent responsible for a finalizer later in the list, resulting in a deadlock.\nWithout enforced ordering finalizers are free to order amongst themselves and\nare not vulnerable to ordering changes in the list.\n+optional\n+patchStrategy=merge",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique\nname ONLY IF the Name field has not been provided.\nIf this field is used, the name returned to the client will be different\nthan the name passed. This value will also be combined with a unique suffix.\nThe provided value has the same validation rules as the Name field,\nand may be truncated by the length of the suffix required to make the value\nunique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n+optional",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state.\nPopulated by the system. Read-only.\n+optional",
          "type": "integer"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels\n+optional",
          "type": "object"
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields\nthat are managed by that workflow. This is mostly for internal\nhousekeeping, and users typically shouldn't need to set or\nunderstand this field. A workflow can be the user's name, a\ncontroller's name, or the name of a specific apply path like\n\"ci-cd\". The set of fields is always in the version that the\nworkflow used when modifying the object.\n\n+optional",
          "items": {
            "$ref": "#/definitions/v1.ManagedFieldsEntry"
          },
          "type": "array"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names\n+optional",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is\nequivalent to the \"default\" namespace, but \"default\" is the canonical representation.\nNot all objects are required to be scoped to a namespace - the value of this field for\nthose objects will be empty.\n\nMust be a DNS_LABEL.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/namespaces\n+optional",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have\nbeen deleted, this object will be garbage collected. If this object is managed by a controller,\nthen an entry in this list will point to this controller, with the controller field set to true.\nThere cannot be more than one managing controller.\n+optional\n+patchMergeKey=uid\n+patchStrategy=merge",
          "items": {
            "$ref": "#/definitions/v1.OwnerReference"
          },
          "type": "array"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can\nbe used by clients to determine when objects have changed. May be used for optimistic\nconcurrency, change detection, and the watch operation on a resource or set of resources.\nClients must treat these values as opaque and passed unmodified back to the server.\nThey may only be valid for a particular resource or set of resources.\n\nPopulated by the system.\nRead-only.\nValue must be treated as opaque by clients and .\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional",
          "type": "string"
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.\n+optional",
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/v1.PodSpec"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by\nthe server on successful creation of a resource and is not allowed to change on PUT\noperations.\n\nPopulated by the system.\nRead-only.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#uids\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.PortworxVolumeSource": {
      "properties": {
        "fsType": {
          "description": "fSType represents the filesystem type to mount\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
          "type": "boolean"
        },
        "volumeID": {
          "description": "volumeID uniquely identifies a Portworx volume",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.PreferredSchedulingTerm": {
      "properties": {
        "preference": {
          "$ref": "#/definitions/v1.NodeSelectorTerm"
        },
        "weight": {
          "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1.Probe": {
      "properties": {
        "exec": {
          "$ref": "#/definitions/v1.ExecAction"
        },
        "failureThreshold": {
          "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.\n+optional",
          "type": "integer"
        },
        "grpc": {
          "$ref": "#/definitions/v1.GRPCAction"
        },
        "httpGet": {
          "$ref": "#/definitions/v1.HTTPGetAction"
        },
        "initialDelaySeconds": {
          "description": "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
          "type": "integer"
        },
        "periodSeconds": {
          "description": "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.\n+optional",
          "type": "integer"
        },
        "successThreshold": {
          "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.\n+optional",
          "type": "integer"
        },
        "tcpSocket": {
          "$ref": "#/definitions/v1.TCPSocketAction"
        },
        "terminationGracePeriodSeconds": {
          "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.\n+optional",
          "type": "integer"
        },
        "timeoutSeconds": {
          "description": "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1.ProjectedVolumeSource": {
      "properties": {
        "defaultMode": {
          "description": "defaultMode are the mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
          "type": "integer"
        },
        "sources": {
          "description": "sources is the list of volume projections\n+optional",
          "items": {
            "$ref": "#/definitions/v1.VolumeProjection"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1.QuobyteVolumeSource": {
      "properties": {
        "group": {
          "description": "group to map volume access to\nDefault is no group\n+optional",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the Quobyte volume to be mounted with read-only permissions.\nDefaults to false.\n+optional",
          "type": "boolean"
        },
        "registry": {
          "description": "registry represents a single or multiple Quobyte Registry services\nspecified as a string as host:port pair (multiple entries are separated with commas)\nwhich acts as the central registry for volumes",
          "type": "string"
        },
        "tenant": {
          "description": "tenant owning the given Quobyte volume in the Backend\nUsed with dynamically provisioned Quobyte volumes, value is set by the plugin\n+optional",
          "type": "string"
        },
        "user": {
          "description": "user to map volume access to\nDefaults to serivceaccount user\n+optional",
          "type": "string"
        },
        "volume": {
          "description": "volume is a string that references an already created Quobyte volume by name.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.RBDVolumeSource": {
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#rbd\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional",
          "type": "string"
        },
        "image": {
          "description": "image is the rados image name.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "keyring": {
          "description": "keyring is the path to key ring for RBDUser.\nDefault is /etc/ceph/keyring.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional",
          "type": "string"
        },
        "monitors": {
          "description": "monitors is a collection of Ceph monitors.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "pool": {
          "description": "pool is the rados pool name.\nDefault is rbd.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/v1.LocalObjectReference"
        },
        "user": {
          "description": "user is the rados user name.\nDefault is admin.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.ResourceFieldSelector": {
      "properties": {
        "containerName": {
          "description": "Container name: required for volumes, optional for env vars\n+optional",
          "type": "string"
        },
        "divisor": {
          "$ref": "#/definitions/resource.Quantity"
        },
        "resource": {
          "description": "Required: resource to select",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.ResourceList": {
      "additionalProperties": {
        "$ref": "#/definitions/resource.Quantity"
      },
      "type": "object"
    },
    "v1.ResourceRequirements": {
      "properties": {
        "limits": {
          "$ref": "#/definitions/v1.ResourceList"
        },
        "requests": {
          "$ref": "#/definitions/v1.ResourceList"
        }
      },
      "type": "object"
    },
    "v1.SELinuxOptions": {
      "properties": {
        "level": {
          "description": "Level is SELinux level label that applies to the container.\n+optional",
          "type": "string"
        },
        "role": {
          "description": "Role is a SELinux role label that applies to the container.\n+optional",
          "type": "string"
        },
        "type": {
          "description": "Type is a SELinux type label that applies to the container.\n+optional",
          "type": "string"
        },
        "user": {
          "description": "User is a SELinux user label that applies to the container.\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.ScaleIOVolumeSource": {
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\".\nDefault is \"xfs\".\n+optional",
          "type": "string"
        },
        "gateway": {
          "description": "gateway is the host address of the ScaleIO API Gateway.",
          "type": "string"
        },
        "protectionDomain": {
          "description": "protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.\n+optional",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/v1.LocalObjectReference"
        },
        "sslEnabled": {
          "description": "sslEnabled Flag enable/disable SSL communication with Gateway, default false\n+optional",
          "type": "boolean"
        },
        "storageMode": {
          "description": "storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.\nDefault is ThinProvisioned.\n+optional",
          "type": "string"
        },
        "storagePool": {
          "description": "storagePool is the ScaleIO Storage Pool associated with the protection domain.\n+optional",
          "type": "string"
        },
        "system": {
          "description": "system is the name of the storage system as configured in ScaleIO.",
          "type": "string"
        },
        "volumeName": {
          "description": "volumeName is the name of a volume already created in the ScaleIO system\nthat is associated with this volume source.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.SeccompProfile": {
      "properties": {
        "localhostProfile": {
          "description": "localhostProfile indicates a profile defined in a file on the node should be used.\nThe profile must be preconfigured on the node to work.\nMust be a descending path, relative to the kubelet's configured seccomp profile location.\nMust only be set if type is \"Localhost\".\n+optional",
          "type": "string"
        },
        "type": {
          "description": "type indicates which kind of seccomp profile will be applied.\nValid options are:\n\nLocalhost - a profile defined in a file on the node should be used.\nRuntimeDefault - the container runtime default profile should be used.\nUnconfined - no profile should be applied.\n+unionDiscriminator",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.SecretEnvSource": {
      "properties": {
        "name": {
          "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret must be defined\n+optional",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1.SecretKeySelector": {
      "properties": {
        "key": {
          "description": "The key of the secret to select from.  Must be a valid secret key.",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret or its key must be defined\n+optional",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1.SecretProjection": {
      "properties": {
        "items": {
          "description": "items if unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional",
          "items": {
            "$ref": "#/definitions/v1.KeyToPath"
          },
          "type": "array"
        },
        "name": {
          "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
          "type": "string"
        },
        "optional": {
          "description": "optional field specify whether the Secret or its key must be defined\n+optional",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1.SecretVolumeSource": {
      "properties": {
        "defaultMode": {
          "description": "defaultMode is Optional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values\nfor mode bits. Defaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
          "type": "integer"
        },
        "items": {
          "description": "items If unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional",
          "items": {
            "$ref": "#/definitions/v1.KeyToPath"
          },
          "type": "array"
        },
        "optional": {
          "description": "optional field specify whether the Secret or its keys must be defined\n+optional",
          "type": "boolean"
        },
        "secretName": {
          "description": "secretName is the name of the secret in the pod's namespace to use.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#secret\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.SecurityContext": {
      "properties": {
        "allowPrivilegeEscalation": {
          "description": "AllowPrivilegeEscalation controls whether a process can gain more\nprivileges than its parent process. This bool directly controls if\nthe no_new_privs flag will be set on the container process.\nAllowPrivilegeEscalation is true always when the container is:\n1) run as Privileged\n2) has CAP_SYS_ADMIN\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
          "type": "boolean"
        },
        "capabilities": {
          "$ref": "#/definitions/v1.Capabilities"
        },
        "privileged": {
          "description": "Run container in privileged mode.\nProcesses in privileged containers are essentially equivalent to root on the host.\nDefaults to false.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
          "type": "boolean"
        },
        "procMount": {
          "description": "procMount denotes the type of proc mount to use for the containers.\nThe default is DefaultProcMount which uses the container runtime defaults for\nreadonly paths and masked paths.\nThis requires the ProcMountType feature flag to be enabled.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
          "type": "string"
        },
        "readOnlyRootFilesystem": {
          "description": "Whether this container has a read-only root filesystem.\nDefault is false.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
          "type": "boolean"
        },
        "runAsGroup": {
          "description": "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
          "type": "integer"
        },
        "runAsNonRoot": {
          "description": "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional",
          "type": "boolean"
        },
        "runAsUser": {
          "description": "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
          "type": "integer"
        },
        "seLinuxOptions": {
          "$ref": "#/definitions/v1.SELinuxOptions"
        },
        "seccompProfile": {
          "$ref": "#/definitions/v1.SeccompProfile"
        },
        "windowsOptions": {
          "$ref": "#/definitions/v1.WindowsSecurityContextOptions"
        }
      },
      "type": "object"
    },
    "v1.ServiceAccountTokenProjection": {
      "properties": {
        "audience": {
          "description": "audience is the intended audience of the token. A recipient of a token\nmust identify itself with an identifier specified in the audience of the\ntoken, and otherwise should reject the token. The audience defaults to the\nidentifier of the apiserver.\n+optional",
          "type": "string"
        },
        "expirationSeconds": {
          "description": "expirationSeconds is the requested duration of validity of the service\naccount token. As the token approaches expiration, the kubelet volume\nplugin will proactively rotate the service account token. The kubelet will\nstart trying to rotate the token if the token is older than 80 percent of\nits time to live or if the token is older than 24 hours.Defaults to 1 hour\nand must be at least 10 minutes.\n+optional",
          "type": "integer"
        },
        "path": {
          "description": "path is the path relative to the mount point of the file to project the\ntoken into.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.StorageOSVolumeSource": {
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n+optional",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/v1.LocalObjectReference"
        },
        "volumeName": {
          "description": "volumeName is the human-readable name of the StorageOS volume.  Volume\nnames are only unique within a namespace.",
          "type": "string"
        },
        "volumeNamespace": {
          "description": "volumeNamespace specifies the scope of the volume within StorageOS.  If no\nnamespace is specified then the Pod's namespace will be used.  This allows the\nKubernetes name scoping to be mirrored within StorageOS for tighter integration.\nSet VolumeName to any name to override the default behaviour.\nSet to \"default\" if you are not using namespaces within StorageOS.\nNamespaces that do not pre-exist within StorageOS will be created.\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.Sysctl": {
      "properties": {
        "name": {
          "description": "Name of a property to set",
          "type": "string"
        },
        "value": {
          "description": "Value of a property to set",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.TCPSocketAction": {
      "properties": {
        "host": {
          "description": "Optional: Host name to connect to, defaults to the pod IP.\n+optional",
          "type": "string"
        },
        "port": {
          "$ref": "#/definitions/intstr.IntOrString"
        }
      },
      "type": "object"
    },
    "v1.Toleration": {
      "properties": {
        "effect": {
          "description": "Effect indicates the taint effect to match. Empty means match all taint effects.\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\n+optional",
          "type": "string"
        },
        "key": {
          "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys.\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.\n+optional",
          "type": "string"
        },
        "operator": {
          "description": "Operator represents a key's relationship to the value.\nValid operators are Exists and Equal. Defaults to Equal.\nExists is equivalent to wildcard for value, so that a pod can\ntolerate all taints of a particular category.\n+optional",
          "type": "string"
        },
        "tolerationSeconds": {
          "description": "TolerationSeconds represents the period of time the toleration (which must be\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\nit is not set, which means tolerate the taint forever (do not evict). Zero and\nnegative values will be treated as 0 (evict immediately) by the system.\n+optional",
          "type": "integer"
        },
        "value": {
          "description": "Value is the taint value the toleration matches to.\nIf the operator is Exists, the value should be empty, otherwise just a regular string.\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.TopologySpreadConstraint": {
      "properties": {
        "labelSelector": {
          "$ref": "#/definitions/v1.LabelSelector"
        },
        "matchLabelKeys": {
          "description": "MatchLabelKeys is a set of pod label keys to select the pods over which\nspreading will be calculated. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are ANDed with labelSelector\nto select the group of existing pods over which spreading will be calculated\nfor the incoming pod. Keys that don't exist in the incoming pod labels will\nbe ignored. A null or empty list means only match against labelSelector.\n+listType=atomic\n+optional",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "maxSkew": {
          "description": "MaxSkew describes the degree to which pods may be unevenly distributed.\nWhen `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference\nbetween the number of matching pods in the target topology and the global minimum.\nThe global minimum is the minimum number of matching pods in an eligible domain\nor zero if the number of eligible domains is less than MinDomains.\nFor example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same\nlabelSelector spread as 2/2/1:\nIn this case, the global minimum is 1.\n+-------+-------+-------+\n| zone1 | zone2 | zone3 |\n+-------+-------+-------+\n|  P P  |  P P  |   P   |\n+-------+-------+-------+\n- if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;\nscheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)\nviolate MaxSkew(1).\n- if MaxSkew is 2, incoming pod can be scheduled onto any zone.\nWhen `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence\nto topologies that satisfy it.\nIt's a required field. Default value is 1 and 0 is not allowed.",
          "type": "integer"
        },
        "minDomains": {
          "description": "MinDomains indicates a minimum number of eligible domains.\nWhen the number of eligible domains with matching topology keys is less than minDomains,\nPod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed.\nAnd when the number of eligible domains with matching topology keys equals or greater than minDomains,\nthis value has no effect on scheduling.\nAs a result, when the number of eligible domains is less than minDomains,\nscheduler won't schedule more than maxSkew Pods to those domains.\nIf value is nil, the constraint behaves as if MinDomains is equal to 1.\nValid values are integers greater than 0.\nWhen value is not nil, WhenUnsatisfiable must be DoNotSchedule.\n\nFor example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same\nlabelSelector spread as 2/2/2:\n+-------+-------+-------+\n| zone1 | zone2 | zone3 |\n+-------+-------+-------+\n|  P P  |  P P  |  P P  |\n+-------+-------+-------+\nThe number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0.\nIn this situation, new pod with the same labelSelector cannot be scheduled,\nbecause computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,\nit will violate MaxSkew.\n\nThis is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).\n+optional",
          "type": "integer"
        },
        "nodeAffinityPolicy": {
          "description": "NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector\nwhen calculating pod topology spread skew. Options are:\n- Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.\n- Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.\n\nIf this value is nil, the behavior is equivalent to the Honor policy.\nThis is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.\n+optional",
          "type": "string"
        },
        "nodeTaintsPolicy": {
          "description": "NodeTaintsPolicy indicates how we will treat node taints when calculating\npod topology spread skew. Options are:\n- Honor: nodes without taints, along with tainted nodes for which the incoming pod\nhas a toleration, are included.\n- Ignore: node taints are ignored. All nodes are included.\n\nIf this value is nil, the behavior is equivalent to the Ignore policy.\nThis is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.\n+optional",
          "type": "string"
        },
        "topologyKey": {
          "description": "TopologyKey is the key of node labels. Nodes that have a label with this key\nand identical values are considered to be in the same topology.\nWe consider each \u003ckey, value\u003e as a \"bucket\", and try to put balanced number\nof pods into each bucket.\nWe define a domain as a particular instance of a topology.\nAlso, we define an eligible domain as a domain whose nodes meet the requirements of\nnodeAffinityPolicy and nodeTaintsPolicy.\ne.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology.\nAnd, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology.\nIt's a required field.",
          "type": "string"
        },
        "whenUnsatisfiable": {
          "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy\nthe spread constraint.\n- DoNotSchedule (default) tells the scheduler not to schedule it.\n- ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod\nif and only if every possible node assignment for that pod would violate\n\"MaxSkew\" on some topology.\nFor example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same\nlabelSelector spread as 3/1/1:\n+-------+-------+-------+\n| zone1 | zone2 | zone3 |\n+-------+-------+-------+\n| P P P |   P   |   P   |\n+-------+-------+-------+\nIf WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled\nto zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies\nMaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler\nwon't make it *more* imbalanced.\nIt's a required field.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.TypedLocalObjectReference": {
      "properties": {
        "apiGroup": {
          "description": "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.\n+optional",
          "type": "string"
        },
        "kind": {
          "description": "Kind is the type of resource being referenced",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of resource being referenced",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.Volume": {
      "properties": {
        "awsElasticBlockStore": {
          "$ref": "#/definitions/v1.AWSElasticBlockStoreVolumeSource"
        },
        "azureDisk": {
          "$ref": "#/definitions/v1.AzureDiskVolumeSource"
        },
        "azureFile": {
          "$ref": "#/definitions/v1.AzureFileVolumeSource"
        },
        "cephfs": {
          "$ref": "#/definitions/v1.CephFSVolumeSource"
        },
        "cinder": {
          "$ref": "#/definitions/v1.CinderVolumeSource"
        },
        "configMap": {
          "$ref": "#/definitions/v1.ConfigMapVolumeSource"
        },
        "csi": {
          "$ref": "#/definitions/v1.CSIVolumeSource"
        },
        "downwardAPI": {
          "$ref": "#/definitions/v1.DownwardAPIVolumeSource"
        },
        "emptyDir": {
          "$ref": "#/definitions/v1.EmptyDirVolumeSource"
        },
        "ephemeral": {
          "$ref": "#/definitions/v1.EphemeralVolumeSource"
        },
        "fc": {
          "$ref": "#/definitions/v1.FCVolumeSource"
        },
        "flexVolume": {
          "$ref": "#/definitions/v1.FlexVolumeSource"
        },
        "flocker": {
          "$ref": "#/definitions/v1.FlockerVolumeSource"
        },
        "gcePersistentDisk": {
          "$ref": "#/definitions/v1.GCEPersistentDiskVolumeSource"
        },
        "gitRepo": {
          "$ref": "#/definitions/v1.GitRepoVolumeSource"
        },
        "glusterfs": {
          "$ref": "#/definitions/v1.GlusterfsVolumeSource"
        },
        "hostPath": {
          "$ref": "#/definitions/v1.HostPathVolumeSource"
        },
        "iscsi": {
          "$ref": "#/definitions/v1.ISCSIVolumeSource"
        },
        "name": {
          "description": "name of the volume.\nMust be a DNS_LABEL and unique within the pod.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "nfs": {
          "$ref": "#/definitions/v1.NFSVolumeSource"
        },
        "persistentVolumeClaim": {
          "$ref": "#/definitions/v1.PersistentVolumeClaimVolumeSource"
        },
        "photonPersistentDisk": {
          "$ref": "#/definitions/v1.PhotonPersistentDiskVolumeSource"
        },
        "portworxVolume": {
          "$ref": "#/definitions/v1.PortworxVolumeSource"
        },
        "projected": {
          "$ref": "#/definitions/v1.ProjectedVolumeSource"
        },
        "quobyte": {
          "$ref": "#/definitions/v1.QuobyteVolumeSource"
        },
        "rbd": {
          "$ref": "#/definitions/v1.RBDVolumeSource"
        },
        "scaleIO": {
          "$ref": "#/definitions/v1.ScaleIOVolumeSource"
        },
        "secret": {
          "$ref": "#/definitions/v1.SecretVolumeSource"
        },
        "storageos": {
          "$ref": "#/definitions/v1.StorageOSVolumeSource"
        },
        "vsphereVolume": {
          "$ref": "#/definitions/v1.VsphereVirtualDiskVolumeSource"
        }
      },
      "type": "object"
    },
    "v1.VolumeDevice": {
      "properties": {
        "devicePath": {
          "description": "devicePath is the path inside of the container that the device will be mapped to.",
          "type": "string"
        },
        "name": {
          "description": "name must match the name of a persistentVolumeClaim in the pod",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.VolumeMount": {
      "properties": {
        "mountPath": {
          "description": "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.",
          "type": "string"
        },
        "mountPropagation": {
          "description": "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10.\n+optional",
          "type": "string"
        },
        "name": {
          "description": "This must match the Name of a Volume.",
          "type": "string"
        },
        "readOnly": {
          "description": "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.\n+optional",
          "type": "boolean"
        },
        "subPath": {
          "description": "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).\n+optional",
          "type": "string"
        },
        "subPathExpr": {
          "description": "Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive.\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.VolumeProjection": {
      "properties": {
        "configMap": {
          "$ref": "#/definitions/v1.ConfigMapProjection"
        },
        "downwardAPI": {
          "$ref": "#/definitions/v1.DownwardAPIProjection"
        },
        "secret": {
          "$ref": "#/definitions/v1.SecretProjection"
        },
        "serviceAccountToken": {
          "$ref": "#/definitions/v1.ServiceAccountTokenProjection"
        }
      },
      "type": "object"
    },
    "v1.VsphereVirtualDiskVolumeSource": {
      "properties": {
        "fsType": {
          "description": "fsType is filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n+optional",
          "type": "string"
        },
        "storagePolicyID": {
          "description": "storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.\n+optional",
          "type": "string"
        },
        "storagePolicyName": {
          "description": "storagePolicyName is the storage Policy Based Management (SPBM) profile name.\n+optional",
          "type": "string"
        },
        "volumePath": {
          "description": "volumePath is the path that identifies vSphere volume vmdk",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.WeightedPodAffinityTerm": {
      "properties": {
        "podAffinityTerm": {
          "$ref": "#/definitions/v1.PodAffinityTerm"
        },
        "weight": {
          "description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1.WindowsSecurityContextOptions": {
      "properties": {
        "gmsaCredentialSpec": {
          "description": "GMSACredentialSpec is where the GMSA admission webhook\n(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the\nGMSA credential spec named by the GMSACredentialSpecName field.\n+optional",
          "type": "string"
        },
        "gmsaCredentialSpecName": {
          "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.\n+optional",
          "type": "string"
        },
        "hostProcess": {
          "description": "HostProcess determines if a container should be run as a 'Host Process' container.\nThis field is alpha-level and will only be honored by components that enable the\nWindowsHostProcessContainers feature flag. Setting this field without the feature\nflag will result in errors when validating the Pod. All of a Pod's containers must\nhave the same effective HostProcess value (it is not allowed to have a mix of HostProcess\ncontainers and non-HostProcess containers).  In addition, if HostProcess is true\nthen HostNetwork must also be set to true.\n+optional",
          "type": "boolean"
        },
        "runAsUserName": {
          "description": "The UserName in Windows to run the entrypoint of the container process.\nDefaults to the user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext. If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "host": "api.signadot.com",
  "info": {
    "contact": {},
    "description": "API for Signadot Sandboxes",
    "title": "Signadot API",
    "version": "2.0"
  },
  "paths": {
    "/orgs/{orgName}/clusters/": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "List clusters.",
        "operationId": "list-clusters",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/Cluster"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List clusters",
        "tags": [
          "Cluster"
        ]
      }
    },
    "/orgs/{orgName}/clusters/{clusterName}/": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Remove a Kubernetes cluster from Signadot.",
        "operationId": "remove-cluster",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Cluster Name",
            "in": "path",
            "name": "clusterName",
            "required": true,
            "type": "string",
            "x-example": "my-cluster"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EmptyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Remove a cluster",
        "tags": [
          "Cluster"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get a cluster.",
        "operationId": "get-cluster",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Cluster Name",
            "in": "path",
            "name": "clusterName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a cluster",
        "tags": [
          "Cluster"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Add a Kubernetes cluster to Signadot.",
        "operationId": "add-cluster",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Cluster Name",
            "in": "path",
            "name": "clusterName",
            "required": true,
            "type": "string",
            "x-example": "my-cluster"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Add a cluster",
        "tags": [
          "Cluster"
        ]
      }
    },
    "/orgs/{orgName}/clusters/{clusterName}/tokens": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new token for connecting a cluster.",
        "operationId": "create-cluster-token",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Cluster Name",
            "in": "path",
            "name": "clusterName",
            "required": true,
            "type": "string",
            "x-example": "my-new-cluster"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClusterToken"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create cluster token",
        "tags": [
          "Cluster"
        ]
      }
    },
    "/orgs/{orgName}/clusters/{clusterName}/tokens/": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "List the cluster tokens associated with a cluster.",
        "operationId": "list-cluster-tokens",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Cluster Name",
            "in": "path",
            "name": "clusterName",
            "required": true,
            "type": "string",
            "x-example": "my-new-cluster"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/ClusterToken"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List cluster tokens",
        "tags": [
          "Cluster"
        ]
      }
    },
    "/orgs/{orgName}/clusters/{clusterName}/tokens/{tokenId}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete a cluster token associated with a cluster.",
        "operationId": "delete-cluster-token",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Cluster Name",
            "in": "path",
            "name": "clusterName",
            "required": true,
            "type": "string",
            "x-example": "my-new-cluster"
          },
          {
            "description": "Token Id",
            "in": "path",
            "name": "tokenId",
            "required": true,
            "type": "string",
            "x-example": "kq6mtksk7mn5"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EmptyResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Delete cluster token",
        "tags": [
          "Cluster"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get a cluster token associated with a cluster.",
        "operationId": "get-cluster-token",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Cluster Name",
            "in": "path",
            "name": "clusterName",
            "required": true,
            "type": "string",
            "x-example": "my-new-cluster"
          },
          {
            "description": "Token Id",
            "in": "path",
            "name": "tokenId",
            "required": true,
            "type": "string",
            "x-example": "kq6mtksk7mn5"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClusterToken"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a cluster token",
        "tags": [
          "Cluster"
        ]
      }
    },
    "/orgs/{orgName}/resource-plugins": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "List all resource plugins under the specified Signadot org.",
        "operationId": "list-resource-plugins",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/ResourcePlugin"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List resource plugins",
        "tags": [
          "ResourcePlugins"
        ]
      }
    },
    "/orgs/{orgName}/resource-plugins/{pluginName}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete the specified resource plugin",
        "operationId": "delete-resource-plugin",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Resource plugin name",
            "in": "path",
            "name": "pluginName",
            "required": true,
            "type": "string",
            "x-example": "mariadb-plugin"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EmptyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Delete a resource plugin",
        "tags": [
          "ResourcePlugins"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get the specified resource plugin",
        "operationId": "get-resource-plugin",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Resource plugin name",
            "in": "path",
            "name": "pluginName",
            "required": true,
            "type": "string",
            "x-example": "mariadb-plugin"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/resourceplugins.ResourcePlugin"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get the requested resource plugin",
        "tags": [
          "ResourcePlugins"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new resource plugin. Updates are not supported at this time.",
        "operationId": "apply-resource-plugin",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Resource plugin name",
            "in": "path",
            "name": "pluginName",
            "required": true,
            "type": "string",
            "x-example": "mariadb-plugin"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EmptyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Apply a resource plugin",
        "tags": [
          "ResourcePlugins"
        ]
      }
    },
    "/orgs/{orgName}/routegroups": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "List all routegroups under the specified Signadot org.",
        "operationId": "list-routegroups",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/RouteGroup"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List routegroups",
        "tags": [
          "RouteGroups"
        ]
      }
    },
    "/orgs/{orgName}/routegroups/{routegroupName}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete a given routegroup.",
        "operationId": "delete-routegroup",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "RouteGroup Name",
            "in": "path",
            "name": "routegroupName",
            "required": true,
            "type": "string",
            "x-example": "my-routegroup"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EmptyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Delete a routegroup",
        "tags": [
          "RouteGroups"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Fetch the details about a given routegroup.",
        "operationId": "get-routegroup",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "RouteGroup Name",
            "in": "path",
            "name": "routegroupName",
            "required": true,
            "type": "string",
            "x-example": "my-routegroup"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RouteGroup"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a routegroup",
        "tags": [
          "RouteGroups"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Creates or updates a routegroup with the provided parameters.",
        "operationId": "apply-routegroup",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "RouteGroup Name",
            "in": "path",
            "name": "routegroupName",
            "required": true,
            "type": "string",
            "x-example": "my-routegroup"
          },
          {
            "description": "Request to create or update routegroup",
            "in": "body",
            "name": "data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RouteGroup"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RouteGroup"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create or update a routegroup",
        "tags": [
          "RouteGroups"
        ]
      }
    },
    "/orgs/{orgName}/sandboxes": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "List all sandboxes under the specified Signadot org.",
        "operationId": "list-sandboxes",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/Sandbox"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List sandboxes",
        "tags": [
          "Sandboxes"
        ]
      }
    },
    "/orgs/{orgName}/sandboxes/{sandboxName}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete a given sandbox.",
        "operationId": "delete-sandbox",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Sandbox Name",
            "in": "path",
            "name": "sandboxName",
            "required": true,
            "type": "string",
            "x-example": "my-sandbox"
          },
          {
            "description": "force",
            "in": "query",
            "name": "force",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EmptyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Delete a sandbox",
        "tags": [
          "Sandboxes"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Fetch the details about a given sandbox.",
        "operationId": "get-sandbox",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Sandbox Name",
            "in": "path",
            "name": "sandboxName",
            "required": true,
            "type": "string",
            "x-example": "my-sandbox"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Sandbox"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a sandbox",
        "tags": [
          "Sandboxes"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Creates or updates a sandbox with the provided parameters.",
        "operationId": "apply-sandbox",
        "parameters": [
          {
            "description": "Signadot Org Name",
            "in": "path",
            "name": "orgName",
            "required": true,
            "type": "string",
            "x-example": "my-company"
          },
          {
            "description": "Sandbox Name",
            "in": "path",
            "name": "sandboxName",
            "required": true,
            "type": "string",
            "x-example": "my-sandbox"
          },
          {
            "description": "Request to create sandbox",
            "in": "body",
            "name": "data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Sandbox"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Sandbox"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create or update a sandbox",
        "tags": [
          "Sandboxes"
        ]
      }
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "in": "header",
      "name": "signadot-api-key",
      "type": "apiKey"
    }
  },
  "swagger": "2.0"
}