// Code generated by go-swagger; DO NOT EDIT.

package runner_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/signadot/go-sdk/models"
)

// GetRunnergroupReader is a Reader for the GetRunnergroup structure.
type GetRunnergroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRunnergroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRunnergroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRunnergroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRunnergroupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewGetRunnergroupBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /orgs/{orgName}/runnergroups/{runnergroupName}] get-runnergroup", response, response.Code())
	}
}

// NewGetRunnergroupOK creates a GetRunnergroupOK with default headers values
func NewGetRunnergroupOK() *GetRunnergroupOK {
	return &GetRunnergroupOK{}
}

/*
GetRunnergroupOK describes a response with status code 200, with default header values.

OK
*/
type GetRunnergroupOK struct {
	Payload *models.JobRunnerGroup
}

// IsSuccess returns true when this get runnergroup o k response has a 2xx status code
func (o *GetRunnergroupOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get runnergroup o k response has a 3xx status code
func (o *GetRunnergroupOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get runnergroup o k response has a 4xx status code
func (o *GetRunnergroupOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get runnergroup o k response has a 5xx status code
func (o *GetRunnergroupOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get runnergroup o k response a status code equal to that given
func (o *GetRunnergroupOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get runnergroup o k response
func (o *GetRunnergroupOK) Code() int {
	return 200
}

func (o *GetRunnergroupOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/runnergroups/{runnergroupName}][%d] getRunnergroupOK %s", 200, payload)
}

func (o *GetRunnergroupOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/runnergroups/{runnergroupName}][%d] getRunnergroupOK %s", 200, payload)
}

func (o *GetRunnergroupOK) GetPayload() *models.JobRunnerGroup {
	return o.Payload
}

func (o *GetRunnergroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.JobRunnerGroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRunnergroupBadRequest creates a GetRunnergroupBadRequest with default headers values
func NewGetRunnergroupBadRequest() *GetRunnergroupBadRequest {
	return &GetRunnergroupBadRequest{}
}

/*
GetRunnergroupBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetRunnergroupBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get runnergroup bad request response has a 2xx status code
func (o *GetRunnergroupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get runnergroup bad request response has a 3xx status code
func (o *GetRunnergroupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get runnergroup bad request response has a 4xx status code
func (o *GetRunnergroupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get runnergroup bad request response has a 5xx status code
func (o *GetRunnergroupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get runnergroup bad request response a status code equal to that given
func (o *GetRunnergroupBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get runnergroup bad request response
func (o *GetRunnergroupBadRequest) Code() int {
	return 400
}

func (o *GetRunnergroupBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/runnergroups/{runnergroupName}][%d] getRunnergroupBadRequest %s", 400, payload)
}

func (o *GetRunnergroupBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/runnergroups/{runnergroupName}][%d] getRunnergroupBadRequest %s", 400, payload)
}

func (o *GetRunnergroupBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRunnergroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRunnergroupUnauthorized creates a GetRunnergroupUnauthorized with default headers values
func NewGetRunnergroupUnauthorized() *GetRunnergroupUnauthorized {
	return &GetRunnergroupUnauthorized{}
}

/*
GetRunnergroupUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetRunnergroupUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get runnergroup unauthorized response has a 2xx status code
func (o *GetRunnergroupUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get runnergroup unauthorized response has a 3xx status code
func (o *GetRunnergroupUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get runnergroup unauthorized response has a 4xx status code
func (o *GetRunnergroupUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get runnergroup unauthorized response has a 5xx status code
func (o *GetRunnergroupUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get runnergroup unauthorized response a status code equal to that given
func (o *GetRunnergroupUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get runnergroup unauthorized response
func (o *GetRunnergroupUnauthorized) Code() int {
	return 401
}

func (o *GetRunnergroupUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/runnergroups/{runnergroupName}][%d] getRunnergroupUnauthorized %s", 401, payload)
}

func (o *GetRunnergroupUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/runnergroups/{runnergroupName}][%d] getRunnergroupUnauthorized %s", 401, payload)
}

func (o *GetRunnergroupUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRunnergroupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRunnergroupBadGateway creates a GetRunnergroupBadGateway with default headers values
func NewGetRunnergroupBadGateway() *GetRunnergroupBadGateway {
	return &GetRunnergroupBadGateway{}
}

/*
GetRunnergroupBadGateway describes a response with status code 502, with default header values.

Bad Gateway
*/
type GetRunnergroupBadGateway struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get runnergroup bad gateway response has a 2xx status code
func (o *GetRunnergroupBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get runnergroup bad gateway response has a 3xx status code
func (o *GetRunnergroupBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get runnergroup bad gateway response has a 4xx status code
func (o *GetRunnergroupBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this get runnergroup bad gateway response has a 5xx status code
func (o *GetRunnergroupBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this get runnergroup bad gateway response a status code equal to that given
func (o *GetRunnergroupBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the get runnergroup bad gateway response
func (o *GetRunnergroupBadGateway) Code() int {
	return 502
}

func (o *GetRunnergroupBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/runnergroups/{runnergroupName}][%d] getRunnergroupBadGateway %s", 502, payload)
}

func (o *GetRunnergroupBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/runnergroups/{runnergroupName}][%d] getRunnergroupBadGateway %s", 502, payload)
}

func (o *GetRunnergroupBadGateway) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRunnergroupBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
