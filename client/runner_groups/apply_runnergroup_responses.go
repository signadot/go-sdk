// Code generated by go-swagger; DO NOT EDIT.

package runner_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/signadot/go-sdk/models"
)

// ApplyRunnergroupReader is a Reader for the ApplyRunnergroup structure.
type ApplyRunnergroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ApplyRunnergroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewApplyRunnergroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewApplyRunnergroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewApplyRunnergroupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewApplyRunnergroupBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /orgs/{orgName}/runnergroups/{runnergroupName}] apply-runnergroup", response, response.Code())
	}
}

// NewApplyRunnergroupOK creates a ApplyRunnergroupOK with default headers values
func NewApplyRunnergroupOK() *ApplyRunnergroupOK {
	return &ApplyRunnergroupOK{}
}

/*
ApplyRunnergroupOK describes a response with status code 200, with default header values.

OK
*/
type ApplyRunnergroupOK struct {
	Payload *models.RunnergroupsRunnerGroup
}

// IsSuccess returns true when this apply runnergroup o k response has a 2xx status code
func (o *ApplyRunnergroupOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this apply runnergroup o k response has a 3xx status code
func (o *ApplyRunnergroupOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply runnergroup o k response has a 4xx status code
func (o *ApplyRunnergroupOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this apply runnergroup o k response has a 5xx status code
func (o *ApplyRunnergroupOK) IsServerError() bool {
	return false
}

// IsCode returns true when this apply runnergroup o k response a status code equal to that given
func (o *ApplyRunnergroupOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the apply runnergroup o k response
func (o *ApplyRunnergroupOK) Code() int {
	return 200
}

func (o *ApplyRunnergroupOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /orgs/{orgName}/runnergroups/{runnergroupName}][%d] applyRunnergroupOK %s", 200, payload)
}

func (o *ApplyRunnergroupOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /orgs/{orgName}/runnergroups/{runnergroupName}][%d] applyRunnergroupOK %s", 200, payload)
}

func (o *ApplyRunnergroupOK) GetPayload() *models.RunnergroupsRunnerGroup {
	return o.Payload
}

func (o *ApplyRunnergroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RunnergroupsRunnerGroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplyRunnergroupBadRequest creates a ApplyRunnergroupBadRequest with default headers values
func NewApplyRunnergroupBadRequest() *ApplyRunnergroupBadRequest {
	return &ApplyRunnergroupBadRequest{}
}

/*
ApplyRunnergroupBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ApplyRunnergroupBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this apply runnergroup bad request response has a 2xx status code
func (o *ApplyRunnergroupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this apply runnergroup bad request response has a 3xx status code
func (o *ApplyRunnergroupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply runnergroup bad request response has a 4xx status code
func (o *ApplyRunnergroupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this apply runnergroup bad request response has a 5xx status code
func (o *ApplyRunnergroupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this apply runnergroup bad request response a status code equal to that given
func (o *ApplyRunnergroupBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the apply runnergroup bad request response
func (o *ApplyRunnergroupBadRequest) Code() int {
	return 400
}

func (o *ApplyRunnergroupBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /orgs/{orgName}/runnergroups/{runnergroupName}][%d] applyRunnergroupBadRequest %s", 400, payload)
}

func (o *ApplyRunnergroupBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /orgs/{orgName}/runnergroups/{runnergroupName}][%d] applyRunnergroupBadRequest %s", 400, payload)
}

func (o *ApplyRunnergroupBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ApplyRunnergroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplyRunnergroupUnauthorized creates a ApplyRunnergroupUnauthorized with default headers values
func NewApplyRunnergroupUnauthorized() *ApplyRunnergroupUnauthorized {
	return &ApplyRunnergroupUnauthorized{}
}

/*
ApplyRunnergroupUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ApplyRunnergroupUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this apply runnergroup unauthorized response has a 2xx status code
func (o *ApplyRunnergroupUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this apply runnergroup unauthorized response has a 3xx status code
func (o *ApplyRunnergroupUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply runnergroup unauthorized response has a 4xx status code
func (o *ApplyRunnergroupUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this apply runnergroup unauthorized response has a 5xx status code
func (o *ApplyRunnergroupUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this apply runnergroup unauthorized response a status code equal to that given
func (o *ApplyRunnergroupUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the apply runnergroup unauthorized response
func (o *ApplyRunnergroupUnauthorized) Code() int {
	return 401
}

func (o *ApplyRunnergroupUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /orgs/{orgName}/runnergroups/{runnergroupName}][%d] applyRunnergroupUnauthorized %s", 401, payload)
}

func (o *ApplyRunnergroupUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /orgs/{orgName}/runnergroups/{runnergroupName}][%d] applyRunnergroupUnauthorized %s", 401, payload)
}

func (o *ApplyRunnergroupUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ApplyRunnergroupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplyRunnergroupBadGateway creates a ApplyRunnergroupBadGateway with default headers values
func NewApplyRunnergroupBadGateway() *ApplyRunnergroupBadGateway {
	return &ApplyRunnergroupBadGateway{}
}

/*
ApplyRunnergroupBadGateway describes a response with status code 502, with default header values.

Bad Gateway
*/
type ApplyRunnergroupBadGateway struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this apply runnergroup bad gateway response has a 2xx status code
func (o *ApplyRunnergroupBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this apply runnergroup bad gateway response has a 3xx status code
func (o *ApplyRunnergroupBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply runnergroup bad gateway response has a 4xx status code
func (o *ApplyRunnergroupBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this apply runnergroup bad gateway response has a 5xx status code
func (o *ApplyRunnergroupBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this apply runnergroup bad gateway response a status code equal to that given
func (o *ApplyRunnergroupBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the apply runnergroup bad gateway response
func (o *ApplyRunnergroupBadGateway) Code() int {
	return 502
}

func (o *ApplyRunnergroupBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /orgs/{orgName}/runnergroups/{runnergroupName}][%d] applyRunnergroupBadGateway %s", 502, payload)
}

func (o *ApplyRunnergroupBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /orgs/{orgName}/runnergroups/{runnergroupName}][%d] applyRunnergroupBadGateway %s", 502, payload)
}

func (o *ApplyRunnergroupBadGateway) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ApplyRunnergroupBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
