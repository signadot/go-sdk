// Code generated by go-swagger; DO NOT EDIT.

package runner_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/signadot/go-sdk/models"
)

// ListRunnergroupReader is a Reader for the ListRunnergroup structure.
type ListRunnergroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListRunnergroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListRunnergroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListRunnergroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListRunnergroupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewListRunnergroupBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /orgs/{orgName}/runnergroups] list-runnergroup", response, response.Code())
	}
}

// NewListRunnergroupOK creates a ListRunnergroupOK with default headers values
func NewListRunnergroupOK() *ListRunnergroupOK {
	return &ListRunnergroupOK{}
}

/*
ListRunnergroupOK describes a response with status code 200, with default header values.

OK
*/
type ListRunnergroupOK struct {
	Payload []*models.RunnergroupsRunnerGroup
}

// IsSuccess returns true when this list runnergroup o k response has a 2xx status code
func (o *ListRunnergroupOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list runnergroup o k response has a 3xx status code
func (o *ListRunnergroupOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list runnergroup o k response has a 4xx status code
func (o *ListRunnergroupOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list runnergroup o k response has a 5xx status code
func (o *ListRunnergroupOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list runnergroup o k response a status code equal to that given
func (o *ListRunnergroupOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list runnergroup o k response
func (o *ListRunnergroupOK) Code() int {
	return 200
}

func (o *ListRunnergroupOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/runnergroups][%d] listRunnergroupOK %s", 200, payload)
}

func (o *ListRunnergroupOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/runnergroups][%d] listRunnergroupOK %s", 200, payload)
}

func (o *ListRunnergroupOK) GetPayload() []*models.RunnergroupsRunnerGroup {
	return o.Payload
}

func (o *ListRunnergroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListRunnergroupBadRequest creates a ListRunnergroupBadRequest with default headers values
func NewListRunnergroupBadRequest() *ListRunnergroupBadRequest {
	return &ListRunnergroupBadRequest{}
}

/*
ListRunnergroupBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ListRunnergroupBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this list runnergroup bad request response has a 2xx status code
func (o *ListRunnergroupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list runnergroup bad request response has a 3xx status code
func (o *ListRunnergroupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list runnergroup bad request response has a 4xx status code
func (o *ListRunnergroupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list runnergroup bad request response has a 5xx status code
func (o *ListRunnergroupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list runnergroup bad request response a status code equal to that given
func (o *ListRunnergroupBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list runnergroup bad request response
func (o *ListRunnergroupBadRequest) Code() int {
	return 400
}

func (o *ListRunnergroupBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/runnergroups][%d] listRunnergroupBadRequest %s", 400, payload)
}

func (o *ListRunnergroupBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/runnergroups][%d] listRunnergroupBadRequest %s", 400, payload)
}

func (o *ListRunnergroupBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ListRunnergroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListRunnergroupUnauthorized creates a ListRunnergroupUnauthorized with default headers values
func NewListRunnergroupUnauthorized() *ListRunnergroupUnauthorized {
	return &ListRunnergroupUnauthorized{}
}

/*
ListRunnergroupUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListRunnergroupUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this list runnergroup unauthorized response has a 2xx status code
func (o *ListRunnergroupUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list runnergroup unauthorized response has a 3xx status code
func (o *ListRunnergroupUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list runnergroup unauthorized response has a 4xx status code
func (o *ListRunnergroupUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list runnergroup unauthorized response has a 5xx status code
func (o *ListRunnergroupUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list runnergroup unauthorized response a status code equal to that given
func (o *ListRunnergroupUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list runnergroup unauthorized response
func (o *ListRunnergroupUnauthorized) Code() int {
	return 401
}

func (o *ListRunnergroupUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/runnergroups][%d] listRunnergroupUnauthorized %s", 401, payload)
}

func (o *ListRunnergroupUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/runnergroups][%d] listRunnergroupUnauthorized %s", 401, payload)
}

func (o *ListRunnergroupUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ListRunnergroupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListRunnergroupBadGateway creates a ListRunnergroupBadGateway with default headers values
func NewListRunnergroupBadGateway() *ListRunnergroupBadGateway {
	return &ListRunnergroupBadGateway{}
}

/*
ListRunnergroupBadGateway describes a response with status code 502, with default header values.

Bad Gateway
*/
type ListRunnergroupBadGateway struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this list runnergroup bad gateway response has a 2xx status code
func (o *ListRunnergroupBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list runnergroup bad gateway response has a 3xx status code
func (o *ListRunnergroupBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list runnergroup bad gateway response has a 4xx status code
func (o *ListRunnergroupBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this list runnergroup bad gateway response has a 5xx status code
func (o *ListRunnergroupBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this list runnergroup bad gateway response a status code equal to that given
func (o *ListRunnergroupBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the list runnergroup bad gateway response
func (o *ListRunnergroupBadGateway) Code() int {
	return 502
}

func (o *ListRunnergroupBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/runnergroups][%d] listRunnergroupBadGateway %s", 502, payload)
}

func (o *ListRunnergroupBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/runnergroups][%d] listRunnergroupBadGateway %s", 502, payload)
}

func (o *ListRunnergroupBadGateway) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ListRunnergroupBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
