// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/signadot/go-sdk/models"
)

// AuthDeviceGetTokenReader is a Reader for the AuthDeviceGetToken structure.
type AuthDeviceGetTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AuthDeviceGetTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAuthDeviceGetTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAuthDeviceGetTokenForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAuthDeviceGetTokenTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAuthDeviceGetTokenInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /auth/device/token/] auth-device-get-token", response, response.Code())
	}
}

// NewAuthDeviceGetTokenOK creates a AuthDeviceGetTokenOK with default headers values
func NewAuthDeviceGetTokenOK() *AuthDeviceGetTokenOK {
	return &AuthDeviceGetTokenOK{}
}

/*
AuthDeviceGetTokenOK describes a response with status code 200, with default header values.

OK
*/
type AuthDeviceGetTokenOK struct {
	Payload *models.AuthdevicesToken
}

// IsSuccess returns true when this auth device get token o k response has a 2xx status code
func (o *AuthDeviceGetTokenOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this auth device get token o k response has a 3xx status code
func (o *AuthDeviceGetTokenOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth device get token o k response has a 4xx status code
func (o *AuthDeviceGetTokenOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this auth device get token o k response has a 5xx status code
func (o *AuthDeviceGetTokenOK) IsServerError() bool {
	return false
}

// IsCode returns true when this auth device get token o k response a status code equal to that given
func (o *AuthDeviceGetTokenOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the auth device get token o k response
func (o *AuthDeviceGetTokenOK) Code() int {
	return 200
}

func (o *AuthDeviceGetTokenOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/device/token/][%d] authDeviceGetTokenOK %s", 200, payload)
}

func (o *AuthDeviceGetTokenOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/device/token/][%d] authDeviceGetTokenOK %s", 200, payload)
}

func (o *AuthDeviceGetTokenOK) GetPayload() *models.AuthdevicesToken {
	return o.Payload
}

func (o *AuthDeviceGetTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthdevicesToken)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthDeviceGetTokenForbidden creates a AuthDeviceGetTokenForbidden with default headers values
func NewAuthDeviceGetTokenForbidden() *AuthDeviceGetTokenForbidden {
	return &AuthDeviceGetTokenForbidden{}
}

/*
AuthDeviceGetTokenForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AuthDeviceGetTokenForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this auth device get token forbidden response has a 2xx status code
func (o *AuthDeviceGetTokenForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this auth device get token forbidden response has a 3xx status code
func (o *AuthDeviceGetTokenForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth device get token forbidden response has a 4xx status code
func (o *AuthDeviceGetTokenForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this auth device get token forbidden response has a 5xx status code
func (o *AuthDeviceGetTokenForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this auth device get token forbidden response a status code equal to that given
func (o *AuthDeviceGetTokenForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the auth device get token forbidden response
func (o *AuthDeviceGetTokenForbidden) Code() int {
	return 403
}

func (o *AuthDeviceGetTokenForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/device/token/][%d] authDeviceGetTokenForbidden %s", 403, payload)
}

func (o *AuthDeviceGetTokenForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/device/token/][%d] authDeviceGetTokenForbidden %s", 403, payload)
}

func (o *AuthDeviceGetTokenForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AuthDeviceGetTokenForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthDeviceGetTokenTooManyRequests creates a AuthDeviceGetTokenTooManyRequests with default headers values
func NewAuthDeviceGetTokenTooManyRequests() *AuthDeviceGetTokenTooManyRequests {
	return &AuthDeviceGetTokenTooManyRequests{}
}

/*
AuthDeviceGetTokenTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type AuthDeviceGetTokenTooManyRequests struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this auth device get token too many requests response has a 2xx status code
func (o *AuthDeviceGetTokenTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this auth device get token too many requests response has a 3xx status code
func (o *AuthDeviceGetTokenTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth device get token too many requests response has a 4xx status code
func (o *AuthDeviceGetTokenTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this auth device get token too many requests response has a 5xx status code
func (o *AuthDeviceGetTokenTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this auth device get token too many requests response a status code equal to that given
func (o *AuthDeviceGetTokenTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the auth device get token too many requests response
func (o *AuthDeviceGetTokenTooManyRequests) Code() int {
	return 429
}

func (o *AuthDeviceGetTokenTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/device/token/][%d] authDeviceGetTokenTooManyRequests %s", 429, payload)
}

func (o *AuthDeviceGetTokenTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/device/token/][%d] authDeviceGetTokenTooManyRequests %s", 429, payload)
}

func (o *AuthDeviceGetTokenTooManyRequests) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AuthDeviceGetTokenTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthDeviceGetTokenInternalServerError creates a AuthDeviceGetTokenInternalServerError with default headers values
func NewAuthDeviceGetTokenInternalServerError() *AuthDeviceGetTokenInternalServerError {
	return &AuthDeviceGetTokenInternalServerError{}
}

/*
AuthDeviceGetTokenInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AuthDeviceGetTokenInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this auth device get token internal server error response has a 2xx status code
func (o *AuthDeviceGetTokenInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this auth device get token internal server error response has a 3xx status code
func (o *AuthDeviceGetTokenInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth device get token internal server error response has a 4xx status code
func (o *AuthDeviceGetTokenInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this auth device get token internal server error response has a 5xx status code
func (o *AuthDeviceGetTokenInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this auth device get token internal server error response a status code equal to that given
func (o *AuthDeviceGetTokenInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the auth device get token internal server error response
func (o *AuthDeviceGetTokenInternalServerError) Code() int {
	return 500
}

func (o *AuthDeviceGetTokenInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/device/token/][%d] authDeviceGetTokenInternalServerError %s", 500, payload)
}

func (o *AuthDeviceGetTokenInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/device/token/][%d] authDeviceGetTokenInternalServerError %s", 500, payload)
}

func (o *AuthDeviceGetTokenInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AuthDeviceGetTokenInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
