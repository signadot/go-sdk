// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/signadot/go-sdk/models"
)

// AuthDeviceRefreshTokenReader is a Reader for the AuthDeviceRefreshToken structure.
type AuthDeviceRefreshTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AuthDeviceRefreshTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAuthDeviceRefreshTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAuthDeviceRefreshTokenForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAuthDeviceRefreshTokenTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAuthDeviceRefreshTokenInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /auth/device/token/refresh] auth-device-refresh-token", response, response.Code())
	}
}

// NewAuthDeviceRefreshTokenOK creates a AuthDeviceRefreshTokenOK with default headers values
func NewAuthDeviceRefreshTokenOK() *AuthDeviceRefreshTokenOK {
	return &AuthDeviceRefreshTokenOK{}
}

/*
AuthDeviceRefreshTokenOK describes a response with status code 200, with default header values.

OK
*/
type AuthDeviceRefreshTokenOK struct {
	Payload *models.AuthdevicesToken
}

// IsSuccess returns true when this auth device refresh token o k response has a 2xx status code
func (o *AuthDeviceRefreshTokenOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this auth device refresh token o k response has a 3xx status code
func (o *AuthDeviceRefreshTokenOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth device refresh token o k response has a 4xx status code
func (o *AuthDeviceRefreshTokenOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this auth device refresh token o k response has a 5xx status code
func (o *AuthDeviceRefreshTokenOK) IsServerError() bool {
	return false
}

// IsCode returns true when this auth device refresh token o k response a status code equal to that given
func (o *AuthDeviceRefreshTokenOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the auth device refresh token o k response
func (o *AuthDeviceRefreshTokenOK) Code() int {
	return 200
}

func (o *AuthDeviceRefreshTokenOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/device/token/refresh][%d] authDeviceRefreshTokenOK %s", 200, payload)
}

func (o *AuthDeviceRefreshTokenOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/device/token/refresh][%d] authDeviceRefreshTokenOK %s", 200, payload)
}

func (o *AuthDeviceRefreshTokenOK) GetPayload() *models.AuthdevicesToken {
	return o.Payload
}

func (o *AuthDeviceRefreshTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthdevicesToken)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthDeviceRefreshTokenForbidden creates a AuthDeviceRefreshTokenForbidden with default headers values
func NewAuthDeviceRefreshTokenForbidden() *AuthDeviceRefreshTokenForbidden {
	return &AuthDeviceRefreshTokenForbidden{}
}

/*
AuthDeviceRefreshTokenForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AuthDeviceRefreshTokenForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this auth device refresh token forbidden response has a 2xx status code
func (o *AuthDeviceRefreshTokenForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this auth device refresh token forbidden response has a 3xx status code
func (o *AuthDeviceRefreshTokenForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth device refresh token forbidden response has a 4xx status code
func (o *AuthDeviceRefreshTokenForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this auth device refresh token forbidden response has a 5xx status code
func (o *AuthDeviceRefreshTokenForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this auth device refresh token forbidden response a status code equal to that given
func (o *AuthDeviceRefreshTokenForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the auth device refresh token forbidden response
func (o *AuthDeviceRefreshTokenForbidden) Code() int {
	return 403
}

func (o *AuthDeviceRefreshTokenForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/device/token/refresh][%d] authDeviceRefreshTokenForbidden %s", 403, payload)
}

func (o *AuthDeviceRefreshTokenForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/device/token/refresh][%d] authDeviceRefreshTokenForbidden %s", 403, payload)
}

func (o *AuthDeviceRefreshTokenForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AuthDeviceRefreshTokenForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthDeviceRefreshTokenTooManyRequests creates a AuthDeviceRefreshTokenTooManyRequests with default headers values
func NewAuthDeviceRefreshTokenTooManyRequests() *AuthDeviceRefreshTokenTooManyRequests {
	return &AuthDeviceRefreshTokenTooManyRequests{}
}

/*
AuthDeviceRefreshTokenTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type AuthDeviceRefreshTokenTooManyRequests struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this auth device refresh token too many requests response has a 2xx status code
func (o *AuthDeviceRefreshTokenTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this auth device refresh token too many requests response has a 3xx status code
func (o *AuthDeviceRefreshTokenTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth device refresh token too many requests response has a 4xx status code
func (o *AuthDeviceRefreshTokenTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this auth device refresh token too many requests response has a 5xx status code
func (o *AuthDeviceRefreshTokenTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this auth device refresh token too many requests response a status code equal to that given
func (o *AuthDeviceRefreshTokenTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the auth device refresh token too many requests response
func (o *AuthDeviceRefreshTokenTooManyRequests) Code() int {
	return 429
}

func (o *AuthDeviceRefreshTokenTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/device/token/refresh][%d] authDeviceRefreshTokenTooManyRequests %s", 429, payload)
}

func (o *AuthDeviceRefreshTokenTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/device/token/refresh][%d] authDeviceRefreshTokenTooManyRequests %s", 429, payload)
}

func (o *AuthDeviceRefreshTokenTooManyRequests) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AuthDeviceRefreshTokenTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthDeviceRefreshTokenInternalServerError creates a AuthDeviceRefreshTokenInternalServerError with default headers values
func NewAuthDeviceRefreshTokenInternalServerError() *AuthDeviceRefreshTokenInternalServerError {
	return &AuthDeviceRefreshTokenInternalServerError{}
}

/*
AuthDeviceRefreshTokenInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AuthDeviceRefreshTokenInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this auth device refresh token internal server error response has a 2xx status code
func (o *AuthDeviceRefreshTokenInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this auth device refresh token internal server error response has a 3xx status code
func (o *AuthDeviceRefreshTokenInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth device refresh token internal server error response has a 4xx status code
func (o *AuthDeviceRefreshTokenInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this auth device refresh token internal server error response has a 5xx status code
func (o *AuthDeviceRefreshTokenInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this auth device refresh token internal server error response a status code equal to that given
func (o *AuthDeviceRefreshTokenInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the auth device refresh token internal server error response
func (o *AuthDeviceRefreshTokenInternalServerError) Code() int {
	return 500
}

func (o *AuthDeviceRefreshTokenInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/device/token/refresh][%d] authDeviceRefreshTokenInternalServerError %s", 500, payload)
}

func (o *AuthDeviceRefreshTokenInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/device/token/refresh][%d] authDeviceRefreshTokenInternalServerError %s", 500, payload)
}

func (o *AuthDeviceRefreshTokenInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AuthDeviceRefreshTokenInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
