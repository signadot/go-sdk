// Code generated by go-swagger; DO NOT EDIT.

package test_executions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewQueryTestExecutionsParams creates a new QueryTestExecutionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewQueryTestExecutionsParams() *QueryTestExecutionsParams {
	return &QueryTestExecutionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewQueryTestExecutionsParamsWithTimeout creates a new QueryTestExecutionsParams object
// with the ability to set a timeout on a request.
func NewQueryTestExecutionsParamsWithTimeout(timeout time.Duration) *QueryTestExecutionsParams {
	return &QueryTestExecutionsParams{
		timeout: timeout,
	}
}

// NewQueryTestExecutionsParamsWithContext creates a new QueryTestExecutionsParams object
// with the ability to set a context for a request.
func NewQueryTestExecutionsParamsWithContext(ctx context.Context) *QueryTestExecutionsParams {
	return &QueryTestExecutionsParams{
		Context: ctx,
	}
}

// NewQueryTestExecutionsParamsWithHTTPClient creates a new QueryTestExecutionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewQueryTestExecutionsParamsWithHTTPClient(client *http.Client) *QueryTestExecutionsParams {
	return &QueryTestExecutionsParams{
		HTTPClient: client,
	}
}

/*
QueryTestExecutionsParams contains all the parameters to send to the API endpoint

	for the query test executions operation.

	Typically these are written to a http.Request.
*/
type QueryTestExecutionsParams struct {

	/* ClusterName.

	   Cluster name
	*/
	ClusterName *string

	/* Cursor.

	   Start sending results from this cursor
	*/
	Cursor *string

	/* ExecutionPhase.

	   Test execution phase
	*/
	ExecutionPhase *string

	/* From.

	   Filter results starting from this time
	*/
	From *string

	/* GroupBy.

	   Group results by entity (so far, only tests is supported)
	*/
	GroupBy *string

	/* IsAutoDiff.

	   Only include auto diff executions
	*/
	IsAutoDiff *string

	/* OrderDir.

	   Sorting direction
	*/
	OrderDir *string

	/* OrgName.

	   Signadot Org name
	*/
	OrgName string

	/* PageSize.

	   Number of rows to be included in the response
	*/
	PageSize *string

	/* SkipDeletedTests.

	   Do not include executions from deleted tests
	*/
	SkipDeletedTests *string

	/* TargetRevision.

	   Revision of the target routing context
	*/
	TargetRevision *string

	/* TargetRouteGroupName.

	   Target route group name
	*/
	TargetRouteGroupName *string

	/* TargetSandboxName.

	   Target sandbox name
	*/
	TargetSandboxName *string

	/* TestName.

	   Test name
	*/
	TestName *string

	/* To.

	   Filter results until this time
	*/
	To *string

	/* TriggerName.

	   Trigger name
	*/
	TriggerName *string

	/* TriggerWorkload.

	   Trigger workload in JSON format
	*/
	TriggerWorkload *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the query test executions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryTestExecutionsParams) WithDefaults() *QueryTestExecutionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the query test executions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryTestExecutionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the query test executions params
func (o *QueryTestExecutionsParams) WithTimeout(timeout time.Duration) *QueryTestExecutionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query test executions params
func (o *QueryTestExecutionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query test executions params
func (o *QueryTestExecutionsParams) WithContext(ctx context.Context) *QueryTestExecutionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query test executions params
func (o *QueryTestExecutionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query test executions params
func (o *QueryTestExecutionsParams) WithHTTPClient(client *http.Client) *QueryTestExecutionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query test executions params
func (o *QueryTestExecutionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterName adds the clusterName to the query test executions params
func (o *QueryTestExecutionsParams) WithClusterName(clusterName *string) *QueryTestExecutionsParams {
	o.SetClusterName(clusterName)
	return o
}

// SetClusterName adds the clusterName to the query test executions params
func (o *QueryTestExecutionsParams) SetClusterName(clusterName *string) {
	o.ClusterName = clusterName
}

// WithCursor adds the cursor to the query test executions params
func (o *QueryTestExecutionsParams) WithCursor(cursor *string) *QueryTestExecutionsParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the query test executions params
func (o *QueryTestExecutionsParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithExecutionPhase adds the executionPhase to the query test executions params
func (o *QueryTestExecutionsParams) WithExecutionPhase(executionPhase *string) *QueryTestExecutionsParams {
	o.SetExecutionPhase(executionPhase)
	return o
}

// SetExecutionPhase adds the executionPhase to the query test executions params
func (o *QueryTestExecutionsParams) SetExecutionPhase(executionPhase *string) {
	o.ExecutionPhase = executionPhase
}

// WithFrom adds the from to the query test executions params
func (o *QueryTestExecutionsParams) WithFrom(from *string) *QueryTestExecutionsParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the query test executions params
func (o *QueryTestExecutionsParams) SetFrom(from *string) {
	o.From = from
}

// WithGroupBy adds the groupBy to the query test executions params
func (o *QueryTestExecutionsParams) WithGroupBy(groupBy *string) *QueryTestExecutionsParams {
	o.SetGroupBy(groupBy)
	return o
}

// SetGroupBy adds the groupBy to the query test executions params
func (o *QueryTestExecutionsParams) SetGroupBy(groupBy *string) {
	o.GroupBy = groupBy
}

// WithIsAutoDiff adds the isAutoDiff to the query test executions params
func (o *QueryTestExecutionsParams) WithIsAutoDiff(isAutoDiff *string) *QueryTestExecutionsParams {
	o.SetIsAutoDiff(isAutoDiff)
	return o
}

// SetIsAutoDiff adds the isAutoDiff to the query test executions params
func (o *QueryTestExecutionsParams) SetIsAutoDiff(isAutoDiff *string) {
	o.IsAutoDiff = isAutoDiff
}

// WithOrderDir adds the orderDir to the query test executions params
func (o *QueryTestExecutionsParams) WithOrderDir(orderDir *string) *QueryTestExecutionsParams {
	o.SetOrderDir(orderDir)
	return o
}

// SetOrderDir adds the orderDir to the query test executions params
func (o *QueryTestExecutionsParams) SetOrderDir(orderDir *string) {
	o.OrderDir = orderDir
}

// WithOrgName adds the orgName to the query test executions params
func (o *QueryTestExecutionsParams) WithOrgName(orgName string) *QueryTestExecutionsParams {
	o.SetOrgName(orgName)
	return o
}

// SetOrgName adds the orgName to the query test executions params
func (o *QueryTestExecutionsParams) SetOrgName(orgName string) {
	o.OrgName = orgName
}

// WithPageSize adds the pageSize to the query test executions params
func (o *QueryTestExecutionsParams) WithPageSize(pageSize *string) *QueryTestExecutionsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the query test executions params
func (o *QueryTestExecutionsParams) SetPageSize(pageSize *string) {
	o.PageSize = pageSize
}

// WithSkipDeletedTests adds the skipDeletedTests to the query test executions params
func (o *QueryTestExecutionsParams) WithSkipDeletedTests(skipDeletedTests *string) *QueryTestExecutionsParams {
	o.SetSkipDeletedTests(skipDeletedTests)
	return o
}

// SetSkipDeletedTests adds the skipDeletedTests to the query test executions params
func (o *QueryTestExecutionsParams) SetSkipDeletedTests(skipDeletedTests *string) {
	o.SkipDeletedTests = skipDeletedTests
}

// WithTargetRevision adds the targetRevision to the query test executions params
func (o *QueryTestExecutionsParams) WithTargetRevision(targetRevision *string) *QueryTestExecutionsParams {
	o.SetTargetRevision(targetRevision)
	return o
}

// SetTargetRevision adds the targetRevision to the query test executions params
func (o *QueryTestExecutionsParams) SetTargetRevision(targetRevision *string) {
	o.TargetRevision = targetRevision
}

// WithTargetRouteGroupName adds the targetRouteGroupName to the query test executions params
func (o *QueryTestExecutionsParams) WithTargetRouteGroupName(targetRouteGroupName *string) *QueryTestExecutionsParams {
	o.SetTargetRouteGroupName(targetRouteGroupName)
	return o
}

// SetTargetRouteGroupName adds the targetRouteGroupName to the query test executions params
func (o *QueryTestExecutionsParams) SetTargetRouteGroupName(targetRouteGroupName *string) {
	o.TargetRouteGroupName = targetRouteGroupName
}

// WithTargetSandboxName adds the targetSandboxName to the query test executions params
func (o *QueryTestExecutionsParams) WithTargetSandboxName(targetSandboxName *string) *QueryTestExecutionsParams {
	o.SetTargetSandboxName(targetSandboxName)
	return o
}

// SetTargetSandboxName adds the targetSandboxName to the query test executions params
func (o *QueryTestExecutionsParams) SetTargetSandboxName(targetSandboxName *string) {
	o.TargetSandboxName = targetSandboxName
}

// WithTestName adds the testName to the query test executions params
func (o *QueryTestExecutionsParams) WithTestName(testName *string) *QueryTestExecutionsParams {
	o.SetTestName(testName)
	return o
}

// SetTestName adds the testName to the query test executions params
func (o *QueryTestExecutionsParams) SetTestName(testName *string) {
	o.TestName = testName
}

// WithTo adds the to to the query test executions params
func (o *QueryTestExecutionsParams) WithTo(to *string) *QueryTestExecutionsParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the query test executions params
func (o *QueryTestExecutionsParams) SetTo(to *string) {
	o.To = to
}

// WithTriggerName adds the triggerName to the query test executions params
func (o *QueryTestExecutionsParams) WithTriggerName(triggerName *string) *QueryTestExecutionsParams {
	o.SetTriggerName(triggerName)
	return o
}

// SetTriggerName adds the triggerName to the query test executions params
func (o *QueryTestExecutionsParams) SetTriggerName(triggerName *string) {
	o.TriggerName = triggerName
}

// WithTriggerWorkload adds the triggerWorkload to the query test executions params
func (o *QueryTestExecutionsParams) WithTriggerWorkload(triggerWorkload *string) *QueryTestExecutionsParams {
	o.SetTriggerWorkload(triggerWorkload)
	return o
}

// SetTriggerWorkload adds the triggerWorkload to the query test executions params
func (o *QueryTestExecutionsParams) SetTriggerWorkload(triggerWorkload *string) {
	o.TriggerWorkload = triggerWorkload
}

// WriteToRequest writes these params to a swagger request
func (o *QueryTestExecutionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClusterName != nil {

		// query param clusterName
		var qrClusterName string

		if o.ClusterName != nil {
			qrClusterName = *o.ClusterName
		}
		qClusterName := qrClusterName
		if qClusterName != "" {

			if err := r.SetQueryParam("clusterName", qClusterName); err != nil {
				return err
			}
		}
	}

	if o.Cursor != nil {

		// query param cursor
		var qrCursor string

		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {

			if err := r.SetQueryParam("cursor", qCursor); err != nil {
				return err
			}
		}
	}

	if o.ExecutionPhase != nil {

		// query param executionPhase
		var qrExecutionPhase string

		if o.ExecutionPhase != nil {
			qrExecutionPhase = *o.ExecutionPhase
		}
		qExecutionPhase := qrExecutionPhase
		if qExecutionPhase != "" {

			if err := r.SetQueryParam("executionPhase", qExecutionPhase); err != nil {
				return err
			}
		}
	}

	if o.From != nil {

		// query param from
		var qrFrom string

		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := qrFrom
		if qFrom != "" {

			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}
	}

	if o.GroupBy != nil {

		// query param groupBy
		var qrGroupBy string

		if o.GroupBy != nil {
			qrGroupBy = *o.GroupBy
		}
		qGroupBy := qrGroupBy
		if qGroupBy != "" {

			if err := r.SetQueryParam("groupBy", qGroupBy); err != nil {
				return err
			}
		}
	}

	if o.IsAutoDiff != nil {

		// query param isAutoDiff
		var qrIsAutoDiff string

		if o.IsAutoDiff != nil {
			qrIsAutoDiff = *o.IsAutoDiff
		}
		qIsAutoDiff := qrIsAutoDiff
		if qIsAutoDiff != "" {

			if err := r.SetQueryParam("isAutoDiff", qIsAutoDiff); err != nil {
				return err
			}
		}
	}

	if o.OrderDir != nil {

		// query param orderDir
		var qrOrderDir string

		if o.OrderDir != nil {
			qrOrderDir = *o.OrderDir
		}
		qOrderDir := qrOrderDir
		if qOrderDir != "" {

			if err := r.SetQueryParam("orderDir", qOrderDir); err != nil {
				return err
			}
		}
	}

	// path param orgName
	if err := r.SetPathParam("orgName", o.OrgName); err != nil {
		return err
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize string

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := qrPageSize
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.SkipDeletedTests != nil {

		// query param skipDeletedTests
		var qrSkipDeletedTests string

		if o.SkipDeletedTests != nil {
			qrSkipDeletedTests = *o.SkipDeletedTests
		}
		qSkipDeletedTests := qrSkipDeletedTests
		if qSkipDeletedTests != "" {

			if err := r.SetQueryParam("skipDeletedTests", qSkipDeletedTests); err != nil {
				return err
			}
		}
	}

	if o.TargetRevision != nil {

		// query param targetRevision
		var qrTargetRevision string

		if o.TargetRevision != nil {
			qrTargetRevision = *o.TargetRevision
		}
		qTargetRevision := qrTargetRevision
		if qTargetRevision != "" {

			if err := r.SetQueryParam("targetRevision", qTargetRevision); err != nil {
				return err
			}
		}
	}

	if o.TargetRouteGroupName != nil {

		// query param targetRouteGroupName
		var qrTargetRouteGroupName string

		if o.TargetRouteGroupName != nil {
			qrTargetRouteGroupName = *o.TargetRouteGroupName
		}
		qTargetRouteGroupName := qrTargetRouteGroupName
		if qTargetRouteGroupName != "" {

			if err := r.SetQueryParam("targetRouteGroupName", qTargetRouteGroupName); err != nil {
				return err
			}
		}
	}

	if o.TargetSandboxName != nil {

		// query param targetSandboxName
		var qrTargetSandboxName string

		if o.TargetSandboxName != nil {
			qrTargetSandboxName = *o.TargetSandboxName
		}
		qTargetSandboxName := qrTargetSandboxName
		if qTargetSandboxName != "" {

			if err := r.SetQueryParam("targetSandboxName", qTargetSandboxName); err != nil {
				return err
			}
		}
	}

	if o.TestName != nil {

		// query param testName
		var qrTestName string

		if o.TestName != nil {
			qrTestName = *o.TestName
		}
		qTestName := qrTestName
		if qTestName != "" {

			if err := r.SetQueryParam("testName", qTestName); err != nil {
				return err
			}
		}
	}

	if o.To != nil {

		// query param to
		var qrTo string

		if o.To != nil {
			qrTo = *o.To
		}
		qTo := qrTo
		if qTo != "" {

			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}
	}

	if o.TriggerName != nil {

		// query param triggerName
		var qrTriggerName string

		if o.TriggerName != nil {
			qrTriggerName = *o.TriggerName
		}
		qTriggerName := qrTriggerName
		if qTriggerName != "" {

			if err := r.SetQueryParam("triggerName", qTriggerName); err != nil {
				return err
			}
		}
	}

	if o.TriggerWorkload != nil {

		// query param triggerWorkload
		var qrTriggerWorkload string

		if o.TriggerWorkload != nil {
			qrTriggerWorkload = *o.TriggerWorkload
		}
		qTriggerWorkload := qrTriggerWorkload
		if qTriggerWorkload != "" {

			if err := r.SetQueryParam("triggerWorkload", qTriggerWorkload); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
