// Code generated by go-swagger; DO NOT EDIT.

package test_executions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewTestExecutionTrafficDiffFindingsParams creates a new TestExecutionTrafficDiffFindingsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewTestExecutionTrafficDiffFindingsParams() *TestExecutionTrafficDiffFindingsParams {
	return &TestExecutionTrafficDiffFindingsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewTestExecutionTrafficDiffFindingsParamsWithTimeout creates a new TestExecutionTrafficDiffFindingsParams object
// with the ability to set a timeout on a request.
func NewTestExecutionTrafficDiffFindingsParamsWithTimeout(timeout time.Duration) *TestExecutionTrafficDiffFindingsParams {
	return &TestExecutionTrafficDiffFindingsParams{
		timeout: timeout,
	}
}

// NewTestExecutionTrafficDiffFindingsParamsWithContext creates a new TestExecutionTrafficDiffFindingsParams object
// with the ability to set a context for a request.
func NewTestExecutionTrafficDiffFindingsParamsWithContext(ctx context.Context) *TestExecutionTrafficDiffFindingsParams {
	return &TestExecutionTrafficDiffFindingsParams{
		Context: ctx,
	}
}

// NewTestExecutionTrafficDiffFindingsParamsWithHTTPClient creates a new TestExecutionTrafficDiffFindingsParams object
// with the ability to set a custom HTTPClient for a request.
func NewTestExecutionTrafficDiffFindingsParamsWithHTTPClient(client *http.Client) *TestExecutionTrafficDiffFindingsParams {
	return &TestExecutionTrafficDiffFindingsParams{
		HTTPClient: client,
	}
}

/*
TestExecutionTrafficDiffFindingsParams contains all the parameters to send to the API endpoint

	for the test execution traffic diff findings operation.

	Typically these are written to a http.Request.
*/
type TestExecutionTrafficDiffFindingsParams struct {

	/* Category.

	   Category
	*/
	Category *string

	/* DiffContext.

	   Context
	*/
	DiffContext *string

	/* ExecutionName.

	   Test Execution Name
	*/
	ExecutionName string

	/* MaxFindings.

	   Max Findings
	*/
	MaxFindings *string

	/* OrgName.

	   Signadot Org Name
	*/
	OrgName string

	/* TestName.

	   Test Name
	*/
	TestName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the test execution traffic diff findings params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TestExecutionTrafficDiffFindingsParams) WithDefaults() *TestExecutionTrafficDiffFindingsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the test execution traffic diff findings params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TestExecutionTrafficDiffFindingsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the test execution traffic diff findings params
func (o *TestExecutionTrafficDiffFindingsParams) WithTimeout(timeout time.Duration) *TestExecutionTrafficDiffFindingsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the test execution traffic diff findings params
func (o *TestExecutionTrafficDiffFindingsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the test execution traffic diff findings params
func (o *TestExecutionTrafficDiffFindingsParams) WithContext(ctx context.Context) *TestExecutionTrafficDiffFindingsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the test execution traffic diff findings params
func (o *TestExecutionTrafficDiffFindingsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the test execution traffic diff findings params
func (o *TestExecutionTrafficDiffFindingsParams) WithHTTPClient(client *http.Client) *TestExecutionTrafficDiffFindingsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the test execution traffic diff findings params
func (o *TestExecutionTrafficDiffFindingsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCategory adds the category to the test execution traffic diff findings params
func (o *TestExecutionTrafficDiffFindingsParams) WithCategory(category *string) *TestExecutionTrafficDiffFindingsParams {
	o.SetCategory(category)
	return o
}

// SetCategory adds the category to the test execution traffic diff findings params
func (o *TestExecutionTrafficDiffFindingsParams) SetCategory(category *string) {
	o.Category = category
}

// WithDiffContext adds the diffContext to the test execution traffic diff findings params
func (o *TestExecutionTrafficDiffFindingsParams) WithDiffContext(diffContext *string) *TestExecutionTrafficDiffFindingsParams {
	o.SetDiffContext(diffContext)
	return o
}

// SetDiffContext adds the diffContext to the test execution traffic diff findings params
func (o *TestExecutionTrafficDiffFindingsParams) SetDiffContext(diffContext *string) {
	o.DiffContext = diffContext
}

// WithExecutionName adds the executionName to the test execution traffic diff findings params
func (o *TestExecutionTrafficDiffFindingsParams) WithExecutionName(executionName string) *TestExecutionTrafficDiffFindingsParams {
	o.SetExecutionName(executionName)
	return o
}

// SetExecutionName adds the executionName to the test execution traffic diff findings params
func (o *TestExecutionTrafficDiffFindingsParams) SetExecutionName(executionName string) {
	o.ExecutionName = executionName
}

// WithMaxFindings adds the maxFindings to the test execution traffic diff findings params
func (o *TestExecutionTrafficDiffFindingsParams) WithMaxFindings(maxFindings *string) *TestExecutionTrafficDiffFindingsParams {
	o.SetMaxFindings(maxFindings)
	return o
}

// SetMaxFindings adds the maxFindings to the test execution traffic diff findings params
func (o *TestExecutionTrafficDiffFindingsParams) SetMaxFindings(maxFindings *string) {
	o.MaxFindings = maxFindings
}

// WithOrgName adds the orgName to the test execution traffic diff findings params
func (o *TestExecutionTrafficDiffFindingsParams) WithOrgName(orgName string) *TestExecutionTrafficDiffFindingsParams {
	o.SetOrgName(orgName)
	return o
}

// SetOrgName adds the orgName to the test execution traffic diff findings params
func (o *TestExecutionTrafficDiffFindingsParams) SetOrgName(orgName string) {
	o.OrgName = orgName
}

// WithTestName adds the testName to the test execution traffic diff findings params
func (o *TestExecutionTrafficDiffFindingsParams) WithTestName(testName string) *TestExecutionTrafficDiffFindingsParams {
	o.SetTestName(testName)
	return o
}

// SetTestName adds the testName to the test execution traffic diff findings params
func (o *TestExecutionTrafficDiffFindingsParams) SetTestName(testName string) {
	o.TestName = testName
}

// WriteToRequest writes these params to a swagger request
func (o *TestExecutionTrafficDiffFindingsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Category != nil {

		// query param category
		var qrCategory string

		if o.Category != nil {
			qrCategory = *o.Category
		}
		qCategory := qrCategory
		if qCategory != "" {

			if err := r.SetQueryParam("category", qCategory); err != nil {
				return err
			}
		}
	}

	if o.DiffContext != nil {

		// query param diffContext
		var qrDiffContext string

		if o.DiffContext != nil {
			qrDiffContext = *o.DiffContext
		}
		qDiffContext := qrDiffContext
		if qDiffContext != "" {

			if err := r.SetQueryParam("diffContext", qDiffContext); err != nil {
				return err
			}
		}
	}

	// path param executionName
	if err := r.SetPathParam("executionName", o.ExecutionName); err != nil {
		return err
	}

	if o.MaxFindings != nil {

		// query param maxFindings
		var qrMaxFindings string

		if o.MaxFindings != nil {
			qrMaxFindings = *o.MaxFindings
		}
		qMaxFindings := qrMaxFindings
		if qMaxFindings != "" {

			if err := r.SetQueryParam("maxFindings", qMaxFindings); err != nil {
				return err
			}
		}
	}

	// path param orgName
	if err := r.SetPathParam("orgName", o.OrgName); err != nil {
		return err
	}

	// path param testName
	if err := r.SetPathParam("testName", o.TestName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
