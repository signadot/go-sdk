// Code generated by go-swagger; DO NOT EDIT.

package test_executions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/signadot/go-sdk/models"
)

// GetTestExecutionReader is a Reader for the GetTestExecution structure.
type GetTestExecutionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTestExecutionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTestExecutionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTestExecutionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetTestExecutionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewGetTestExecutionBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /orgs/{orgName}/tests/executions/{executionID}] get-test-execution", response, response.Code())
	}
}

// NewGetTestExecutionOK creates a GetTestExecutionOK with default headers values
func NewGetTestExecutionOK() *GetTestExecutionOK {
	return &GetTestExecutionOK{}
}

/*
GetTestExecutionOK describes a response with status code 200, with default header values.

OK
*/
type GetTestExecutionOK struct {
	Payload *models.TestExecution
}

// IsSuccess returns true when this get test execution o k response has a 2xx status code
func (o *GetTestExecutionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get test execution o k response has a 3xx status code
func (o *GetTestExecutionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get test execution o k response has a 4xx status code
func (o *GetTestExecutionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get test execution o k response has a 5xx status code
func (o *GetTestExecutionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get test execution o k response a status code equal to that given
func (o *GetTestExecutionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get test execution o k response
func (o *GetTestExecutionOK) Code() int {
	return 200
}

func (o *GetTestExecutionOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/tests/executions/{executionID}][%d] getTestExecutionOK %s", 200, payload)
}

func (o *GetTestExecutionOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/tests/executions/{executionID}][%d] getTestExecutionOK %s", 200, payload)
}

func (o *GetTestExecutionOK) GetPayload() *models.TestExecution {
	return o.Payload
}

func (o *GetTestExecutionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TestExecution)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTestExecutionBadRequest creates a GetTestExecutionBadRequest with default headers values
func NewGetTestExecutionBadRequest() *GetTestExecutionBadRequest {
	return &GetTestExecutionBadRequest{}
}

/*
GetTestExecutionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetTestExecutionBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get test execution bad request response has a 2xx status code
func (o *GetTestExecutionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get test execution bad request response has a 3xx status code
func (o *GetTestExecutionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get test execution bad request response has a 4xx status code
func (o *GetTestExecutionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get test execution bad request response has a 5xx status code
func (o *GetTestExecutionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get test execution bad request response a status code equal to that given
func (o *GetTestExecutionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get test execution bad request response
func (o *GetTestExecutionBadRequest) Code() int {
	return 400
}

func (o *GetTestExecutionBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/tests/executions/{executionID}][%d] getTestExecutionBadRequest %s", 400, payload)
}

func (o *GetTestExecutionBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/tests/executions/{executionID}][%d] getTestExecutionBadRequest %s", 400, payload)
}

func (o *GetTestExecutionBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetTestExecutionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTestExecutionUnauthorized creates a GetTestExecutionUnauthorized with default headers values
func NewGetTestExecutionUnauthorized() *GetTestExecutionUnauthorized {
	return &GetTestExecutionUnauthorized{}
}

/*
GetTestExecutionUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetTestExecutionUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get test execution unauthorized response has a 2xx status code
func (o *GetTestExecutionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get test execution unauthorized response has a 3xx status code
func (o *GetTestExecutionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get test execution unauthorized response has a 4xx status code
func (o *GetTestExecutionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get test execution unauthorized response has a 5xx status code
func (o *GetTestExecutionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get test execution unauthorized response a status code equal to that given
func (o *GetTestExecutionUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get test execution unauthorized response
func (o *GetTestExecutionUnauthorized) Code() int {
	return 401
}

func (o *GetTestExecutionUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/tests/executions/{executionID}][%d] getTestExecutionUnauthorized %s", 401, payload)
}

func (o *GetTestExecutionUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/tests/executions/{executionID}][%d] getTestExecutionUnauthorized %s", 401, payload)
}

func (o *GetTestExecutionUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetTestExecutionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTestExecutionBadGateway creates a GetTestExecutionBadGateway with default headers values
func NewGetTestExecutionBadGateway() *GetTestExecutionBadGateway {
	return &GetTestExecutionBadGateway{}
}

/*
GetTestExecutionBadGateway describes a response with status code 502, with default header values.

Bad Gateway
*/
type GetTestExecutionBadGateway struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get test execution bad gateway response has a 2xx status code
func (o *GetTestExecutionBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get test execution bad gateway response has a 3xx status code
func (o *GetTestExecutionBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get test execution bad gateway response has a 4xx status code
func (o *GetTestExecutionBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this get test execution bad gateway response has a 5xx status code
func (o *GetTestExecutionBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this get test execution bad gateway response a status code equal to that given
func (o *GetTestExecutionBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the get test execution bad gateway response
func (o *GetTestExecutionBadGateway) Code() int {
	return 502
}

func (o *GetTestExecutionBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/tests/executions/{executionID}][%d] getTestExecutionBadGateway %s", 502, payload)
}

func (o *GetTestExecutionBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/tests/executions/{executionID}][%d] getTestExecutionBadGateway %s", 502, payload)
}

func (o *GetTestExecutionBadGateway) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetTestExecutionBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
