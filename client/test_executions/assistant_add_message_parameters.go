// Code generated by go-swagger; DO NOT EDIT.

package test_executions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/signadot/go-sdk/models"
)

// NewAssistantAddMessageParams creates a new AssistantAddMessageParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAssistantAddMessageParams() *AssistantAddMessageParams {
	return &AssistantAddMessageParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAssistantAddMessageParamsWithTimeout creates a new AssistantAddMessageParams object
// with the ability to set a timeout on a request.
func NewAssistantAddMessageParamsWithTimeout(timeout time.Duration) *AssistantAddMessageParams {
	return &AssistantAddMessageParams{
		timeout: timeout,
	}
}

// NewAssistantAddMessageParamsWithContext creates a new AssistantAddMessageParams object
// with the ability to set a context for a request.
func NewAssistantAddMessageParamsWithContext(ctx context.Context) *AssistantAddMessageParams {
	return &AssistantAddMessageParams{
		Context: ctx,
	}
}

// NewAssistantAddMessageParamsWithHTTPClient creates a new AssistantAddMessageParams object
// with the ability to set a custom HTTPClient for a request.
func NewAssistantAddMessageParamsWithHTTPClient(client *http.Client) *AssistantAddMessageParams {
	return &AssistantAddMessageParams{
		HTTPClient: client,
	}
}

/*
AssistantAddMessageParams contains all the parameters to send to the API endpoint

	for the assistant add message operation.

	Typically these are written to a http.Request.
*/
type AssistantAddMessageParams struct {

	/* Data.

	   Message content
	*/
	Data *models.AssistantsMessageContent

	/* OrgName.

	   Signadot Org Name
	*/
	OrgName string

	/* ThreadID.

	   Thread ID
	*/
	ThreadID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the assistant add message params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AssistantAddMessageParams) WithDefaults() *AssistantAddMessageParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the assistant add message params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AssistantAddMessageParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the assistant add message params
func (o *AssistantAddMessageParams) WithTimeout(timeout time.Duration) *AssistantAddMessageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the assistant add message params
func (o *AssistantAddMessageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the assistant add message params
func (o *AssistantAddMessageParams) WithContext(ctx context.Context) *AssistantAddMessageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the assistant add message params
func (o *AssistantAddMessageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the assistant add message params
func (o *AssistantAddMessageParams) WithHTTPClient(client *http.Client) *AssistantAddMessageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the assistant add message params
func (o *AssistantAddMessageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithData adds the data to the assistant add message params
func (o *AssistantAddMessageParams) WithData(data *models.AssistantsMessageContent) *AssistantAddMessageParams {
	o.SetData(data)
	return o
}

// SetData adds the data to the assistant add message params
func (o *AssistantAddMessageParams) SetData(data *models.AssistantsMessageContent) {
	o.Data = data
}

// WithOrgName adds the orgName to the assistant add message params
func (o *AssistantAddMessageParams) WithOrgName(orgName string) *AssistantAddMessageParams {
	o.SetOrgName(orgName)
	return o
}

// SetOrgName adds the orgName to the assistant add message params
func (o *AssistantAddMessageParams) SetOrgName(orgName string) {
	o.OrgName = orgName
}

// WithThreadID adds the threadID to the assistant add message params
func (o *AssistantAddMessageParams) WithThreadID(threadID string) *AssistantAddMessageParams {
	o.SetThreadID(threadID)
	return o
}

// SetThreadID adds the threadId to the assistant add message params
func (o *AssistantAddMessageParams) SetThreadID(threadID string) {
	o.ThreadID = threadID
}

// WriteToRequest writes these params to a swagger request
func (o *AssistantAddMessageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Data != nil {
		if err := r.SetBodyParam(o.Data); err != nil {
			return err
		}
	}

	// path param orgName
	if err := r.SetPathParam("orgName", o.OrgName); err != nil {
		return err
	}

	// path param threadID
	if err := r.SetPathParam("threadID", o.ThreadID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
