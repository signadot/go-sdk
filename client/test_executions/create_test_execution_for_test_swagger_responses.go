// Code generated by go-swagger; DO NOT EDIT.

package test_executions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/signadot/go-sdk/models"
)

// CreateTestExecutionForTestReader is a Reader for the CreateTestExecutionForTest structure.
type CreateTestExecutionForTestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateTestExecutionForTestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateTestExecutionForTestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateTestExecutionForTestBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateTestExecutionForTestUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewCreateTestExecutionForTestBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /orgs/{orgName}/tests/{testName}/executions/] create-test-execution-for-test", response, response.Code())
	}
}

// NewCreateTestExecutionForTestOK creates a CreateTestExecutionForTestOK with default headers values
func NewCreateTestExecutionForTestOK() *CreateTestExecutionForTestOK {
	return &CreateTestExecutionForTestOK{}
}

/*
CreateTestExecutionForTestOK describes a response with status code 200, with default header values.

OK
*/
type CreateTestExecutionForTestOK struct {
	Payload *models.TestExecution
}

// IsSuccess returns true when this create test execution for test o k response has a 2xx status code
func (o *CreateTestExecutionForTestOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create test execution for test o k response has a 3xx status code
func (o *CreateTestExecutionForTestOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create test execution for test o k response has a 4xx status code
func (o *CreateTestExecutionForTestOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create test execution for test o k response has a 5xx status code
func (o *CreateTestExecutionForTestOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create test execution for test o k response a status code equal to that given
func (o *CreateTestExecutionForTestOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create test execution for test o k response
func (o *CreateTestExecutionForTestOK) Code() int {
	return 200
}

func (o *CreateTestExecutionForTestOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /orgs/{orgName}/tests/{testName}/executions/][%d] createTestExecutionForTestOK %s", 200, payload)
}

func (o *CreateTestExecutionForTestOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /orgs/{orgName}/tests/{testName}/executions/][%d] createTestExecutionForTestOK %s", 200, payload)
}

func (o *CreateTestExecutionForTestOK) GetPayload() *models.TestExecution {
	return o.Payload
}

func (o *CreateTestExecutionForTestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TestExecution)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTestExecutionForTestBadRequest creates a CreateTestExecutionForTestBadRequest with default headers values
func NewCreateTestExecutionForTestBadRequest() *CreateTestExecutionForTestBadRequest {
	return &CreateTestExecutionForTestBadRequest{}
}

/*
CreateTestExecutionForTestBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateTestExecutionForTestBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this create test execution for test bad request response has a 2xx status code
func (o *CreateTestExecutionForTestBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create test execution for test bad request response has a 3xx status code
func (o *CreateTestExecutionForTestBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create test execution for test bad request response has a 4xx status code
func (o *CreateTestExecutionForTestBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create test execution for test bad request response has a 5xx status code
func (o *CreateTestExecutionForTestBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create test execution for test bad request response a status code equal to that given
func (o *CreateTestExecutionForTestBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create test execution for test bad request response
func (o *CreateTestExecutionForTestBadRequest) Code() int {
	return 400
}

func (o *CreateTestExecutionForTestBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /orgs/{orgName}/tests/{testName}/executions/][%d] createTestExecutionForTestBadRequest %s", 400, payload)
}

func (o *CreateTestExecutionForTestBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /orgs/{orgName}/tests/{testName}/executions/][%d] createTestExecutionForTestBadRequest %s", 400, payload)
}

func (o *CreateTestExecutionForTestBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateTestExecutionForTestBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTestExecutionForTestUnauthorized creates a CreateTestExecutionForTestUnauthorized with default headers values
func NewCreateTestExecutionForTestUnauthorized() *CreateTestExecutionForTestUnauthorized {
	return &CreateTestExecutionForTestUnauthorized{}
}

/*
CreateTestExecutionForTestUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CreateTestExecutionForTestUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this create test execution for test unauthorized response has a 2xx status code
func (o *CreateTestExecutionForTestUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create test execution for test unauthorized response has a 3xx status code
func (o *CreateTestExecutionForTestUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create test execution for test unauthorized response has a 4xx status code
func (o *CreateTestExecutionForTestUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create test execution for test unauthorized response has a 5xx status code
func (o *CreateTestExecutionForTestUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create test execution for test unauthorized response a status code equal to that given
func (o *CreateTestExecutionForTestUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create test execution for test unauthorized response
func (o *CreateTestExecutionForTestUnauthorized) Code() int {
	return 401
}

func (o *CreateTestExecutionForTestUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /orgs/{orgName}/tests/{testName}/executions/][%d] createTestExecutionForTestUnauthorized %s", 401, payload)
}

func (o *CreateTestExecutionForTestUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /orgs/{orgName}/tests/{testName}/executions/][%d] createTestExecutionForTestUnauthorized %s", 401, payload)
}

func (o *CreateTestExecutionForTestUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateTestExecutionForTestUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTestExecutionForTestBadGateway creates a CreateTestExecutionForTestBadGateway with default headers values
func NewCreateTestExecutionForTestBadGateway() *CreateTestExecutionForTestBadGateway {
	return &CreateTestExecutionForTestBadGateway{}
}

/*
CreateTestExecutionForTestBadGateway describes a response with status code 502, with default header values.

Bad Gateway
*/
type CreateTestExecutionForTestBadGateway struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this create test execution for test bad gateway response has a 2xx status code
func (o *CreateTestExecutionForTestBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create test execution for test bad gateway response has a 3xx status code
func (o *CreateTestExecutionForTestBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create test execution for test bad gateway response has a 4xx status code
func (o *CreateTestExecutionForTestBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this create test execution for test bad gateway response has a 5xx status code
func (o *CreateTestExecutionForTestBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this create test execution for test bad gateway response a status code equal to that given
func (o *CreateTestExecutionForTestBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the create test execution for test bad gateway response
func (o *CreateTestExecutionForTestBadGateway) Code() int {
	return 502
}

func (o *CreateTestExecutionForTestBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /orgs/{orgName}/tests/{testName}/executions/][%d] createTestExecutionForTestBadGateway %s", 502, payload)
}

func (o *CreateTestExecutionForTestBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /orgs/{orgName}/tests/{testName}/executions/][%d] createTestExecutionForTestBadGateway %s", 502, payload)
}

func (o *CreateTestExecutionForTestBadGateway) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateTestExecutionForTestBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
