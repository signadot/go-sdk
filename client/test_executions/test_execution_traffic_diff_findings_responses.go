// Code generated by go-swagger; DO NOT EDIT.

package test_executions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/signadot/go-sdk/models"
)

// TestExecutionTrafficDiffFindingsReader is a Reader for the TestExecutionTrafficDiffFindings structure.
type TestExecutionTrafficDiffFindingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TestExecutionTrafficDiffFindingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTestExecutionTrafficDiffFindingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTestExecutionTrafficDiffFindingsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewTestExecutionTrafficDiffFindingsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewTestExecutionTrafficDiffFindingsBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /orgs/{orgName}/tests/executions/{executionID}/traffic-diff-findings] test-execution-traffic-diff-findings", response, response.Code())
	}
}

// NewTestExecutionTrafficDiffFindingsOK creates a TestExecutionTrafficDiffFindingsOK with default headers values
func NewTestExecutionTrafficDiffFindingsOK() *TestExecutionTrafficDiffFindingsOK {
	return &TestExecutionTrafficDiffFindingsOK{}
}

/*
TestExecutionTrafficDiffFindingsOK describes a response with status code 200, with default header values.

OK
*/
type TestExecutionTrafficDiffFindingsOK struct {
	Payload *models.TrafficDiffResult
}

// IsSuccess returns true when this test execution traffic diff findings o k response has a 2xx status code
func (o *TestExecutionTrafficDiffFindingsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this test execution traffic diff findings o k response has a 3xx status code
func (o *TestExecutionTrafficDiffFindingsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test execution traffic diff findings o k response has a 4xx status code
func (o *TestExecutionTrafficDiffFindingsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this test execution traffic diff findings o k response has a 5xx status code
func (o *TestExecutionTrafficDiffFindingsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this test execution traffic diff findings o k response a status code equal to that given
func (o *TestExecutionTrafficDiffFindingsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the test execution traffic diff findings o k response
func (o *TestExecutionTrafficDiffFindingsOK) Code() int {
	return 200
}

func (o *TestExecutionTrafficDiffFindingsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/tests/executions/{executionID}/traffic-diff-findings][%d] testExecutionTrafficDiffFindingsOK %s", 200, payload)
}

func (o *TestExecutionTrafficDiffFindingsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/tests/executions/{executionID}/traffic-diff-findings][%d] testExecutionTrafficDiffFindingsOK %s", 200, payload)
}

func (o *TestExecutionTrafficDiffFindingsOK) GetPayload() *models.TrafficDiffResult {
	return o.Payload
}

func (o *TestExecutionTrafficDiffFindingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TrafficDiffResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestExecutionTrafficDiffFindingsBadRequest creates a TestExecutionTrafficDiffFindingsBadRequest with default headers values
func NewTestExecutionTrafficDiffFindingsBadRequest() *TestExecutionTrafficDiffFindingsBadRequest {
	return &TestExecutionTrafficDiffFindingsBadRequest{}
}

/*
TestExecutionTrafficDiffFindingsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type TestExecutionTrafficDiffFindingsBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this test execution traffic diff findings bad request response has a 2xx status code
func (o *TestExecutionTrafficDiffFindingsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this test execution traffic diff findings bad request response has a 3xx status code
func (o *TestExecutionTrafficDiffFindingsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test execution traffic diff findings bad request response has a 4xx status code
func (o *TestExecutionTrafficDiffFindingsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this test execution traffic diff findings bad request response has a 5xx status code
func (o *TestExecutionTrafficDiffFindingsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this test execution traffic diff findings bad request response a status code equal to that given
func (o *TestExecutionTrafficDiffFindingsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the test execution traffic diff findings bad request response
func (o *TestExecutionTrafficDiffFindingsBadRequest) Code() int {
	return 400
}

func (o *TestExecutionTrafficDiffFindingsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/tests/executions/{executionID}/traffic-diff-findings][%d] testExecutionTrafficDiffFindingsBadRequest %s", 400, payload)
}

func (o *TestExecutionTrafficDiffFindingsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/tests/executions/{executionID}/traffic-diff-findings][%d] testExecutionTrafficDiffFindingsBadRequest %s", 400, payload)
}

func (o *TestExecutionTrafficDiffFindingsBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *TestExecutionTrafficDiffFindingsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestExecutionTrafficDiffFindingsUnauthorized creates a TestExecutionTrafficDiffFindingsUnauthorized with default headers values
func NewTestExecutionTrafficDiffFindingsUnauthorized() *TestExecutionTrafficDiffFindingsUnauthorized {
	return &TestExecutionTrafficDiffFindingsUnauthorized{}
}

/*
TestExecutionTrafficDiffFindingsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type TestExecutionTrafficDiffFindingsUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this test execution traffic diff findings unauthorized response has a 2xx status code
func (o *TestExecutionTrafficDiffFindingsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this test execution traffic diff findings unauthorized response has a 3xx status code
func (o *TestExecutionTrafficDiffFindingsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test execution traffic diff findings unauthorized response has a 4xx status code
func (o *TestExecutionTrafficDiffFindingsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this test execution traffic diff findings unauthorized response has a 5xx status code
func (o *TestExecutionTrafficDiffFindingsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this test execution traffic diff findings unauthorized response a status code equal to that given
func (o *TestExecutionTrafficDiffFindingsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the test execution traffic diff findings unauthorized response
func (o *TestExecutionTrafficDiffFindingsUnauthorized) Code() int {
	return 401
}

func (o *TestExecutionTrafficDiffFindingsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/tests/executions/{executionID}/traffic-diff-findings][%d] testExecutionTrafficDiffFindingsUnauthorized %s", 401, payload)
}

func (o *TestExecutionTrafficDiffFindingsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/tests/executions/{executionID}/traffic-diff-findings][%d] testExecutionTrafficDiffFindingsUnauthorized %s", 401, payload)
}

func (o *TestExecutionTrafficDiffFindingsUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *TestExecutionTrafficDiffFindingsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestExecutionTrafficDiffFindingsBadGateway creates a TestExecutionTrafficDiffFindingsBadGateway with default headers values
func NewTestExecutionTrafficDiffFindingsBadGateway() *TestExecutionTrafficDiffFindingsBadGateway {
	return &TestExecutionTrafficDiffFindingsBadGateway{}
}

/*
TestExecutionTrafficDiffFindingsBadGateway describes a response with status code 502, with default header values.

Bad Gateway
*/
type TestExecutionTrafficDiffFindingsBadGateway struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this test execution traffic diff findings bad gateway response has a 2xx status code
func (o *TestExecutionTrafficDiffFindingsBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this test execution traffic diff findings bad gateway response has a 3xx status code
func (o *TestExecutionTrafficDiffFindingsBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test execution traffic diff findings bad gateway response has a 4xx status code
func (o *TestExecutionTrafficDiffFindingsBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this test execution traffic diff findings bad gateway response has a 5xx status code
func (o *TestExecutionTrafficDiffFindingsBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this test execution traffic diff findings bad gateway response a status code equal to that given
func (o *TestExecutionTrafficDiffFindingsBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the test execution traffic diff findings bad gateway response
func (o *TestExecutionTrafficDiffFindingsBadGateway) Code() int {
	return 502
}

func (o *TestExecutionTrafficDiffFindingsBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/tests/executions/{executionID}/traffic-diff-findings][%d] testExecutionTrafficDiffFindingsBadGateway %s", 502, payload)
}

func (o *TestExecutionTrafficDiffFindingsBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/tests/executions/{executionID}/traffic-diff-findings][%d] testExecutionTrafficDiffFindingsBadGateway %s", 502, payload)
}

func (o *TestExecutionTrafficDiffFindingsBadGateway) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *TestExecutionTrafficDiffFindingsBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
