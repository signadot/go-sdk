// Code generated by go-swagger; DO NOT EDIT.

package sandboxes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteSandboxParams creates a new DeleteSandboxParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteSandboxParams() *DeleteSandboxParams {
	return &DeleteSandboxParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteSandboxParamsWithTimeout creates a new DeleteSandboxParams object
// with the ability to set a timeout on a request.
func NewDeleteSandboxParamsWithTimeout(timeout time.Duration) *DeleteSandboxParams {
	return &DeleteSandboxParams{
		timeout: timeout,
	}
}

// NewDeleteSandboxParamsWithContext creates a new DeleteSandboxParams object
// with the ability to set a context for a request.
func NewDeleteSandboxParamsWithContext(ctx context.Context) *DeleteSandboxParams {
	return &DeleteSandboxParams{
		Context: ctx,
	}
}

// NewDeleteSandboxParamsWithHTTPClient creates a new DeleteSandboxParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteSandboxParamsWithHTTPClient(client *http.Client) *DeleteSandboxParams {
	return &DeleteSandboxParams{
		HTTPClient: client,
	}
}

/*
DeleteSandboxParams contains all the parameters to send to the API endpoint

	for the delete sandbox operation.

	Typically these are written to a http.Request.
*/
type DeleteSandboxParams struct {

	/* Force.

	   force
	*/
	Force *bool

	/* OrgName.

	   Signadot Org Name
	*/
	OrgName string

	/* SandboxName.

	   Sandbox Name
	*/
	SandboxName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete sandbox params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteSandboxParams) WithDefaults() *DeleteSandboxParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete sandbox params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteSandboxParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete sandbox params
func (o *DeleteSandboxParams) WithTimeout(timeout time.Duration) *DeleteSandboxParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete sandbox params
func (o *DeleteSandboxParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete sandbox params
func (o *DeleteSandboxParams) WithContext(ctx context.Context) *DeleteSandboxParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete sandbox params
func (o *DeleteSandboxParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete sandbox params
func (o *DeleteSandboxParams) WithHTTPClient(client *http.Client) *DeleteSandboxParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete sandbox params
func (o *DeleteSandboxParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithForce adds the force to the delete sandbox params
func (o *DeleteSandboxParams) WithForce(force *bool) *DeleteSandboxParams {
	o.SetForce(force)
	return o
}

// SetForce adds the force to the delete sandbox params
func (o *DeleteSandboxParams) SetForce(force *bool) {
	o.Force = force
}

// WithOrgName adds the orgName to the delete sandbox params
func (o *DeleteSandboxParams) WithOrgName(orgName string) *DeleteSandboxParams {
	o.SetOrgName(orgName)
	return o
}

// SetOrgName adds the orgName to the delete sandbox params
func (o *DeleteSandboxParams) SetOrgName(orgName string) {
	o.OrgName = orgName
}

// WithSandboxName adds the sandboxName to the delete sandbox params
func (o *DeleteSandboxParams) WithSandboxName(sandboxName string) *DeleteSandboxParams {
	o.SetSandboxName(sandboxName)
	return o
}

// SetSandboxName adds the sandboxName to the delete sandbox params
func (o *DeleteSandboxParams) SetSandboxName(sandboxName string) {
	o.SandboxName = sandboxName
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteSandboxParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Force != nil {

		// query param force
		var qrForce bool

		if o.Force != nil {
			qrForce = *o.Force
		}
		qForce := swag.FormatBool(qrForce)
		if qForce != "" {

			if err := r.SetQueryParam("force", qForce); err != nil {
				return err
			}
		}
	}

	// path param orgName
	if err := r.SetPathParam("orgName", o.OrgName); err != nil {
		return err
	}

	// path param sandboxName
	if err := r.SetPathParam("sandboxName", o.SandboxName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
