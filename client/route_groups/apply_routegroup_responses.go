// Code generated by go-swagger; DO NOT EDIT.

package route_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/signadot/go-sdk/models"
)

// ApplyRoutegroupReader is a Reader for the ApplyRoutegroup structure.
type ApplyRoutegroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ApplyRoutegroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewApplyRoutegroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewApplyRoutegroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewApplyRoutegroupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewApplyRoutegroupBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /orgs/{orgName}/routegroups/{routegroupName}] apply-routegroup", response, response.Code())
	}
}

// NewApplyRoutegroupOK creates a ApplyRoutegroupOK with default headers values
func NewApplyRoutegroupOK() *ApplyRoutegroupOK {
	return &ApplyRoutegroupOK{}
}

/* ApplyRoutegroupOK describes a response with status code 200, with default header values.

OK
*/
type ApplyRoutegroupOK struct {
	Payload *models.RouteGroup
}

// IsSuccess returns true when this apply routegroup o k response has a 2xx status code
func (o *ApplyRoutegroupOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this apply routegroup o k response has a 3xx status code
func (o *ApplyRoutegroupOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply routegroup o k response has a 4xx status code
func (o *ApplyRoutegroupOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this apply routegroup o k response has a 5xx status code
func (o *ApplyRoutegroupOK) IsServerError() bool {
	return false
}

// IsCode returns true when this apply routegroup o k response a status code equal to that given
func (o *ApplyRoutegroupOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the apply routegroup o k response
func (o *ApplyRoutegroupOK) Code() int {
	return 200
}

func (o *ApplyRoutegroupOK) Error() string {
	return fmt.Sprintf("[PUT /orgs/{orgName}/routegroups/{routegroupName}][%d] applyRoutegroupOK  %+v", 200, o.Payload)
}

func (o *ApplyRoutegroupOK) String() string {
	return fmt.Sprintf("[PUT /orgs/{orgName}/routegroups/{routegroupName}][%d] applyRoutegroupOK  %+v", 200, o.Payload)
}

func (o *ApplyRoutegroupOK) GetPayload() *models.RouteGroup {
	return o.Payload
}

func (o *ApplyRoutegroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RouteGroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplyRoutegroupBadRequest creates a ApplyRoutegroupBadRequest with default headers values
func NewApplyRoutegroupBadRequest() *ApplyRoutegroupBadRequest {
	return &ApplyRoutegroupBadRequest{}
}

/* ApplyRoutegroupBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ApplyRoutegroupBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this apply routegroup bad request response has a 2xx status code
func (o *ApplyRoutegroupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this apply routegroup bad request response has a 3xx status code
func (o *ApplyRoutegroupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply routegroup bad request response has a 4xx status code
func (o *ApplyRoutegroupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this apply routegroup bad request response has a 5xx status code
func (o *ApplyRoutegroupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this apply routegroup bad request response a status code equal to that given
func (o *ApplyRoutegroupBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the apply routegroup bad request response
func (o *ApplyRoutegroupBadRequest) Code() int {
	return 400
}

func (o *ApplyRoutegroupBadRequest) Error() string {
	return fmt.Sprintf("[PUT /orgs/{orgName}/routegroups/{routegroupName}][%d] applyRoutegroupBadRequest  %+v", 400, o.Payload)
}

func (o *ApplyRoutegroupBadRequest) String() string {
	return fmt.Sprintf("[PUT /orgs/{orgName}/routegroups/{routegroupName}][%d] applyRoutegroupBadRequest  %+v", 400, o.Payload)
}

func (o *ApplyRoutegroupBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ApplyRoutegroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplyRoutegroupUnauthorized creates a ApplyRoutegroupUnauthorized with default headers values
func NewApplyRoutegroupUnauthorized() *ApplyRoutegroupUnauthorized {
	return &ApplyRoutegroupUnauthorized{}
}

/* ApplyRoutegroupUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ApplyRoutegroupUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this apply routegroup unauthorized response has a 2xx status code
func (o *ApplyRoutegroupUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this apply routegroup unauthorized response has a 3xx status code
func (o *ApplyRoutegroupUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply routegroup unauthorized response has a 4xx status code
func (o *ApplyRoutegroupUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this apply routegroup unauthorized response has a 5xx status code
func (o *ApplyRoutegroupUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this apply routegroup unauthorized response a status code equal to that given
func (o *ApplyRoutegroupUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the apply routegroup unauthorized response
func (o *ApplyRoutegroupUnauthorized) Code() int {
	return 401
}

func (o *ApplyRoutegroupUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /orgs/{orgName}/routegroups/{routegroupName}][%d] applyRoutegroupUnauthorized  %+v", 401, o.Payload)
}

func (o *ApplyRoutegroupUnauthorized) String() string {
	return fmt.Sprintf("[PUT /orgs/{orgName}/routegroups/{routegroupName}][%d] applyRoutegroupUnauthorized  %+v", 401, o.Payload)
}

func (o *ApplyRoutegroupUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ApplyRoutegroupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplyRoutegroupBadGateway creates a ApplyRoutegroupBadGateway with default headers values
func NewApplyRoutegroupBadGateway() *ApplyRoutegroupBadGateway {
	return &ApplyRoutegroupBadGateway{}
}

/* ApplyRoutegroupBadGateway describes a response with status code 502, with default header values.

Bad Gateway
*/
type ApplyRoutegroupBadGateway struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this apply routegroup bad gateway response has a 2xx status code
func (o *ApplyRoutegroupBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this apply routegroup bad gateway response has a 3xx status code
func (o *ApplyRoutegroupBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply routegroup bad gateway response has a 4xx status code
func (o *ApplyRoutegroupBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this apply routegroup bad gateway response has a 5xx status code
func (o *ApplyRoutegroupBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this apply routegroup bad gateway response a status code equal to that given
func (o *ApplyRoutegroupBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the apply routegroup bad gateway response
func (o *ApplyRoutegroupBadGateway) Code() int {
	return 502
}

func (o *ApplyRoutegroupBadGateway) Error() string {
	return fmt.Sprintf("[PUT /orgs/{orgName}/routegroups/{routegroupName}][%d] applyRoutegroupBadGateway  %+v", 502, o.Payload)
}

func (o *ApplyRoutegroupBadGateway) String() string {
	return fmt.Sprintf("[PUT /orgs/{orgName}/routegroups/{routegroupName}][%d] applyRoutegroupBadGateway  %+v", 502, o.Payload)
}

func (o *ApplyRoutegroupBadGateway) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ApplyRoutegroupBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
