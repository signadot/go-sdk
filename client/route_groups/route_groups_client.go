// Code generated by go-swagger; DO NOT EDIT.

package route_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new route groups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for route groups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ApplyRoutegroup(params *ApplyRoutegroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApplyRoutegroupOK, error)

	DeleteRoutegroup(params *DeleteRoutegroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRoutegroupOK, error)

	GetRoutegroup(params *GetRoutegroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRoutegroupOK, error)

	ListRoutegroups(params *ListRoutegroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRoutegroupsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ApplyRoutegroup creates or update a routegroup

Creates or updates a routegroup with the provided parameters.
*/
func (a *Client) ApplyRoutegroup(params *ApplyRoutegroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApplyRoutegroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplyRoutegroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "apply-routegroup",
		Method:             "PUT",
		PathPattern:        "/orgs/{orgName}/routegroups/{routegroupName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ApplyRoutegroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplyRoutegroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for apply-routegroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRoutegroup deletes a routegroup

Delete a given routegroup.
*/
func (a *Client) DeleteRoutegroup(params *DeleteRoutegroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRoutegroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRoutegroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete-routegroup",
		Method:             "DELETE",
		PathPattern:        "/orgs/{orgName}/routegroups/{routegroupName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRoutegroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRoutegroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-routegroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRoutegroup gets a routegroup

Fetch the details about a given routegroup.
*/
func (a *Client) GetRoutegroup(params *GetRoutegroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRoutegroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRoutegroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-routegroup",
		Method:             "GET",
		PathPattern:        "/orgs/{orgName}/routegroups/{routegroupName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutegroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRoutegroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-routegroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListRoutegroups lists routegroups

List all routegroups under the specified Signadot org.
*/
func (a *Client) ListRoutegroups(params *ListRoutegroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRoutegroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRoutegroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list-routegroups",
		Method:             "GET",
		PathPattern:        "/orgs/{orgName}/routegroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRoutegroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRoutegroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list-routegroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
