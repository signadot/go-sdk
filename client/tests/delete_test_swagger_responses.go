// Code generated by go-swagger; DO NOT EDIT.

package tests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/signadot/go-sdk/models"
)

// DeleteTestReader is a Reader for the DeleteTest structure.
type DeleteTestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteTestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteTestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteTestBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteTestUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewDeleteTestBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /orgs/{orgName}/tests/{testName}] delete-test", response, response.Code())
	}
}

// NewDeleteTestOK creates a DeleteTestOK with default headers values
func NewDeleteTestOK() *DeleteTestOK {
	return &DeleteTestOK{}
}

/*
DeleteTestOK describes a response with status code 200, with default header values.

OK
*/
type DeleteTestOK struct {
	Payload models.EmptyResponse
}

// IsSuccess returns true when this delete test o k response has a 2xx status code
func (o *DeleteTestOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete test o k response has a 3xx status code
func (o *DeleteTestOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete test o k response has a 4xx status code
func (o *DeleteTestOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete test o k response has a 5xx status code
func (o *DeleteTestOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete test o k response a status code equal to that given
func (o *DeleteTestOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete test o k response
func (o *DeleteTestOK) Code() int {
	return 200
}

func (o *DeleteTestOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /orgs/{orgName}/tests/{testName}][%d] deleteTestOK %s", 200, payload)
}

func (o *DeleteTestOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /orgs/{orgName}/tests/{testName}][%d] deleteTestOK %s", 200, payload)
}

func (o *DeleteTestOK) GetPayload() models.EmptyResponse {
	return o.Payload
}

func (o *DeleteTestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTestBadRequest creates a DeleteTestBadRequest with default headers values
func NewDeleteTestBadRequest() *DeleteTestBadRequest {
	return &DeleteTestBadRequest{}
}

/*
DeleteTestBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteTestBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this delete test bad request response has a 2xx status code
func (o *DeleteTestBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete test bad request response has a 3xx status code
func (o *DeleteTestBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete test bad request response has a 4xx status code
func (o *DeleteTestBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete test bad request response has a 5xx status code
func (o *DeleteTestBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete test bad request response a status code equal to that given
func (o *DeleteTestBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete test bad request response
func (o *DeleteTestBadRequest) Code() int {
	return 400
}

func (o *DeleteTestBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /orgs/{orgName}/tests/{testName}][%d] deleteTestBadRequest %s", 400, payload)
}

func (o *DeleteTestBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /orgs/{orgName}/tests/{testName}][%d] deleteTestBadRequest %s", 400, payload)
}

func (o *DeleteTestBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteTestBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTestUnauthorized creates a DeleteTestUnauthorized with default headers values
func NewDeleteTestUnauthorized() *DeleteTestUnauthorized {
	return &DeleteTestUnauthorized{}
}

/*
DeleteTestUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteTestUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this delete test unauthorized response has a 2xx status code
func (o *DeleteTestUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete test unauthorized response has a 3xx status code
func (o *DeleteTestUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete test unauthorized response has a 4xx status code
func (o *DeleteTestUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete test unauthorized response has a 5xx status code
func (o *DeleteTestUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete test unauthorized response a status code equal to that given
func (o *DeleteTestUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete test unauthorized response
func (o *DeleteTestUnauthorized) Code() int {
	return 401
}

func (o *DeleteTestUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /orgs/{orgName}/tests/{testName}][%d] deleteTestUnauthorized %s", 401, payload)
}

func (o *DeleteTestUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /orgs/{orgName}/tests/{testName}][%d] deleteTestUnauthorized %s", 401, payload)
}

func (o *DeleteTestUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteTestUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTestBadGateway creates a DeleteTestBadGateway with default headers values
func NewDeleteTestBadGateway() *DeleteTestBadGateway {
	return &DeleteTestBadGateway{}
}

/*
DeleteTestBadGateway describes a response with status code 502, with default header values.

Bad Gateway
*/
type DeleteTestBadGateway struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this delete test bad gateway response has a 2xx status code
func (o *DeleteTestBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete test bad gateway response has a 3xx status code
func (o *DeleteTestBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete test bad gateway response has a 4xx status code
func (o *DeleteTestBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete test bad gateway response has a 5xx status code
func (o *DeleteTestBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this delete test bad gateway response a status code equal to that given
func (o *DeleteTestBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the delete test bad gateway response
func (o *DeleteTestBadGateway) Code() int {
	return 502
}

func (o *DeleteTestBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /orgs/{orgName}/tests/{testName}][%d] deleteTestBadGateway %s", 502, payload)
}

func (o *DeleteTestBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /orgs/{orgName}/tests/{testName}][%d] deleteTestBadGateway %s", 502, payload)
}

func (o *DeleteTestBadGateway) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteTestBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
