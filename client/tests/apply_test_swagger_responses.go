// Code generated by go-swagger; DO NOT EDIT.

package tests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/signadot/go-sdk/models"
)

// ApplyTestReader is a Reader for the ApplyTest structure.
type ApplyTestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ApplyTestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewApplyTestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewApplyTestBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewApplyTestUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewApplyTestBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /orgs/{orgName}/tests/{testName}] apply-test", response, response.Code())
	}
}

// NewApplyTestOK creates a ApplyTestOK with default headers values
func NewApplyTestOK() *ApplyTestOK {
	return &ApplyTestOK{}
}

/*
ApplyTestOK describes a response with status code 200, with default header values.

OK
*/
type ApplyTestOK struct {
	Payload *models.Test
}

// IsSuccess returns true when this apply test o k response has a 2xx status code
func (o *ApplyTestOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this apply test o k response has a 3xx status code
func (o *ApplyTestOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply test o k response has a 4xx status code
func (o *ApplyTestOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this apply test o k response has a 5xx status code
func (o *ApplyTestOK) IsServerError() bool {
	return false
}

// IsCode returns true when this apply test o k response a status code equal to that given
func (o *ApplyTestOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the apply test o k response
func (o *ApplyTestOK) Code() int {
	return 200
}

func (o *ApplyTestOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /orgs/{orgName}/tests/{testName}][%d] applyTestOK %s", 200, payload)
}

func (o *ApplyTestOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /orgs/{orgName}/tests/{testName}][%d] applyTestOK %s", 200, payload)
}

func (o *ApplyTestOK) GetPayload() *models.Test {
	return o.Payload
}

func (o *ApplyTestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Test)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplyTestBadRequest creates a ApplyTestBadRequest with default headers values
func NewApplyTestBadRequest() *ApplyTestBadRequest {
	return &ApplyTestBadRequest{}
}

/*
ApplyTestBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ApplyTestBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this apply test bad request response has a 2xx status code
func (o *ApplyTestBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this apply test bad request response has a 3xx status code
func (o *ApplyTestBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply test bad request response has a 4xx status code
func (o *ApplyTestBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this apply test bad request response has a 5xx status code
func (o *ApplyTestBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this apply test bad request response a status code equal to that given
func (o *ApplyTestBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the apply test bad request response
func (o *ApplyTestBadRequest) Code() int {
	return 400
}

func (o *ApplyTestBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /orgs/{orgName}/tests/{testName}][%d] applyTestBadRequest %s", 400, payload)
}

func (o *ApplyTestBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /orgs/{orgName}/tests/{testName}][%d] applyTestBadRequest %s", 400, payload)
}

func (o *ApplyTestBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ApplyTestBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplyTestUnauthorized creates a ApplyTestUnauthorized with default headers values
func NewApplyTestUnauthorized() *ApplyTestUnauthorized {
	return &ApplyTestUnauthorized{}
}

/*
ApplyTestUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ApplyTestUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this apply test unauthorized response has a 2xx status code
func (o *ApplyTestUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this apply test unauthorized response has a 3xx status code
func (o *ApplyTestUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply test unauthorized response has a 4xx status code
func (o *ApplyTestUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this apply test unauthorized response has a 5xx status code
func (o *ApplyTestUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this apply test unauthorized response a status code equal to that given
func (o *ApplyTestUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the apply test unauthorized response
func (o *ApplyTestUnauthorized) Code() int {
	return 401
}

func (o *ApplyTestUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /orgs/{orgName}/tests/{testName}][%d] applyTestUnauthorized %s", 401, payload)
}

func (o *ApplyTestUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /orgs/{orgName}/tests/{testName}][%d] applyTestUnauthorized %s", 401, payload)
}

func (o *ApplyTestUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ApplyTestUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplyTestBadGateway creates a ApplyTestBadGateway with default headers values
func NewApplyTestBadGateway() *ApplyTestBadGateway {
	return &ApplyTestBadGateway{}
}

/*
ApplyTestBadGateway describes a response with status code 502, with default header values.

Bad Gateway
*/
type ApplyTestBadGateway struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this apply test bad gateway response has a 2xx status code
func (o *ApplyTestBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this apply test bad gateway response has a 3xx status code
func (o *ApplyTestBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply test bad gateway response has a 4xx status code
func (o *ApplyTestBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this apply test bad gateway response has a 5xx status code
func (o *ApplyTestBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this apply test bad gateway response a status code equal to that given
func (o *ApplyTestBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the apply test bad gateway response
func (o *ApplyTestBadGateway) Code() int {
	return 502
}

func (o *ApplyTestBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /orgs/{orgName}/tests/{testName}][%d] applyTestBadGateway %s", 502, payload)
}

func (o *ApplyTestBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /orgs/{orgName}/tests/{testName}][%d] applyTestBadGateway %s", 502, payload)
}

func (o *ApplyTestBadGateway) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ApplyTestBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
