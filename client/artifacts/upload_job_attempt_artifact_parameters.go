// Code generated by go-swagger; DO NOT EDIT.

package artifacts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUploadJobAttemptArtifactParams creates a new UploadJobAttemptArtifactParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUploadJobAttemptArtifactParams() *UploadJobAttemptArtifactParams {
	return &UploadJobAttemptArtifactParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUploadJobAttemptArtifactParamsWithTimeout creates a new UploadJobAttemptArtifactParams object
// with the ability to set a timeout on a request.
func NewUploadJobAttemptArtifactParamsWithTimeout(timeout time.Duration) *UploadJobAttemptArtifactParams {
	return &UploadJobAttemptArtifactParams{
		timeout: timeout,
	}
}

// NewUploadJobAttemptArtifactParamsWithContext creates a new UploadJobAttemptArtifactParams object
// with the ability to set a context for a request.
func NewUploadJobAttemptArtifactParamsWithContext(ctx context.Context) *UploadJobAttemptArtifactParams {
	return &UploadJobAttemptArtifactParams{
		Context: ctx,
	}
}

// NewUploadJobAttemptArtifactParamsWithHTTPClient creates a new UploadJobAttemptArtifactParams object
// with the ability to set a custom HTTPClient for a request.
func NewUploadJobAttemptArtifactParamsWithHTTPClient(client *http.Client) *UploadJobAttemptArtifactParams {
	return &UploadJobAttemptArtifactParams{
		HTTPClient: client,
	}
}

/*
UploadJobAttemptArtifactParams contains all the parameters to send to the API endpoint

	for the upload job attempt artifact operation.

	Typically these are written to a http.Request.
*/
type UploadJobAttemptArtifactParams struct {

	/* Artifact.

	   Artifact File
	*/
	Artifact runtime.NamedReadCloser

	/* ChecksumSHA256.

	   A base64-encoded, 256-bit SHA-256 digest of the artifact
	*/
	ChecksumSHA256 *string

	/* JobAttempt.

	   Job Attempt ID
	*/
	JobAttempt string

	/* JobExecution.

	   Job Execution ID
	*/
	JobExecution *string

	/* JobName.

	   Job Name
	*/
	JobName string

	/* Metadata.

	   A json-encoded, map of metadata to store with the artifact
	*/
	Metadata *string

	/* OrgName.

	   Signadot Org Name
	*/
	OrgName string

	/* Path.

	   Artifact Path
	*/
	Path string

	/* System.

	   System space
	*/
	System bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the upload job attempt artifact params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadJobAttemptArtifactParams) WithDefaults() *UploadJobAttemptArtifactParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the upload job attempt artifact params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadJobAttemptArtifactParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the upload job attempt artifact params
func (o *UploadJobAttemptArtifactParams) WithTimeout(timeout time.Duration) *UploadJobAttemptArtifactParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload job attempt artifact params
func (o *UploadJobAttemptArtifactParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload job attempt artifact params
func (o *UploadJobAttemptArtifactParams) WithContext(ctx context.Context) *UploadJobAttemptArtifactParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload job attempt artifact params
func (o *UploadJobAttemptArtifactParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload job attempt artifact params
func (o *UploadJobAttemptArtifactParams) WithHTTPClient(client *http.Client) *UploadJobAttemptArtifactParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload job attempt artifact params
func (o *UploadJobAttemptArtifactParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithArtifact adds the artifact to the upload job attempt artifact params
func (o *UploadJobAttemptArtifactParams) WithArtifact(artifact runtime.NamedReadCloser) *UploadJobAttemptArtifactParams {
	o.SetArtifact(artifact)
	return o
}

// SetArtifact adds the artifact to the upload job attempt artifact params
func (o *UploadJobAttemptArtifactParams) SetArtifact(artifact runtime.NamedReadCloser) {
	o.Artifact = artifact
}

// WithChecksumSHA256 adds the checksumSHA256 to the upload job attempt artifact params
func (o *UploadJobAttemptArtifactParams) WithChecksumSHA256(checksumSHA256 *string) *UploadJobAttemptArtifactParams {
	o.SetChecksumSHA256(checksumSHA256)
	return o
}

// SetChecksumSHA256 adds the checksumSHA256 to the upload job attempt artifact params
func (o *UploadJobAttemptArtifactParams) SetChecksumSHA256(checksumSHA256 *string) {
	o.ChecksumSHA256 = checksumSHA256
}

// WithJobAttempt adds the jobAttempt to the upload job attempt artifact params
func (o *UploadJobAttemptArtifactParams) WithJobAttempt(jobAttempt string) *UploadJobAttemptArtifactParams {
	o.SetJobAttempt(jobAttempt)
	return o
}

// SetJobAttempt adds the jobAttempt to the upload job attempt artifact params
func (o *UploadJobAttemptArtifactParams) SetJobAttempt(jobAttempt string) {
	o.JobAttempt = jobAttempt
}

// WithJobExecution adds the jobExecution to the upload job attempt artifact params
func (o *UploadJobAttemptArtifactParams) WithJobExecution(jobExecution *string) *UploadJobAttemptArtifactParams {
	o.SetJobExecution(jobExecution)
	return o
}

// SetJobExecution adds the jobExecution to the upload job attempt artifact params
func (o *UploadJobAttemptArtifactParams) SetJobExecution(jobExecution *string) {
	o.JobExecution = jobExecution
}

// WithJobName adds the jobName to the upload job attempt artifact params
func (o *UploadJobAttemptArtifactParams) WithJobName(jobName string) *UploadJobAttemptArtifactParams {
	o.SetJobName(jobName)
	return o
}

// SetJobName adds the jobName to the upload job attempt artifact params
func (o *UploadJobAttemptArtifactParams) SetJobName(jobName string) {
	o.JobName = jobName
}

// WithMetadata adds the metadata to the upload job attempt artifact params
func (o *UploadJobAttemptArtifactParams) WithMetadata(metadata *string) *UploadJobAttemptArtifactParams {
	o.SetMetadata(metadata)
	return o
}

// SetMetadata adds the metadata to the upload job attempt artifact params
func (o *UploadJobAttemptArtifactParams) SetMetadata(metadata *string) {
	o.Metadata = metadata
}

// WithOrgName adds the orgName to the upload job attempt artifact params
func (o *UploadJobAttemptArtifactParams) WithOrgName(orgName string) *UploadJobAttemptArtifactParams {
	o.SetOrgName(orgName)
	return o
}

// SetOrgName adds the orgName to the upload job attempt artifact params
func (o *UploadJobAttemptArtifactParams) SetOrgName(orgName string) {
	o.OrgName = orgName
}

// WithPath adds the path to the upload job attempt artifact params
func (o *UploadJobAttemptArtifactParams) WithPath(path string) *UploadJobAttemptArtifactParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the upload job attempt artifact params
func (o *UploadJobAttemptArtifactParams) SetPath(path string) {
	o.Path = path
}

// WithSystem adds the system to the upload job attempt artifact params
func (o *UploadJobAttemptArtifactParams) WithSystem(system bool) *UploadJobAttemptArtifactParams {
	o.SetSystem(system)
	return o
}

// SetSystem adds the system to the upload job attempt artifact params
func (o *UploadJobAttemptArtifactParams) SetSystem(system bool) {
	o.System = system
}

// WriteToRequest writes these params to a swagger request
func (o *UploadJobAttemptArtifactParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	// form file param artifact
	if err := r.SetFileParam("artifact", o.Artifact); err != nil {
		return err
	}

	if o.ChecksumSHA256 != nil {

		// form param checksumSHA256
		var frChecksumSHA256 string
		if o.ChecksumSHA256 != nil {
			frChecksumSHA256 = *o.ChecksumSHA256
		}
		fChecksumSHA256 := frChecksumSHA256
		if fChecksumSHA256 != "" {
			if err := r.SetFormParam("checksumSHA256", fChecksumSHA256); err != nil {
				return err
			}
		}
	}

	// path param jobAttempt
	if err := r.SetPathParam("jobAttempt", o.JobAttempt); err != nil {
		return err
	}

	if o.JobExecution != nil {

		// form param jobExecution
		var frJobExecution string
		if o.JobExecution != nil {
			frJobExecution = *o.JobExecution
		}
		fJobExecution := frJobExecution
		if fJobExecution != "" {
			if err := r.SetFormParam("jobExecution", fJobExecution); err != nil {
				return err
			}
		}
	}

	// path param jobName
	if err := r.SetPathParam("jobName", o.JobName); err != nil {
		return err
	}

	if o.Metadata != nil {

		// form param metadata
		var frMetadata string
		if o.Metadata != nil {
			frMetadata = *o.Metadata
		}
		fMetadata := frMetadata
		if fMetadata != "" {
			if err := r.SetFormParam("metadata", fMetadata); err != nil {
				return err
			}
		}
	}

	// path param orgName
	if err := r.SetPathParam("orgName", o.OrgName); err != nil {
		return err
	}

	// query param path
	qrPath := o.Path
	qPath := qrPath
	if qPath != "" {

		if err := r.SetQueryParam("path", qPath); err != nil {
			return err
		}
	}

	// query param system
	qrSystem := o.System
	qSystem := swag.FormatBool(qrSystem)
	if qSystem != "" {

		if err := r.SetQueryParam("system", qSystem); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
