// Code generated by go-swagger; DO NOT EDIT.

package artifacts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListJobAttemptArtifactsParams creates a new ListJobAttemptArtifactsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListJobAttemptArtifactsParams() *ListJobAttemptArtifactsParams {
	return &ListJobAttemptArtifactsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListJobAttemptArtifactsParamsWithTimeout creates a new ListJobAttemptArtifactsParams object
// with the ability to set a timeout on a request.
func NewListJobAttemptArtifactsParamsWithTimeout(timeout time.Duration) *ListJobAttemptArtifactsParams {
	return &ListJobAttemptArtifactsParams{
		timeout: timeout,
	}
}

// NewListJobAttemptArtifactsParamsWithContext creates a new ListJobAttemptArtifactsParams object
// with the ability to set a context for a request.
func NewListJobAttemptArtifactsParamsWithContext(ctx context.Context) *ListJobAttemptArtifactsParams {
	return &ListJobAttemptArtifactsParams{
		Context: ctx,
	}
}

// NewListJobAttemptArtifactsParamsWithHTTPClient creates a new ListJobAttemptArtifactsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListJobAttemptArtifactsParamsWithHTTPClient(client *http.Client) *ListJobAttemptArtifactsParams {
	return &ListJobAttemptArtifactsParams{
		HTTPClient: client,
	}
}

/*
ListJobAttemptArtifactsParams contains all the parameters to send to the API endpoint

	for the list job attempt artifacts operation.

	Typically these are written to a http.Request.
*/
type ListJobAttemptArtifactsParams struct {

	/* JobAttempt.

	   Job Attempt ID
	*/
	JobAttempt int64

	/* JobName.

	   Job Name
	*/
	JobName string

	/* OrgName.

	   Signadot Org Name
	*/
	OrgName string

	/* System.

	   System space
	*/
	System bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list job attempt artifacts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListJobAttemptArtifactsParams) WithDefaults() *ListJobAttemptArtifactsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list job attempt artifacts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListJobAttemptArtifactsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list job attempt artifacts params
func (o *ListJobAttemptArtifactsParams) WithTimeout(timeout time.Duration) *ListJobAttemptArtifactsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list job attempt artifacts params
func (o *ListJobAttemptArtifactsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list job attempt artifacts params
func (o *ListJobAttemptArtifactsParams) WithContext(ctx context.Context) *ListJobAttemptArtifactsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list job attempt artifacts params
func (o *ListJobAttemptArtifactsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list job attempt artifacts params
func (o *ListJobAttemptArtifactsParams) WithHTTPClient(client *http.Client) *ListJobAttemptArtifactsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list job attempt artifacts params
func (o *ListJobAttemptArtifactsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithJobAttempt adds the jobAttempt to the list job attempt artifacts params
func (o *ListJobAttemptArtifactsParams) WithJobAttempt(jobAttempt int64) *ListJobAttemptArtifactsParams {
	o.SetJobAttempt(jobAttempt)
	return o
}

// SetJobAttempt adds the jobAttempt to the list job attempt artifacts params
func (o *ListJobAttemptArtifactsParams) SetJobAttempt(jobAttempt int64) {
	o.JobAttempt = jobAttempt
}

// WithJobName adds the jobName to the list job attempt artifacts params
func (o *ListJobAttemptArtifactsParams) WithJobName(jobName string) *ListJobAttemptArtifactsParams {
	o.SetJobName(jobName)
	return o
}

// SetJobName adds the jobName to the list job attempt artifacts params
func (o *ListJobAttemptArtifactsParams) SetJobName(jobName string) {
	o.JobName = jobName
}

// WithOrgName adds the orgName to the list job attempt artifacts params
func (o *ListJobAttemptArtifactsParams) WithOrgName(orgName string) *ListJobAttemptArtifactsParams {
	o.SetOrgName(orgName)
	return o
}

// SetOrgName adds the orgName to the list job attempt artifacts params
func (o *ListJobAttemptArtifactsParams) SetOrgName(orgName string) {
	o.OrgName = orgName
}

// WithSystem adds the system to the list job attempt artifacts params
func (o *ListJobAttemptArtifactsParams) WithSystem(system bool) *ListJobAttemptArtifactsParams {
	o.SetSystem(system)
	return o
}

// SetSystem adds the system to the list job attempt artifacts params
func (o *ListJobAttemptArtifactsParams) SetSystem(system bool) {
	o.System = system
}

// WriteToRequest writes these params to a swagger request
func (o *ListJobAttemptArtifactsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param jobAttempt
	if err := r.SetPathParam("jobAttempt", swag.FormatInt64(o.JobAttempt)); err != nil {
		return err
	}

	// path param jobName
	if err := r.SetPathParam("jobName", o.JobName); err != nil {
		return err
	}

	// path param orgName
	if err := r.SetPathParam("orgName", o.OrgName); err != nil {
		return err
	}

	// query param system
	qrSystem := o.System
	qSystem := swag.FormatBool(qrSystem)
	if qSystem != "" {

		if err := r.SetQueryParam("system", qSystem); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
