// Code generated by go-swagger; DO NOT EDIT.

package artifacts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new artifacts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for artifacts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DownloadJobAttemptArtifact(params *DownloadJobAttemptArtifactParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer, opts ...ClientOption) (*DownloadJobAttemptArtifactOK, *DownloadJobAttemptArtifactPartialContent, error)

	InfoJobAttemptArtifact(params *InfoJobAttemptArtifactParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InfoJobAttemptArtifactOK, error)

	ListJobAttemptArtifacts(params *ListJobAttemptArtifactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListJobAttemptArtifactsOK, error)

	UploadJobAttemptArtifact(params *UploadJobAttemptArtifactParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadJobAttemptArtifactOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DownloadJobAttemptArtifact downloads job attempt artifact

Downloads an artifact for a given job attempt.
*/
func (a *Client) DownloadJobAttemptArtifact(params *DownloadJobAttemptArtifactParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer, opts ...ClientOption) (*DownloadJobAttemptArtifactOK, *DownloadJobAttemptArtifactPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadJobAttemptArtifactParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "download-job-attempt-artifact",
		Method:             "GET",
		PathPattern:        "/orgs/{orgName}/artifacts/jobs/{jobName}/attempts/{jobAttempt}/objects/download",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DownloadJobAttemptArtifactReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DownloadJobAttemptArtifactOK:
		return value, nil, nil
	case *DownloadJobAttemptArtifactPartialContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for artifacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InfoJobAttemptArtifact jobs attempt artifact info

Get info about a job attempt artifact
*/
func (a *Client) InfoJobAttemptArtifact(params *InfoJobAttemptArtifactParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InfoJobAttemptArtifactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInfoJobAttemptArtifactParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "info-job-attempt-artifact",
		Method:             "GET",
		PathPattern:        "/orgs/{orgName}/artifacts/jobs/{jobName}/attempts/{jobAttempt}/objects/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InfoJobAttemptArtifactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InfoJobAttemptArtifactOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for info-job-attempt-artifact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListJobAttemptArtifacts lists job attempt artifacts

List all artifacts for a given job attempt.
*/
func (a *Client) ListJobAttemptArtifacts(params *ListJobAttemptArtifactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListJobAttemptArtifactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListJobAttemptArtifactsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list-job-attempt-artifacts",
		Method:             "GET",
		PathPattern:        "/orgs/{orgName}/artifacts/jobs/{jobName}/attempts/{jobAttempt}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListJobAttemptArtifactsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListJobAttemptArtifactsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list-job-attempt-artifacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UploadJobAttemptArtifact uploads job attempt artifact

Uploads an artifact for a given job attempt.
*/
func (a *Client) UploadJobAttemptArtifact(params *UploadJobAttemptArtifactParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadJobAttemptArtifactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadJobAttemptArtifactParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "upload-job-attempt-artifact",
		Method:             "POST",
		PathPattern:        "/orgs/{orgName}/artifacts/jobs/{jobName}/attempts/{jobAttempt}/objects/upload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UploadJobAttemptArtifactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadJobAttemptArtifactOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for upload-job-attempt-artifact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
