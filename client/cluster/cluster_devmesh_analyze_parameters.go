// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewClusterDevmeshAnalyzeParams creates a new ClusterDevmeshAnalyzeParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewClusterDevmeshAnalyzeParams() *ClusterDevmeshAnalyzeParams {
	return &ClusterDevmeshAnalyzeParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewClusterDevmeshAnalyzeParamsWithTimeout creates a new ClusterDevmeshAnalyzeParams object
// with the ability to set a timeout on a request.
func NewClusterDevmeshAnalyzeParamsWithTimeout(timeout time.Duration) *ClusterDevmeshAnalyzeParams {
	return &ClusterDevmeshAnalyzeParams{
		timeout: timeout,
	}
}

// NewClusterDevmeshAnalyzeParamsWithContext creates a new ClusterDevmeshAnalyzeParams object
// with the ability to set a context for a request.
func NewClusterDevmeshAnalyzeParamsWithContext(ctx context.Context) *ClusterDevmeshAnalyzeParams {
	return &ClusterDevmeshAnalyzeParams{
		Context: ctx,
	}
}

// NewClusterDevmeshAnalyzeParamsWithHTTPClient creates a new ClusterDevmeshAnalyzeParams object
// with the ability to set a custom HTTPClient for a request.
func NewClusterDevmeshAnalyzeParamsWithHTTPClient(client *http.Client) *ClusterDevmeshAnalyzeParams {
	return &ClusterDevmeshAnalyzeParams{
		HTTPClient: client,
	}
}

/*
ClusterDevmeshAnalyzeParams contains all the parameters to send to the API endpoint

	for the cluster devmesh analyze operation.

	Typically these are written to a http.Request.
*/
type ClusterDevmeshAnalyzeParams struct {

	/* ClusterName.

	   Cluster Name
	*/
	ClusterName string

	/* Namespace.

	   Filter by statuses (comma separated value)
	*/
	Namespace *string

	/* OrgName.

	   Signadot Org name
	*/
	OrgName string

	/* Status.

	   Filter by namespaces (comma separated value)
	*/
	Status *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the cluster devmesh analyze params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ClusterDevmeshAnalyzeParams) WithDefaults() *ClusterDevmeshAnalyzeParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the cluster devmesh analyze params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ClusterDevmeshAnalyzeParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the cluster devmesh analyze params
func (o *ClusterDevmeshAnalyzeParams) WithTimeout(timeout time.Duration) *ClusterDevmeshAnalyzeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the cluster devmesh analyze params
func (o *ClusterDevmeshAnalyzeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the cluster devmesh analyze params
func (o *ClusterDevmeshAnalyzeParams) WithContext(ctx context.Context) *ClusterDevmeshAnalyzeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the cluster devmesh analyze params
func (o *ClusterDevmeshAnalyzeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the cluster devmesh analyze params
func (o *ClusterDevmeshAnalyzeParams) WithHTTPClient(client *http.Client) *ClusterDevmeshAnalyzeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the cluster devmesh analyze params
func (o *ClusterDevmeshAnalyzeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterName adds the clusterName to the cluster devmesh analyze params
func (o *ClusterDevmeshAnalyzeParams) WithClusterName(clusterName string) *ClusterDevmeshAnalyzeParams {
	o.SetClusterName(clusterName)
	return o
}

// SetClusterName adds the clusterName to the cluster devmesh analyze params
func (o *ClusterDevmeshAnalyzeParams) SetClusterName(clusterName string) {
	o.ClusterName = clusterName
}

// WithNamespace adds the namespace to the cluster devmesh analyze params
func (o *ClusterDevmeshAnalyzeParams) WithNamespace(namespace *string) *ClusterDevmeshAnalyzeParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the cluster devmesh analyze params
func (o *ClusterDevmeshAnalyzeParams) SetNamespace(namespace *string) {
	o.Namespace = namespace
}

// WithOrgName adds the orgName to the cluster devmesh analyze params
func (o *ClusterDevmeshAnalyzeParams) WithOrgName(orgName string) *ClusterDevmeshAnalyzeParams {
	o.SetOrgName(orgName)
	return o
}

// SetOrgName adds the orgName to the cluster devmesh analyze params
func (o *ClusterDevmeshAnalyzeParams) SetOrgName(orgName string) {
	o.OrgName = orgName
}

// WithStatus adds the status to the cluster devmesh analyze params
func (o *ClusterDevmeshAnalyzeParams) WithStatus(status *string) *ClusterDevmeshAnalyzeParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the cluster devmesh analyze params
func (o *ClusterDevmeshAnalyzeParams) SetStatus(status *string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *ClusterDevmeshAnalyzeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param clusterName
	if err := r.SetPathParam("clusterName", o.ClusterName); err != nil {
		return err
	}

	if o.Namespace != nil {

		// query param namespace
		var qrNamespace string

		if o.Namespace != nil {
			qrNamespace = *o.Namespace
		}
		qNamespace := qrNamespace
		if qNamespace != "" {

			if err := r.SetQueryParam("namespace", qNamespace); err != nil {
				return err
			}
		}
	}

	// path param orgName
	if err := r.SetPathParam("orgName", o.OrgName); err != nil {
		return err
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
