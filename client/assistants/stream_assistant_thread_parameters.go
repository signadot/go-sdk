// Code generated by go-swagger; DO NOT EDIT.

package assistants

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewStreamAssistantThreadParams creates a new StreamAssistantThreadParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewStreamAssistantThreadParams() *StreamAssistantThreadParams {
	return &StreamAssistantThreadParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewStreamAssistantThreadParamsWithTimeout creates a new StreamAssistantThreadParams object
// with the ability to set a timeout on a request.
func NewStreamAssistantThreadParamsWithTimeout(timeout time.Duration) *StreamAssistantThreadParams {
	return &StreamAssistantThreadParams{
		timeout: timeout,
	}
}

// NewStreamAssistantThreadParamsWithContext creates a new StreamAssistantThreadParams object
// with the ability to set a context for a request.
func NewStreamAssistantThreadParamsWithContext(ctx context.Context) *StreamAssistantThreadParams {
	return &StreamAssistantThreadParams{
		Context: ctx,
	}
}

// NewStreamAssistantThreadParamsWithHTTPClient creates a new StreamAssistantThreadParams object
// with the ability to set a custom HTTPClient for a request.
func NewStreamAssistantThreadParamsWithHTTPClient(client *http.Client) *StreamAssistantThreadParams {
	return &StreamAssistantThreadParams{
		HTTPClient: client,
	}
}

/*
StreamAssistantThreadParams contains all the parameters to send to the API endpoint

	for the stream assistant thread operation.

	Typically these are written to a http.Request.
*/
type StreamAssistantThreadParams struct {

	/* After.

	   If set, resume message stream from the given value
	*/
	After *string

	/* OrgName.

	   Signadot Org Name
	*/
	OrgName string

	/* ThreadID.

	   Thread ID
	*/
	ThreadID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the stream assistant thread params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StreamAssistantThreadParams) WithDefaults() *StreamAssistantThreadParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the stream assistant thread params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StreamAssistantThreadParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the stream assistant thread params
func (o *StreamAssistantThreadParams) WithTimeout(timeout time.Duration) *StreamAssistantThreadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the stream assistant thread params
func (o *StreamAssistantThreadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the stream assistant thread params
func (o *StreamAssistantThreadParams) WithContext(ctx context.Context) *StreamAssistantThreadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the stream assistant thread params
func (o *StreamAssistantThreadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the stream assistant thread params
func (o *StreamAssistantThreadParams) WithHTTPClient(client *http.Client) *StreamAssistantThreadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the stream assistant thread params
func (o *StreamAssistantThreadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfter adds the after to the stream assistant thread params
func (o *StreamAssistantThreadParams) WithAfter(after *string) *StreamAssistantThreadParams {
	o.SetAfter(after)
	return o
}

// SetAfter adds the after to the stream assistant thread params
func (o *StreamAssistantThreadParams) SetAfter(after *string) {
	o.After = after
}

// WithOrgName adds the orgName to the stream assistant thread params
func (o *StreamAssistantThreadParams) WithOrgName(orgName string) *StreamAssistantThreadParams {
	o.SetOrgName(orgName)
	return o
}

// SetOrgName adds the orgName to the stream assistant thread params
func (o *StreamAssistantThreadParams) SetOrgName(orgName string) {
	o.OrgName = orgName
}

// WithThreadID adds the threadID to the stream assistant thread params
func (o *StreamAssistantThreadParams) WithThreadID(threadID string) *StreamAssistantThreadParams {
	o.SetThreadID(threadID)
	return o
}

// SetThreadID adds the threadId to the stream assistant thread params
func (o *StreamAssistantThreadParams) SetThreadID(threadID string) {
	o.ThreadID = threadID
}

// WriteToRequest writes these params to a swagger request
func (o *StreamAssistantThreadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.After != nil {

		// query param after
		var qrAfter string

		if o.After != nil {
			qrAfter = *o.After
		}
		qAfter := qrAfter
		if qAfter != "" {

			if err := r.SetQueryParam("after", qAfter); err != nil {
				return err
			}
		}
	}

	// path param orgName
	if err := r.SetPathParam("orgName", o.OrgName); err != nil {
		return err
	}

	// path param threadID
	if err := r.SetPathParam("threadID", o.ThreadID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
