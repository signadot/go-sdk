// Code generated by go-swagger; DO NOT EDIT.

package assistants

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/signadot/go-sdk/models"
)

// CreateAssistantThreadReader is a Reader for the CreateAssistantThread structure.
type CreateAssistantThreadReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateAssistantThreadReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateAssistantThreadOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateAssistantThreadBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateAssistantThreadUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /orgs/{orgName}/assistants/{assistantName}/threads/] create-assistant-thread", response, response.Code())
	}
}

// NewCreateAssistantThreadOK creates a CreateAssistantThreadOK with default headers values
func NewCreateAssistantThreadOK() *CreateAssistantThreadOK {
	return &CreateAssistantThreadOK{}
}

/*
CreateAssistantThreadOK describes a response with status code 200, with default header values.

OK
*/
type CreateAssistantThreadOK struct {
	Payload *models.AssistantsThread
}

// IsSuccess returns true when this create assistant thread o k response has a 2xx status code
func (o *CreateAssistantThreadOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create assistant thread o k response has a 3xx status code
func (o *CreateAssistantThreadOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create assistant thread o k response has a 4xx status code
func (o *CreateAssistantThreadOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create assistant thread o k response has a 5xx status code
func (o *CreateAssistantThreadOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create assistant thread o k response a status code equal to that given
func (o *CreateAssistantThreadOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create assistant thread o k response
func (o *CreateAssistantThreadOK) Code() int {
	return 200
}

func (o *CreateAssistantThreadOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /orgs/{orgName}/assistants/{assistantName}/threads/][%d] createAssistantThreadOK %s", 200, payload)
}

func (o *CreateAssistantThreadOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /orgs/{orgName}/assistants/{assistantName}/threads/][%d] createAssistantThreadOK %s", 200, payload)
}

func (o *CreateAssistantThreadOK) GetPayload() *models.AssistantsThread {
	return o.Payload
}

func (o *CreateAssistantThreadOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AssistantsThread)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateAssistantThreadBadRequest creates a CreateAssistantThreadBadRequest with default headers values
func NewCreateAssistantThreadBadRequest() *CreateAssistantThreadBadRequest {
	return &CreateAssistantThreadBadRequest{}
}

/*
CreateAssistantThreadBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateAssistantThreadBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this create assistant thread bad request response has a 2xx status code
func (o *CreateAssistantThreadBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create assistant thread bad request response has a 3xx status code
func (o *CreateAssistantThreadBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create assistant thread bad request response has a 4xx status code
func (o *CreateAssistantThreadBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create assistant thread bad request response has a 5xx status code
func (o *CreateAssistantThreadBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create assistant thread bad request response a status code equal to that given
func (o *CreateAssistantThreadBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create assistant thread bad request response
func (o *CreateAssistantThreadBadRequest) Code() int {
	return 400
}

func (o *CreateAssistantThreadBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /orgs/{orgName}/assistants/{assistantName}/threads/][%d] createAssistantThreadBadRequest %s", 400, payload)
}

func (o *CreateAssistantThreadBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /orgs/{orgName}/assistants/{assistantName}/threads/][%d] createAssistantThreadBadRequest %s", 400, payload)
}

func (o *CreateAssistantThreadBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateAssistantThreadBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateAssistantThreadUnauthorized creates a CreateAssistantThreadUnauthorized with default headers values
func NewCreateAssistantThreadUnauthorized() *CreateAssistantThreadUnauthorized {
	return &CreateAssistantThreadUnauthorized{}
}

/*
CreateAssistantThreadUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CreateAssistantThreadUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this create assistant thread unauthorized response has a 2xx status code
func (o *CreateAssistantThreadUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create assistant thread unauthorized response has a 3xx status code
func (o *CreateAssistantThreadUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create assistant thread unauthorized response has a 4xx status code
func (o *CreateAssistantThreadUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create assistant thread unauthorized response has a 5xx status code
func (o *CreateAssistantThreadUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create assistant thread unauthorized response a status code equal to that given
func (o *CreateAssistantThreadUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create assistant thread unauthorized response
func (o *CreateAssistantThreadUnauthorized) Code() int {
	return 401
}

func (o *CreateAssistantThreadUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /orgs/{orgName}/assistants/{assistantName}/threads/][%d] createAssistantThreadUnauthorized %s", 401, payload)
}

func (o *CreateAssistantThreadUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /orgs/{orgName}/assistants/{assistantName}/threads/][%d] createAssistantThreadUnauthorized %s", 401, payload)
}

func (o *CreateAssistantThreadUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateAssistantThreadUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
