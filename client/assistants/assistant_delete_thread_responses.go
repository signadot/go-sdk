// Code generated by go-swagger; DO NOT EDIT.

package assistants

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/signadot/go-sdk/models"
)

// AssistantDeleteThreadReader is a Reader for the AssistantDeleteThread structure.
type AssistantDeleteThreadReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AssistantDeleteThreadReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAssistantDeleteThreadOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAssistantDeleteThreadBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAssistantDeleteThreadUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /orgs/{orgName}/assistants/threads/{threadID}] assistant-delete-thread", response, response.Code())
	}
}

// NewAssistantDeleteThreadOK creates a AssistantDeleteThreadOK with default headers values
func NewAssistantDeleteThreadOK() *AssistantDeleteThreadOK {
	return &AssistantDeleteThreadOK{}
}

/*
AssistantDeleteThreadOK describes a response with status code 200, with default header values.

OK
*/
type AssistantDeleteThreadOK struct {
	Payload models.EmptyResponse
}

// IsSuccess returns true when this assistant delete thread o k response has a 2xx status code
func (o *AssistantDeleteThreadOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this assistant delete thread o k response has a 3xx status code
func (o *AssistantDeleteThreadOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assistant delete thread o k response has a 4xx status code
func (o *AssistantDeleteThreadOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this assistant delete thread o k response has a 5xx status code
func (o *AssistantDeleteThreadOK) IsServerError() bool {
	return false
}

// IsCode returns true when this assistant delete thread o k response a status code equal to that given
func (o *AssistantDeleteThreadOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the assistant delete thread o k response
func (o *AssistantDeleteThreadOK) Code() int {
	return 200
}

func (o *AssistantDeleteThreadOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /orgs/{orgName}/assistants/threads/{threadID}][%d] assistantDeleteThreadOK %s", 200, payload)
}

func (o *AssistantDeleteThreadOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /orgs/{orgName}/assistants/threads/{threadID}][%d] assistantDeleteThreadOK %s", 200, payload)
}

func (o *AssistantDeleteThreadOK) GetPayload() models.EmptyResponse {
	return o.Payload
}

func (o *AssistantDeleteThreadOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssistantDeleteThreadBadRequest creates a AssistantDeleteThreadBadRequest with default headers values
func NewAssistantDeleteThreadBadRequest() *AssistantDeleteThreadBadRequest {
	return &AssistantDeleteThreadBadRequest{}
}

/*
AssistantDeleteThreadBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AssistantDeleteThreadBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this assistant delete thread bad request response has a 2xx status code
func (o *AssistantDeleteThreadBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this assistant delete thread bad request response has a 3xx status code
func (o *AssistantDeleteThreadBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assistant delete thread bad request response has a 4xx status code
func (o *AssistantDeleteThreadBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this assistant delete thread bad request response has a 5xx status code
func (o *AssistantDeleteThreadBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this assistant delete thread bad request response a status code equal to that given
func (o *AssistantDeleteThreadBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the assistant delete thread bad request response
func (o *AssistantDeleteThreadBadRequest) Code() int {
	return 400
}

func (o *AssistantDeleteThreadBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /orgs/{orgName}/assistants/threads/{threadID}][%d] assistantDeleteThreadBadRequest %s", 400, payload)
}

func (o *AssistantDeleteThreadBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /orgs/{orgName}/assistants/threads/{threadID}][%d] assistantDeleteThreadBadRequest %s", 400, payload)
}

func (o *AssistantDeleteThreadBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AssistantDeleteThreadBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssistantDeleteThreadUnauthorized creates a AssistantDeleteThreadUnauthorized with default headers values
func NewAssistantDeleteThreadUnauthorized() *AssistantDeleteThreadUnauthorized {
	return &AssistantDeleteThreadUnauthorized{}
}

/*
AssistantDeleteThreadUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AssistantDeleteThreadUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this assistant delete thread unauthorized response has a 2xx status code
func (o *AssistantDeleteThreadUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this assistant delete thread unauthorized response has a 3xx status code
func (o *AssistantDeleteThreadUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assistant delete thread unauthorized response has a 4xx status code
func (o *AssistantDeleteThreadUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this assistant delete thread unauthorized response has a 5xx status code
func (o *AssistantDeleteThreadUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this assistant delete thread unauthorized response a status code equal to that given
func (o *AssistantDeleteThreadUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the assistant delete thread unauthorized response
func (o *AssistantDeleteThreadUnauthorized) Code() int {
	return 401
}

func (o *AssistantDeleteThreadUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /orgs/{orgName}/assistants/threads/{threadID}][%d] assistantDeleteThreadUnauthorized %s", 401, payload)
}

func (o *AssistantDeleteThreadUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /orgs/{orgName}/assistants/threads/{threadID}][%d] assistantDeleteThreadUnauthorized %s", 401, payload)
}

func (o *AssistantDeleteThreadUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AssistantDeleteThreadUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
