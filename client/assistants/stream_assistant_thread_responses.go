// Code generated by go-swagger; DO NOT EDIT.

package assistants

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/signadot/go-sdk/models"
)

// StreamAssistantThreadReader is a Reader for the StreamAssistantThread structure.
type StreamAssistantThreadReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *StreamAssistantThreadReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStreamAssistantThreadOK(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStreamAssistantThreadBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewStreamAssistantThreadUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStreamAssistantThreadNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /orgs/{orgName}/assistants/threads/{threadID}/] stream-assistant-thread", response, response.Code())
	}
}

// NewStreamAssistantThreadOK creates a StreamAssistantThreadOK with default headers values
func NewStreamAssistantThreadOK(writer io.Writer) *StreamAssistantThreadOK {
	return &StreamAssistantThreadOK{

		Payload: writer,
	}
}

/*
StreamAssistantThreadOK describes a response with status code 200, with default header values.

Event stream
*/
type StreamAssistantThreadOK struct {
	Payload io.Writer
}

// IsSuccess returns true when this stream assistant thread o k response has a 2xx status code
func (o *StreamAssistantThreadOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stream assistant thread o k response has a 3xx status code
func (o *StreamAssistantThreadOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stream assistant thread o k response has a 4xx status code
func (o *StreamAssistantThreadOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this stream assistant thread o k response has a 5xx status code
func (o *StreamAssistantThreadOK) IsServerError() bool {
	return false
}

// IsCode returns true when this stream assistant thread o k response a status code equal to that given
func (o *StreamAssistantThreadOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the stream assistant thread o k response
func (o *StreamAssistantThreadOK) Code() int {
	return 200
}

func (o *StreamAssistantThreadOK) Error() string {
	return fmt.Sprintf("[GET /orgs/{orgName}/assistants/threads/{threadID}/][%d] streamAssistantThreadOK", 200)
}

func (o *StreamAssistantThreadOK) String() string {
	return fmt.Sprintf("[GET /orgs/{orgName}/assistants/threads/{threadID}/][%d] streamAssistantThreadOK", 200)
}

func (o *StreamAssistantThreadOK) GetPayload() io.Writer {
	return o.Payload
}

func (o *StreamAssistantThreadOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStreamAssistantThreadBadRequest creates a StreamAssistantThreadBadRequest with default headers values
func NewStreamAssistantThreadBadRequest() *StreamAssistantThreadBadRequest {
	return &StreamAssistantThreadBadRequest{}
}

/*
StreamAssistantThreadBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type StreamAssistantThreadBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this stream assistant thread bad request response has a 2xx status code
func (o *StreamAssistantThreadBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stream assistant thread bad request response has a 3xx status code
func (o *StreamAssistantThreadBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stream assistant thread bad request response has a 4xx status code
func (o *StreamAssistantThreadBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this stream assistant thread bad request response has a 5xx status code
func (o *StreamAssistantThreadBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this stream assistant thread bad request response a status code equal to that given
func (o *StreamAssistantThreadBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the stream assistant thread bad request response
func (o *StreamAssistantThreadBadRequest) Code() int {
	return 400
}

func (o *StreamAssistantThreadBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/assistants/threads/{threadID}/][%d] streamAssistantThreadBadRequest %s", 400, payload)
}

func (o *StreamAssistantThreadBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/assistants/threads/{threadID}/][%d] streamAssistantThreadBadRequest %s", 400, payload)
}

func (o *StreamAssistantThreadBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *StreamAssistantThreadBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStreamAssistantThreadUnauthorized creates a StreamAssistantThreadUnauthorized with default headers values
func NewStreamAssistantThreadUnauthorized() *StreamAssistantThreadUnauthorized {
	return &StreamAssistantThreadUnauthorized{}
}

/*
StreamAssistantThreadUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type StreamAssistantThreadUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this stream assistant thread unauthorized response has a 2xx status code
func (o *StreamAssistantThreadUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stream assistant thread unauthorized response has a 3xx status code
func (o *StreamAssistantThreadUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stream assistant thread unauthorized response has a 4xx status code
func (o *StreamAssistantThreadUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this stream assistant thread unauthorized response has a 5xx status code
func (o *StreamAssistantThreadUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this stream assistant thread unauthorized response a status code equal to that given
func (o *StreamAssistantThreadUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the stream assistant thread unauthorized response
func (o *StreamAssistantThreadUnauthorized) Code() int {
	return 401
}

func (o *StreamAssistantThreadUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/assistants/threads/{threadID}/][%d] streamAssistantThreadUnauthorized %s", 401, payload)
}

func (o *StreamAssistantThreadUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/assistants/threads/{threadID}/][%d] streamAssistantThreadUnauthorized %s", 401, payload)
}

func (o *StreamAssistantThreadUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *StreamAssistantThreadUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStreamAssistantThreadNotFound creates a StreamAssistantThreadNotFound with default headers values
func NewStreamAssistantThreadNotFound() *StreamAssistantThreadNotFound {
	return &StreamAssistantThreadNotFound{}
}

/*
StreamAssistantThreadNotFound describes a response with status code 404, with default header values.

Not Found
*/
type StreamAssistantThreadNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this stream assistant thread not found response has a 2xx status code
func (o *StreamAssistantThreadNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stream assistant thread not found response has a 3xx status code
func (o *StreamAssistantThreadNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stream assistant thread not found response has a 4xx status code
func (o *StreamAssistantThreadNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stream assistant thread not found response has a 5xx status code
func (o *StreamAssistantThreadNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stream assistant thread not found response a status code equal to that given
func (o *StreamAssistantThreadNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the stream assistant thread not found response
func (o *StreamAssistantThreadNotFound) Code() int {
	return 404
}

func (o *StreamAssistantThreadNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/assistants/threads/{threadID}/][%d] streamAssistantThreadNotFound %s", 404, payload)
}

func (o *StreamAssistantThreadNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orgs/{orgName}/assistants/threads/{threadID}/][%d] streamAssistantThreadNotFound %s", 404, payload)
}

func (o *StreamAssistantThreadNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *StreamAssistantThreadNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
