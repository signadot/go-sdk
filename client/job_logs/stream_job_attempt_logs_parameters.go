// Code generated by go-swagger; DO NOT EDIT.

package job_logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewStreamJobAttemptLogsParams creates a new StreamJobAttemptLogsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewStreamJobAttemptLogsParams() *StreamJobAttemptLogsParams {
	return &StreamJobAttemptLogsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewStreamJobAttemptLogsParamsWithTimeout creates a new StreamJobAttemptLogsParams object
// with the ability to set a timeout on a request.
func NewStreamJobAttemptLogsParamsWithTimeout(timeout time.Duration) *StreamJobAttemptLogsParams {
	return &StreamJobAttemptLogsParams{
		timeout: timeout,
	}
}

// NewStreamJobAttemptLogsParamsWithContext creates a new StreamJobAttemptLogsParams object
// with the ability to set a context for a request.
func NewStreamJobAttemptLogsParamsWithContext(ctx context.Context) *StreamJobAttemptLogsParams {
	return &StreamJobAttemptLogsParams{
		Context: ctx,
	}
}

// NewStreamJobAttemptLogsParamsWithHTTPClient creates a new StreamJobAttemptLogsParams object
// with the ability to set a custom HTTPClient for a request.
func NewStreamJobAttemptLogsParamsWithHTTPClient(client *http.Client) *StreamJobAttemptLogsParams {
	return &StreamJobAttemptLogsParams{
		HTTPClient: client,
	}
}

/*
StreamJobAttemptLogsParams contains all the parameters to send to the API endpoint

	for the stream job attempt logs operation.

	Typically these are written to a http.Request.
*/
type StreamJobAttemptLogsParams struct {

	/* Cursor.

	   If set, resume logs stream from the given cursor
	*/
	Cursor *string

	/* JobAttempt.

	   Job Attempt ID
	*/
	JobAttempt int64

	/* JobName.

	   Job Name
	*/
	JobName string

	/* OrgName.

	   Signadot Org Name
	*/
	OrgName string

	/* TailLines.

	   If set, the number of lines from the end of the logs to show
	*/
	TailLines *int64

	/* Type.

	   Stream type (stdout or stderr)
	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the stream job attempt logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StreamJobAttemptLogsParams) WithDefaults() *StreamJobAttemptLogsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the stream job attempt logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StreamJobAttemptLogsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the stream job attempt logs params
func (o *StreamJobAttemptLogsParams) WithTimeout(timeout time.Duration) *StreamJobAttemptLogsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the stream job attempt logs params
func (o *StreamJobAttemptLogsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the stream job attempt logs params
func (o *StreamJobAttemptLogsParams) WithContext(ctx context.Context) *StreamJobAttemptLogsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the stream job attempt logs params
func (o *StreamJobAttemptLogsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the stream job attempt logs params
func (o *StreamJobAttemptLogsParams) WithHTTPClient(client *http.Client) *StreamJobAttemptLogsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the stream job attempt logs params
func (o *StreamJobAttemptLogsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCursor adds the cursor to the stream job attempt logs params
func (o *StreamJobAttemptLogsParams) WithCursor(cursor *string) *StreamJobAttemptLogsParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the stream job attempt logs params
func (o *StreamJobAttemptLogsParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithJobAttempt adds the jobAttempt to the stream job attempt logs params
func (o *StreamJobAttemptLogsParams) WithJobAttempt(jobAttempt int64) *StreamJobAttemptLogsParams {
	o.SetJobAttempt(jobAttempt)
	return o
}

// SetJobAttempt adds the jobAttempt to the stream job attempt logs params
func (o *StreamJobAttemptLogsParams) SetJobAttempt(jobAttempt int64) {
	o.JobAttempt = jobAttempt
}

// WithJobName adds the jobName to the stream job attempt logs params
func (o *StreamJobAttemptLogsParams) WithJobName(jobName string) *StreamJobAttemptLogsParams {
	o.SetJobName(jobName)
	return o
}

// SetJobName adds the jobName to the stream job attempt logs params
func (o *StreamJobAttemptLogsParams) SetJobName(jobName string) {
	o.JobName = jobName
}

// WithOrgName adds the orgName to the stream job attempt logs params
func (o *StreamJobAttemptLogsParams) WithOrgName(orgName string) *StreamJobAttemptLogsParams {
	o.SetOrgName(orgName)
	return o
}

// SetOrgName adds the orgName to the stream job attempt logs params
func (o *StreamJobAttemptLogsParams) SetOrgName(orgName string) {
	o.OrgName = orgName
}

// WithTailLines adds the tailLines to the stream job attempt logs params
func (o *StreamJobAttemptLogsParams) WithTailLines(tailLines *int64) *StreamJobAttemptLogsParams {
	o.SetTailLines(tailLines)
	return o
}

// SetTailLines adds the tailLines to the stream job attempt logs params
func (o *StreamJobAttemptLogsParams) SetTailLines(tailLines *int64) {
	o.TailLines = tailLines
}

// WithType adds the typeVar to the stream job attempt logs params
func (o *StreamJobAttemptLogsParams) WithType(typeVar *string) *StreamJobAttemptLogsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the stream job attempt logs params
func (o *StreamJobAttemptLogsParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *StreamJobAttemptLogsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cursor != nil {

		// query param cursor
		var qrCursor string

		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {

			if err := r.SetQueryParam("cursor", qCursor); err != nil {
				return err
			}
		}
	}

	// path param jobAttempt
	if err := r.SetPathParam("jobAttempt", swag.FormatInt64(o.JobAttempt)); err != nil {
		return err
	}

	// path param jobName
	if err := r.SetPathParam("jobName", o.JobName); err != nil {
		return err
	}

	// path param orgName
	if err := r.SetPathParam("orgName", o.OrgName); err != nil {
		return err
	}

	if o.TailLines != nil {

		// query param tailLines
		var qrTailLines int64

		if o.TailLines != nil {
			qrTailLines = *o.TailLines
		}
		qTailLines := swag.FormatInt64(qrTailLines)
		if qTailLines != "" {

			if err := r.SetQueryParam("tailLines", qTailLines); err != nil {
				return err
			}
		}
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
