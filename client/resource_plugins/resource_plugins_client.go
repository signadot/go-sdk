// Code generated by go-swagger; DO NOT EDIT.

package resource_plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new resource plugins API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for resource plugins API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ApplyResourcePlugin(params *ApplyResourcePluginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApplyResourcePluginOK, error)

	DeleteResourcePlugin(params *DeleteResourcePluginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteResourcePluginOK, error)

	GetResourcePlugin(params *GetResourcePluginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourcePluginOK, error)

	ListResourcePlugins(params *ListResourcePluginsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListResourcePluginsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ApplyResourcePlugin applies a resource plugin

  Create a new resource plugin. Updates are not supported at this time.
*/
func (a *Client) ApplyResourcePlugin(params *ApplyResourcePluginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApplyResourcePluginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplyResourcePluginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "apply-resource-plugin",
		Method:             "PUT",
		PathPattern:        "/orgs/{orgName}/resource-plugins/{pluginName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ApplyResourcePluginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplyResourcePluginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for apply-resource-plugin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteResourcePlugin deletes a resource plugin

  Delete the specified resource plugin
*/
func (a *Client) DeleteResourcePlugin(params *DeleteResourcePluginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteResourcePluginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteResourcePluginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete-resource-plugin",
		Method:             "DELETE",
		PathPattern:        "/orgs/{orgName}/resource-plugins/{pluginName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteResourcePluginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteResourcePluginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-resource-plugin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetResourcePlugin gets the requested resource plugin

  Get the specified resource plugin
*/
func (a *Client) GetResourcePlugin(params *GetResourcePluginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourcePluginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourcePluginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-resource-plugin",
		Method:             "GET",
		PathPattern:        "/orgs/{orgName}/resource-plugins/{pluginName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourcePluginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourcePluginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-resource-plugin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListResourcePlugins lists resource plugins

  List all resource plugins under the specified Signadot org.
*/
func (a *Client) ListResourcePlugins(params *ListResourcePluginsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListResourcePluginsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListResourcePluginsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list-resource-plugins",
		Method:             "GET",
		PathPattern:        "/orgs/{orgName}/resource-plugins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListResourcePluginsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListResourcePluginsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list-resource-plugins: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
