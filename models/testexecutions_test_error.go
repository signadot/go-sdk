// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TestexecutionsTestError testexecutions test error
//
// swagger:model testexecutions.TestError
type TestexecutionsTestError struct {

	// attrs
	Attrs map[string]interface{} `json:"attrs,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// source position
	SourcePosition *SyntaxPosition `json:"sourcePosition,omitempty"`
}

// Validate validates this testexecutions test error
func (m *TestexecutionsTestError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSourcePosition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestexecutionsTestError) validateSourcePosition(formats strfmt.Registry) error {
	if swag.IsZero(m.SourcePosition) { // not required
		return nil
	}

	if m.SourcePosition != nil {
		if err := m.SourcePosition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourcePosition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourcePosition")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this testexecutions test error based on the context it is used
func (m *TestexecutionsTestError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSourcePosition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestexecutionsTestError) contextValidateSourcePosition(ctx context.Context, formats strfmt.Registry) error {

	if m.SourcePosition != nil {

		if swag.IsZero(m.SourcePosition) { // not required
			return nil
		}

		if err := m.SourcePosition.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourcePosition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourcePosition")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestexecutionsTestError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestexecutionsTestError) UnmarshalBinary(b []byte) error {
	var res TestexecutionsTestError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
