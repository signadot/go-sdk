// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CapturePointDiffSummary capture point diff summary
//
// swagger:model CapturePointDiffSummary
type CapturePointDiffSummary struct {

	// additions
	Additions int64 `json:"additions,omitempty"`

	// captured by
	CapturedBy *TrafficmodelsBy `json:"capturedBy,omitempty"`

	// captures
	Captures int64 `json:"captures,omitempty"`

	// MaxRelevance indicates a score in 0..1 of the maximally relevant diff
	// operation, or 1.0 if either the baseline or target are missing.
	MaxRelevance float64 `json:"maxRelevance,omitempty"`

	// removals
	Removals int64 `json:"removals,omitempty"`

	// replacements
	Replacements int64 `json:"replacements,omitempty"`

	// top
	Top []*TrafficDiffPairedDiff `json:"top"`
}

// Validate validates this capture point diff summary
func (m *CapturePointDiffSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapturedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTop(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CapturePointDiffSummary) validateCapturedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.CapturedBy) { // not required
		return nil
	}

	if m.CapturedBy != nil {
		if err := m.CapturedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capturedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("capturedBy")
			}
			return err
		}
	}

	return nil
}

func (m *CapturePointDiffSummary) validateTop(formats strfmt.Registry) error {
	if swag.IsZero(m.Top) { // not required
		return nil
	}

	for i := 0; i < len(m.Top); i++ {
		if swag.IsZero(m.Top[i]) { // not required
			continue
		}

		if m.Top[i] != nil {
			if err := m.Top[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("top" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("top" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this capture point diff summary based on the context it is used
func (m *CapturePointDiffSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCapturedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTop(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CapturePointDiffSummary) contextValidateCapturedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.CapturedBy != nil {

		if swag.IsZero(m.CapturedBy) { // not required
			return nil
		}

		if err := m.CapturedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capturedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("capturedBy")
			}
			return err
		}
	}

	return nil
}

func (m *CapturePointDiffSummary) contextValidateTop(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Top); i++ {

		if m.Top[i] != nil {

			if swag.IsZero(m.Top[i]) { // not required
				return nil
			}

			if err := m.Top[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("top" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("top" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CapturePointDiffSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CapturePointDiffSummary) UnmarshalBinary(b []byte) error {
	var res CapturePointDiffSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
