// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AssistantsMessageRole assistants message role
//
// swagger:model assistants.MessageRole
type AssistantsMessageRole string

func NewAssistantsMessageRole(value AssistantsMessageRole) *AssistantsMessageRole {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AssistantsMessageRole.
func (m AssistantsMessageRole) Pointer() *AssistantsMessageRole {
	return &m
}

const (

	// AssistantsMessageRoleUser captures enum value "user"
	AssistantsMessageRoleUser AssistantsMessageRole = "user"

	// AssistantsMessageRoleAssistant captures enum value "assistant"
	AssistantsMessageRoleAssistant AssistantsMessageRole = "assistant"
)

// for schema
var assistantsMessageRoleEnum []interface{}

func init() {
	var res []AssistantsMessageRole
	if err := json.Unmarshal([]byte(`["user","assistant"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		assistantsMessageRoleEnum = append(assistantsMessageRoleEnum, v)
	}
}

func (m AssistantsMessageRole) validateAssistantsMessageRoleEnum(path, location string, value AssistantsMessageRole) error {
	if err := validate.EnumCase(path, location, value, assistantsMessageRoleEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this assistants message role
func (m AssistantsMessageRole) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAssistantsMessageRoleEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this assistants message role based on context it is used
func (m AssistantsMessageRole) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
