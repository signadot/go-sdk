// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SandboxForkSpec sandbox fork spec
//
// swagger:model sandbox.ForkSpec
type SandboxForkSpec struct {

	// customizations
	Customizations *SandboxCustomizations `json:"customizations,omitempty"`

	// Endpoints that correspond to this forked workload
	Endpoints []*SandboxForkEndpoint `json:"endpoints"`

	// fork of
	ForkOf *SandboxForkOf `json:"forkOf,omitempty"`
}

// Validate validates this sandbox fork spec
func (m *SandboxForkSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomizations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndpoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForkOf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SandboxForkSpec) validateCustomizations(formats strfmt.Registry) error {
	if swag.IsZero(m.Customizations) { // not required
		return nil
	}

	if m.Customizations != nil {
		if err := m.Customizations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customizations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customizations")
			}
			return err
		}
	}

	return nil
}

func (m *SandboxForkSpec) validateEndpoints(formats strfmt.Registry) error {
	if swag.IsZero(m.Endpoints) { // not required
		return nil
	}

	for i := 0; i < len(m.Endpoints); i++ {
		if swag.IsZero(m.Endpoints[i]) { // not required
			continue
		}

		if m.Endpoints[i] != nil {
			if err := m.Endpoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("endpoints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("endpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SandboxForkSpec) validateForkOf(formats strfmt.Registry) error {
	if swag.IsZero(m.ForkOf) { // not required
		return nil
	}

	if m.ForkOf != nil {
		if err := m.ForkOf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("forkOf")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("forkOf")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sandbox fork spec based on the context it is used
func (m *SandboxForkSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomizations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEndpoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateForkOf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SandboxForkSpec) contextValidateCustomizations(ctx context.Context, formats strfmt.Registry) error {

	if m.Customizations != nil {
		if err := m.Customizations.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customizations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customizations")
			}
			return err
		}
	}

	return nil
}

func (m *SandboxForkSpec) contextValidateEndpoints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Endpoints); i++ {

		if m.Endpoints[i] != nil {
			if err := m.Endpoints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("endpoints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("endpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SandboxForkSpec) contextValidateForkOf(ctx context.Context, formats strfmt.Registry) error {

	if m.ForkOf != nil {
		if err := m.ForkOf.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("forkOf")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("forkOf")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SandboxForkSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SandboxForkSpec) UnmarshalBinary(b []byte) error {
	var res SandboxForkSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
