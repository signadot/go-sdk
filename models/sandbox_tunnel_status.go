// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SandboxTunnelStatus sandbox tunnel status
//
// swagger:model sandbox.TunnelStatus
type SandboxTunnelStatus struct {

	// health
	Health *SandboxTunnelStatusHealth `json:"health,omitempty"`
}

// Validate validates this sandbox tunnel status
func (m *SandboxTunnelStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHealth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SandboxTunnelStatus) validateHealth(formats strfmt.Registry) error {
	if swag.IsZero(m.Health) { // not required
		return nil
	}

	if m.Health != nil {
		if err := m.Health.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("health")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sandbox tunnel status based on the context it is used
func (m *SandboxTunnelStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHealth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SandboxTunnelStatus) contextValidateHealth(ctx context.Context, formats strfmt.Registry) error {

	if m.Health != nil {

		if swag.IsZero(m.Health) { // not required
			return nil
		}

		if err := m.Health.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("health")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SandboxTunnelStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SandboxTunnelStatus) UnmarshalBinary(b []byte) error {
	var res SandboxTunnelStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SandboxTunnelStatusHealth sandbox tunnel status health
//
// swagger:model SandboxTunnelStatusHealth
type SandboxTunnelStatusHealth struct {

	// connected
	Connected bool `json:"connected,omitempty"`

	// last check time
	LastCheckTime string `json:"lastCheckTime,omitempty"`

	// last connected time
	LastConnectedTime string `json:"lastConnectedTime,omitempty"`
}

// Validate validates this sandbox tunnel status health
func (m *SandboxTunnelStatusHealth) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this sandbox tunnel status health based on context it is used
func (m *SandboxTunnelStatusHealth) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SandboxTunnelStatusHealth) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SandboxTunnelStatusHealth) UnmarshalBinary(b []byte) error {
	var res SandboxTunnelStatusHealth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
