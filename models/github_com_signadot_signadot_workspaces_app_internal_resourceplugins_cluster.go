// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GithubComSignadotSignadotWorkspacesAppInternalResourcepluginsCluster github com signadot signadot workspaces app internal resourceplugins cluster
//
// swagger:model github.com_signadot_signadot_workspaces_app_internal_resourceplugins.Cluster
type GithubComSignadotSignadotWorkspacesAppInternalResourcepluginsCluster struct {

	// The time at which the resource plugin was created
	CreatedAt string `json:"createdAt,omitempty"`

	// Name of the resource plugin
	Name string `json:"name,omitempty"`

	// spec
	Spec *ResourcepluginSpec `json:"spec,omitempty"`

	// status
	Status *ResourcepluginStatus `json:"status,omitempty"`

	// The time at which the resource plugin was last updated
	UpdatedAt string `json:"updatedAt,omitempty"`
}

// Validate validates this github com signadot signadot workspaces app internal resourceplugins cluster
func (m *GithubComSignadotSignadotWorkspacesAppInternalResourcepluginsCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComSignadotSignadotWorkspacesAppInternalResourcepluginsCluster) validateSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.Spec) { // not required
		return nil
	}

	if m.Spec != nil {
		if err := m.Spec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComSignadotSignadotWorkspacesAppInternalResourcepluginsCluster) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this github com signadot signadot workspaces app internal resourceplugins cluster based on the context it is used
func (m *GithubComSignadotSignadotWorkspacesAppInternalResourcepluginsCluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComSignadotSignadotWorkspacesAppInternalResourcepluginsCluster) contextValidateSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.Spec != nil {
		if err := m.Spec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComSignadotSignadotWorkspacesAppInternalResourcepluginsCluster) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GithubComSignadotSignadotWorkspacesAppInternalResourcepluginsCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GithubComSignadotSignadotWorkspacesAppInternalResourcepluginsCluster) UnmarshalBinary(b []byte) error {
	var res GithubComSignadotSignadotWorkspacesAppInternalResourcepluginsCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
