// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// JobsPhase jobs phase
//
// swagger:model jobs.Phase
type JobsPhase string

func NewJobsPhase(value JobsPhase) *JobsPhase {
	return &value
}

// Pointer returns a pointer to a freshly-allocated JobsPhase.
func (m JobsPhase) Pointer() *JobsPhase {
	return &m
}

const (

	// JobsPhaseQueued captures enum value "queued"
	JobsPhaseQueued JobsPhase = "queued"

	// JobsPhaseRunning captures enum value "running"
	JobsPhaseRunning JobsPhase = "running"

	// JobsPhaseFailed captures enum value "failed"
	JobsPhaseFailed JobsPhase = "failed"

	// JobsPhaseSucceeded captures enum value "succeeded"
	JobsPhaseSucceeded JobsPhase = "succeeded"

	// JobsPhaseCanceled captures enum value "canceled"
	JobsPhaseCanceled JobsPhase = "canceled"
)

// for schema
var jobsPhaseEnum []interface{}

func init() {
	var res []JobsPhase
	if err := json.Unmarshal([]byte(`["queued","running","failed","succeeded","canceled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobsPhaseEnum = append(jobsPhaseEnum, v)
	}
}

func (m JobsPhase) validateJobsPhaseEnum(path, location string, value JobsPhase) error {
	if err := validate.EnumCase(path, location, value, jobsPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this jobs phase
func (m JobsPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateJobsPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this jobs phase based on context it is used
func (m JobsPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
