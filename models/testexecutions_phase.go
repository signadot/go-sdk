// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TestexecutionsPhase testexecutions phase
//
// swagger:model testexecutions.Phase
type TestexecutionsPhase string

func NewTestexecutionsPhase(value TestexecutionsPhase) *TestexecutionsPhase {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TestexecutionsPhase.
func (m TestexecutionsPhase) Pointer() *TestexecutionsPhase {
	return &m
}

const (

	// TestexecutionsPhasePending captures enum value "pending"
	TestexecutionsPhasePending TestexecutionsPhase = "pending"

	// TestexecutionsPhaseInProgress captures enum value "in_progress"
	TestexecutionsPhaseInProgress TestexecutionsPhase = "in_progress"

	// TestexecutionsPhaseFailed captures enum value "failed"
	TestexecutionsPhaseFailed TestexecutionsPhase = "failed"

	// TestexecutionsPhaseSucceeded captures enum value "succeeded"
	TestexecutionsPhaseSucceeded TestexecutionsPhase = "succeeded"

	// TestexecutionsPhaseCanceled captures enum value "canceled"
	TestexecutionsPhaseCanceled TestexecutionsPhase = "canceled"
)

// for schema
var testexecutionsPhaseEnum []interface{}

func init() {
	var res []TestexecutionsPhase
	if err := json.Unmarshal([]byte(`["pending","in_progress","failed","succeeded","canceled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		testexecutionsPhaseEnum = append(testexecutionsPhaseEnum, v)
	}
}

func (m TestexecutionsPhase) validateTestexecutionsPhaseEnum(path, location string, value TestexecutionsPhase) error {
	if err := validate.EnumCase(path, location, value, testexecutionsPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this testexecutions phase
func (m TestexecutionsPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTestexecutionsPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this testexecutions phase based on context it is used
func (m TestexecutionsPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
