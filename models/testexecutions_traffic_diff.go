// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TestexecutionsTrafficDiff testexecutions traffic diff
//
// swagger:model testexecutions.TrafficDiff
type TestexecutionsTrafficDiff struct {

	// additions
	Additions int64 `json:"additions,omitempty"`

	// capture points
	CapturePoints int64 `json:"capturePoints,omitempty"`

	// captures
	Captures int64 `json:"captures,omitempty"`

	// green
	Green []*TestexecutionsCapturePointDiffSummary `json:"green"`

	// MaxRelevance indicates a score in 0..1 of the maximally relevant
	// diff of captures.
	MaxRelevance float64 `json:"maxRelevance,omitempty"`

	// red
	Red []*TestexecutionsCapturePointDiffSummary `json:"red"`

	// removals
	Removals int64 `json:"removals,omitempty"`

	// replacements
	Replacements int64 `json:"replacements,omitempty"`

	// yellow
	Yellow []*TestexecutionsCapturePointDiffSummary `json:"yellow"`
}

// Validate validates this testexecutions traffic diff
func (m *TestexecutionsTrafficDiff) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGreen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYellow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestexecutionsTrafficDiff) validateGreen(formats strfmt.Registry) error {
	if swag.IsZero(m.Green) { // not required
		return nil
	}

	for i := 0; i < len(m.Green); i++ {
		if swag.IsZero(m.Green[i]) { // not required
			continue
		}

		if m.Green[i] != nil {
			if err := m.Green[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("green" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("green" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TestexecutionsTrafficDiff) validateRed(formats strfmt.Registry) error {
	if swag.IsZero(m.Red) { // not required
		return nil
	}

	for i := 0; i < len(m.Red); i++ {
		if swag.IsZero(m.Red[i]) { // not required
			continue
		}

		if m.Red[i] != nil {
			if err := m.Red[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("red" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("red" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TestexecutionsTrafficDiff) validateYellow(formats strfmt.Registry) error {
	if swag.IsZero(m.Yellow) { // not required
		return nil
	}

	for i := 0; i < len(m.Yellow); i++ {
		if swag.IsZero(m.Yellow[i]) { // not required
			continue
		}

		if m.Yellow[i] != nil {
			if err := m.Yellow[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("yellow" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("yellow" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this testexecutions traffic diff based on the context it is used
func (m *TestexecutionsTrafficDiff) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGreen(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRed(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateYellow(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestexecutionsTrafficDiff) contextValidateGreen(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Green); i++ {

		if m.Green[i] != nil {

			if swag.IsZero(m.Green[i]) { // not required
				return nil
			}

			if err := m.Green[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("green" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("green" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TestexecutionsTrafficDiff) contextValidateRed(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Red); i++ {

		if m.Red[i] != nil {

			if swag.IsZero(m.Red[i]) { // not required
				return nil
			}

			if err := m.Red[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("red" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("red" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TestexecutionsTrafficDiff) contextValidateYellow(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Yellow); i++ {

		if m.Yellow[i] != nil {

			if swag.IsZero(m.Yellow[i]) { // not required
				return nil
			}

			if err := m.Yellow[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("yellow" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("yellow" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestexecutionsTrafficDiff) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestexecutionsTrafficDiff) UnmarshalBinary(b []byte) error {
	var res TestexecutionsTrafficDiff
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
