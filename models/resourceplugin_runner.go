// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ResourcepluginRunner resourceplugin runner
//
// swagger:model resourceplugin.Runner
type ResourcepluginRunner struct {

	// base pod template
	BasePodTemplate *V1PodTemplateSpec `json:"basePodTemplate,omitempty"`

	// Image for the runner instance
	Image string `json:"image,omitempty"`

	// Namespace to create this runner instance in
	Namespace string `json:"namespace,omitempty"`
}

// Validate validates this resourceplugin runner
func (m *ResourcepluginRunner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBasePodTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourcepluginRunner) validateBasePodTemplate(formats strfmt.Registry) error {
	if swag.IsZero(m.BasePodTemplate) { // not required
		return nil
	}

	if m.BasePodTemplate != nil {
		if err := m.BasePodTemplate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("basePodTemplate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("basePodTemplate")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this resourceplugin runner based on the context it is used
func (m *ResourcepluginRunner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBasePodTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourcepluginRunner) contextValidateBasePodTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.BasePodTemplate != nil {
		if err := m.BasePodTemplate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("basePodTemplate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("basePodTemplate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourcepluginRunner) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourcepluginRunner) UnmarshalBinary(b []byte) error {
	var res ResourcepluginRunner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
