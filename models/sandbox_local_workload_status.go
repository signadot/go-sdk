// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SandboxLocalWorkloadStatus sandbox local workload status
//
// swagger:model sandbox.LocalWorkloadStatus
type SandboxLocalWorkloadStatus struct {

	// name
	Name string `json:"name,omitempty"`

	// tunnel
	Tunnel *SandboxLocalWorkloadStatusTunnel `json:"tunnel,omitempty"`
}

// Validate validates this sandbox local workload status
func (m *SandboxLocalWorkloadStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTunnel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SandboxLocalWorkloadStatus) validateTunnel(formats strfmt.Registry) error {
	if swag.IsZero(m.Tunnel) { // not required
		return nil
	}

	if m.Tunnel != nil {
		if err := m.Tunnel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tunnel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tunnel")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sandbox local workload status based on the context it is used
func (m *SandboxLocalWorkloadStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTunnel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SandboxLocalWorkloadStatus) contextValidateTunnel(ctx context.Context, formats strfmt.Registry) error {

	if m.Tunnel != nil {

		if swag.IsZero(m.Tunnel) { // not required
			return nil
		}

		if err := m.Tunnel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tunnel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tunnel")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SandboxLocalWorkloadStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SandboxLocalWorkloadStatus) UnmarshalBinary(b []byte) error {
	var res SandboxLocalWorkloadStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SandboxLocalWorkloadStatusTunnel sandbox local workload status tunnel
//
// swagger:model SandboxLocalWorkloadStatusTunnel
type SandboxLocalWorkloadStatusTunnel struct {

	// health
	Health *SandboxLocalWorkloadStatusTunnelHealth `json:"health,omitempty"`
}

// Validate validates this sandbox local workload status tunnel
func (m *SandboxLocalWorkloadStatusTunnel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHealth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SandboxLocalWorkloadStatusTunnel) validateHealth(formats strfmt.Registry) error {
	if swag.IsZero(m.Health) { // not required
		return nil
	}

	if m.Health != nil {
		if err := m.Health.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tunnel" + "." + "health")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tunnel" + "." + "health")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sandbox local workload status tunnel based on the context it is used
func (m *SandboxLocalWorkloadStatusTunnel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHealth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SandboxLocalWorkloadStatusTunnel) contextValidateHealth(ctx context.Context, formats strfmt.Registry) error {

	if m.Health != nil {

		if swag.IsZero(m.Health) { // not required
			return nil
		}

		if err := m.Health.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tunnel" + "." + "health")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tunnel" + "." + "health")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SandboxLocalWorkloadStatusTunnel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SandboxLocalWorkloadStatusTunnel) UnmarshalBinary(b []byte) error {
	var res SandboxLocalWorkloadStatusTunnel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SandboxLocalWorkloadStatusTunnelHealth sandbox local workload status tunnel health
//
// swagger:model SandboxLocalWorkloadStatusTunnelHealth
type SandboxLocalWorkloadStatusTunnelHealth struct {

	// connected
	Connected bool `json:"connected,omitempty"`

	// last check time
	LastCheckTime string `json:"lastCheckTime,omitempty"`

	// last connected time
	LastConnectedTime string `json:"lastConnectedTime,omitempty"`
}

// Validate validates this sandbox local workload status tunnel health
func (m *SandboxLocalWorkloadStatusTunnelHealth) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this sandbox local workload status tunnel health based on context it is used
func (m *SandboxLocalWorkloadStatusTunnelHealth) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SandboxLocalWorkloadStatusTunnelHealth) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SandboxLocalWorkloadStatusTunnelHealth) UnmarshalBinary(b []byte) error {
	var res SandboxLocalWorkloadStatusTunnelHealth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
