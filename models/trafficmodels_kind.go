// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TrafficmodelsKind trafficmodels kind
//
// swagger:model trafficmodels.Kind
type TrafficmodelsKind string

func NewTrafficmodelsKind(value TrafficmodelsKind) *TrafficmodelsKind {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TrafficmodelsKind.
func (m TrafficmodelsKind) Pointer() *TrafficmodelsKind {
	return &m
}

const (

	// TrafficmodelsKindJob captures enum value "Job"
	TrafficmodelsKindJob TrafficmodelsKind = "Job"

	// TrafficmodelsKindDeployment captures enum value "Deployment"
	TrafficmodelsKindDeployment TrafficmodelsKind = "Deployment"

	// TrafficmodelsKindRollout captures enum value "Rollout"
	TrafficmodelsKindRollout TrafficmodelsKind = "Rollout"
)

// for schema
var trafficmodelsKindEnum []interface{}

func init() {
	var res []TrafficmodelsKind
	if err := json.Unmarshal([]byte(`["Job","Deployment","Rollout"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		trafficmodelsKindEnum = append(trafficmodelsKindEnum, v)
	}
}

func (m TrafficmodelsKind) validateTrafficmodelsKindEnum(path, location string, value TrafficmodelsKind) error {
	if err := validate.EnumCase(path, location, value, trafficmodelsKindEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this trafficmodels kind
func (m TrafficmodelsKind) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTrafficmodelsKindEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this trafficmodels kind based on context it is used
func (m TrafficmodelsKind) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
