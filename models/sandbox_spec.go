// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SandboxSpec sandbox spec
//
// swagger:model sandbox.Spec
type SandboxSpec struct {

	// Cluster within which this sandbox should be created
	// Required: true
	Cluster *string `json:"cluster"`

	// default route group
	DefaultRouteGroup *SandboxDefaultRouteGroup `json:"defaultRouteGroup,omitempty"`

	// Description of the purpose of this sandbox
	Description string `json:"description,omitempty"`

	// DisableSandboxTrafficManager provides a way of turning off the sandbox
	// traffic manager for forks in this sandbox.
	// Deprecated in operators since v1.1. The sandbox traffic manager has been
	// retired.
	DisableSandboxTrafficManager bool `json:"disableSandboxTrafficManager,omitempty"`

	// Deprecated. Use defaultRouteGroup.Endpoints instead.
	Endpoints []*SandboxHostEndpoint `json:"endpoints"`

	// Forks is the specification of each forked entity
	// Required: true
	Forks []*SandboxFork `json:"forks"`

	// Labels are used to specify metadata associated with the sandbox as key-value pairs.
	Labels map[string]string `json:"labels,omitempty"`

	// Local Workloads
	Local []*Local `json:"local"`

	// Identifier of the machine from where a sandbox containing local workloads
	// was created or is intended to be ran
	LocalMachineID string `json:"localMachineID,omitempty"`

	// Request Middleware
	Middleware []*SandboxesMiddleware `json:"middleware"`

	// Resources specifies each required resource to spin up the sandbox
	Resources []*SandboxResource `json:"resources"`

	// routing
	Routing *SandboxesRouting `json:"routing,omitempty"`

	// ttl
	TTL *SandboxTTL `json:"ttl,omitempty"`

	// Virtual Workloads
	Virtual []*Virtual `json:"virtual"`
}

// Validate validates this sandbox spec
func (m *SandboxSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultRouteGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndpoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiddleware(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouting(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTTL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtual(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SandboxSpec) validateCluster(formats strfmt.Registry) error {

	if err := validate.Required("cluster", "body", m.Cluster); err != nil {
		return err
	}

	return nil
}

func (m *SandboxSpec) validateDefaultRouteGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultRouteGroup) { // not required
		return nil
	}

	if m.DefaultRouteGroup != nil {
		if err := m.DefaultRouteGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultRouteGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultRouteGroup")
			}
			return err
		}
	}

	return nil
}

func (m *SandboxSpec) validateEndpoints(formats strfmt.Registry) error {
	if swag.IsZero(m.Endpoints) { // not required
		return nil
	}

	for i := 0; i < len(m.Endpoints); i++ {
		if swag.IsZero(m.Endpoints[i]) { // not required
			continue
		}

		if m.Endpoints[i] != nil {
			if err := m.Endpoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("endpoints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("endpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SandboxSpec) validateForks(formats strfmt.Registry) error {

	if err := validate.Required("forks", "body", m.Forks); err != nil {
		return err
	}

	for i := 0; i < len(m.Forks); i++ {
		if swag.IsZero(m.Forks[i]) { // not required
			continue
		}

		if m.Forks[i] != nil {
			if err := m.Forks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("forks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("forks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SandboxSpec) validateLocal(formats strfmt.Registry) error {
	if swag.IsZero(m.Local) { // not required
		return nil
	}

	for i := 0; i < len(m.Local); i++ {
		if swag.IsZero(m.Local[i]) { // not required
			continue
		}

		if m.Local[i] != nil {
			if err := m.Local[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("local" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("local" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SandboxSpec) validateMiddleware(formats strfmt.Registry) error {
	if swag.IsZero(m.Middleware) { // not required
		return nil
	}

	for i := 0; i < len(m.Middleware); i++ {
		if swag.IsZero(m.Middleware[i]) { // not required
			continue
		}

		if m.Middleware[i] != nil {
			if err := m.Middleware[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("middleware" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("middleware" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SandboxSpec) validateResources(formats strfmt.Registry) error {
	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	for i := 0; i < len(m.Resources); i++ {
		if swag.IsZero(m.Resources[i]) { // not required
			continue
		}

		if m.Resources[i] != nil {
			if err := m.Resources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SandboxSpec) validateRouting(formats strfmt.Registry) error {
	if swag.IsZero(m.Routing) { // not required
		return nil
	}

	if m.Routing != nil {
		if err := m.Routing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("routing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("routing")
			}
			return err
		}
	}

	return nil
}

func (m *SandboxSpec) validateTTL(formats strfmt.Registry) error {
	if swag.IsZero(m.TTL) { // not required
		return nil
	}

	if m.TTL != nil {
		if err := m.TTL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ttl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ttl")
			}
			return err
		}
	}

	return nil
}

func (m *SandboxSpec) validateVirtual(formats strfmt.Registry) error {
	if swag.IsZero(m.Virtual) { // not required
		return nil
	}

	for i := 0; i < len(m.Virtual); i++ {
		if swag.IsZero(m.Virtual[i]) { // not required
			continue
		}

		if m.Virtual[i] != nil {
			if err := m.Virtual[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("virtual" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("virtual" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this sandbox spec based on the context it is used
func (m *SandboxSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDefaultRouteGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEndpoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateForks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMiddleware(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRouting(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTTL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVirtual(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SandboxSpec) contextValidateDefaultRouteGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultRouteGroup != nil {

		if swag.IsZero(m.DefaultRouteGroup) { // not required
			return nil
		}

		if err := m.DefaultRouteGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultRouteGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultRouteGroup")
			}
			return err
		}
	}

	return nil
}

func (m *SandboxSpec) contextValidateEndpoints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Endpoints); i++ {

		if m.Endpoints[i] != nil {

			if swag.IsZero(m.Endpoints[i]) { // not required
				return nil
			}

			if err := m.Endpoints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("endpoints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("endpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SandboxSpec) contextValidateForks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Forks); i++ {

		if m.Forks[i] != nil {

			if swag.IsZero(m.Forks[i]) { // not required
				return nil
			}

			if err := m.Forks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("forks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("forks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SandboxSpec) contextValidateLocal(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Local); i++ {

		if m.Local[i] != nil {

			if swag.IsZero(m.Local[i]) { // not required
				return nil
			}

			if err := m.Local[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("local" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("local" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SandboxSpec) contextValidateMiddleware(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Middleware); i++ {

		if m.Middleware[i] != nil {

			if swag.IsZero(m.Middleware[i]) { // not required
				return nil
			}

			if err := m.Middleware[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("middleware" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("middleware" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SandboxSpec) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Resources); i++ {

		if m.Resources[i] != nil {

			if swag.IsZero(m.Resources[i]) { // not required
				return nil
			}

			if err := m.Resources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SandboxSpec) contextValidateRouting(ctx context.Context, formats strfmt.Registry) error {

	if m.Routing != nil {

		if swag.IsZero(m.Routing) { // not required
			return nil
		}

		if err := m.Routing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("routing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("routing")
			}
			return err
		}
	}

	return nil
}

func (m *SandboxSpec) contextValidateTTL(ctx context.Context, formats strfmt.Registry) error {

	if m.TTL != nil {

		if swag.IsZero(m.TTL) { // not required
			return nil
		}

		if err := m.TTL.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ttl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ttl")
			}
			return err
		}
	}

	return nil
}

func (m *SandboxSpec) contextValidateVirtual(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Virtual); i++ {

		if m.Virtual[i] != nil {

			if swag.IsZero(m.Virtual[i]) { // not required
				return nil
			}

			if err := m.Virtual[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("virtual" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("virtual" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SandboxSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SandboxSpec) UnmarshalBinary(b []byte) error {
	var res SandboxSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
