// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SandboxesEnvOpName sandboxes env op name
//
// swagger:model sandboxes.EnvOpName
type SandboxesEnvOpName string

func NewSandboxesEnvOpName(value SandboxesEnvOpName) *SandboxesEnvOpName {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SandboxesEnvOpName.
func (m SandboxesEnvOpName) Pointer() *SandboxesEnvOpName {
	return &m
}

const (

	// SandboxesEnvOpNameUpsert captures enum value "upsert"
	SandboxesEnvOpNameUpsert SandboxesEnvOpName = "upsert"

	// SandboxesEnvOpNameDelete captures enum value "delete"
	SandboxesEnvOpNameDelete SandboxesEnvOpName = "delete"
)

// for schema
var sandboxesEnvOpNameEnum []interface{}

func init() {
	var res []SandboxesEnvOpName
	if err := json.Unmarshal([]byte(`["upsert","delete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sandboxesEnvOpNameEnum = append(sandboxesEnvOpNameEnum, v)
	}
}

func (m SandboxesEnvOpName) validateSandboxesEnvOpNameEnum(path, location string, value SandboxesEnvOpName) error {
	if err := validate.EnumCase(path, location, value, sandboxesEnvOpNameEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this sandboxes env op name
func (m SandboxesEnvOpName) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSandboxesEnvOpNameEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this sandboxes env op name based on context it is used
func (m SandboxesEnvOpName) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
