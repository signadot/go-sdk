// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RunnergroupsSpec runnergroups spec
//
// swagger:model runnergroups.Spec
type RunnergroupsSpec struct {

	// cluster
	Cluster string `json:"cluster,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// Duration represents the duration until routegroup's end of life.
	// It should be an unsigned integer not exceeding 32 bits followed by
	// a units character, which can be one of the following.
	//   - 'm' for minutes
	//   - 'h' for hours
	//   - 'd' for days
	//   - 'w' for weeks
	JobTimeout string `json:"jobTimeout,omitempty"`

	// labels
	Labels map[string]string `json:"labels,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// pod template
	PodTemplate interface{} `json:"podTemplate,omitempty"`

	// scaling
	Scaling *RunnergroupsScaling `json:"scaling,omitempty"`
}

// Validate validates this runnergroups spec
func (m *RunnergroupsSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScaling(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RunnergroupsSpec) validateScaling(formats strfmt.Registry) error {
	if swag.IsZero(m.Scaling) { // not required
		return nil
	}

	if m.Scaling != nil {
		if err := m.Scaling.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scaling")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scaling")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this runnergroups spec based on the context it is used
func (m *RunnergroupsSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateScaling(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RunnergroupsSpec) contextValidateScaling(ctx context.Context, formats strfmt.Registry) error {

	if m.Scaling != nil {

		if swag.IsZero(m.Scaling) { // not required
			return nil
		}

		if err := m.Scaling.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scaling")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scaling")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RunnergroupsSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RunnergroupsSpec) UnmarshalBinary(b []byte) error {
	var res RunnergroupsSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
