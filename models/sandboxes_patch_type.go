// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SandboxesPatchType sandboxes patch type
//
// swagger:model sandboxes.PatchType
type SandboxesPatchType string

func NewSandboxesPatchType(value SandboxesPatchType) *SandboxesPatchType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SandboxesPatchType.
func (m SandboxesPatchType) Pointer() *SandboxesPatchType {
	return &m
}

const (

	// SandboxesPatchTypeStrategic captures enum value "strategic"
	SandboxesPatchTypeStrategic SandboxesPatchType = "strategic"

	// SandboxesPatchTypeMerge captures enum value "merge"
	SandboxesPatchTypeMerge SandboxesPatchType = "merge"

	// SandboxesPatchTypeJSON captures enum value "json"
	SandboxesPatchTypeJSON SandboxesPatchType = "json"

	// SandboxesPatchTypeSignadotEnv captures enum value "signadot/env"
	SandboxesPatchTypeSignadotEnv SandboxesPatchType = "signadot/env"

	// SandboxesPatchTypeSignadotImage captures enum value "signadot/image"
	SandboxesPatchTypeSignadotImage SandboxesPatchType = "signadot/image"
)

// for schema
var sandboxesPatchTypeEnum []interface{}

func init() {
	var res []SandboxesPatchType
	if err := json.Unmarshal([]byte(`["strategic","merge","json","signadot/env","signadot/image"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sandboxesPatchTypeEnum = append(sandboxesPatchTypeEnum, v)
	}
}

func (m SandboxesPatchType) validateSandboxesPatchTypeEnum(path, location string, value SandboxesPatchType) error {
	if err := validate.EnumCase(path, location, value, sandboxesPatchTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this sandboxes patch type
func (m SandboxesPatchType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSandboxesPatchTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this sandboxes patch type based on context it is used
func (m SandboxesPatchType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
