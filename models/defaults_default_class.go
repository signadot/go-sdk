// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DefaultsDefaultClass defaults default class
//
// swagger:model defaults.DefaultClass
type DefaultsDefaultClass string

func NewDefaultsDefaultClass(value DefaultsDefaultClass) *DefaultsDefaultClass {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DefaultsDefaultClass.
func (m DefaultsDefaultClass) Pointer() *DefaultsDefaultClass {
	return &m
}

const (

	// DefaultsDefaultClassTTL captures enum value "ttl"
	DefaultsDefaultClassTTL DefaultsDefaultClass = "ttl"
)

// for schema
var defaultsDefaultClassEnum []interface{}

func init() {
	var res []DefaultsDefaultClass
	if err := json.Unmarshal([]byte(`["ttl"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		defaultsDefaultClassEnum = append(defaultsDefaultClassEnum, v)
	}
}

func (m DefaultsDefaultClass) validateDefaultsDefaultClassEnum(path, location string, value DefaultsDefaultClass) error {
	if err := validate.EnumCase(path, location, value, defaultsDefaultClassEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this defaults default class
func (m DefaultsDefaultClass) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDefaultsDefaultClassEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this defaults default class based on context it is used
func (m DefaultsDefaultClass) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
