// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TestExecutionSpec test execution spec
//
// swagger:model TestExecutionSpec
type TestExecutionSpec struct {

	// Execution context
	ExecutionContext struct {
		TestExecutionContext
	} `json:"executionContext,omitempty"`

	// external
	External *ExternalSpec `json:"external,omitempty"`

	// Hosted/External source information, these are one or the other
	Hosted struct {
		HostedSpec
	} `json:"hosted,omitempty"`

	// Labels
	Labels map[string]string `json:"labels,omitempty"`
}

// Validate validates this test execution spec
func (m *TestExecutionSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExecutionContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHosted(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestExecutionSpec) validateExecutionContext(formats strfmt.Registry) error {
	if swag.IsZero(m.ExecutionContext) { // not required
		return nil
	}

	return nil
}

func (m *TestExecutionSpec) validateExternal(formats strfmt.Registry) error {
	if swag.IsZero(m.External) { // not required
		return nil
	}

	if m.External != nil {
		if err := m.External.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("external")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("external")
			}
			return err
		}
	}

	return nil
}

func (m *TestExecutionSpec) validateHosted(formats strfmt.Registry) error {
	if swag.IsZero(m.Hosted) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this test execution spec based on the context it is used
func (m *TestExecutionSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExecutionContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHosted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestExecutionSpec) contextValidateExecutionContext(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *TestExecutionSpec) contextValidateExternal(ctx context.Context, formats strfmt.Registry) error {

	if m.External != nil {

		if swag.IsZero(m.External) { // not required
			return nil
		}

		if err := m.External.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("external")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("external")
			}
			return err
		}
	}

	return nil
}

func (m *TestExecutionSpec) contextValidateHosted(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *TestExecutionSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestExecutionSpec) UnmarshalBinary(b []byte) error {
	var res TestExecutionSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
