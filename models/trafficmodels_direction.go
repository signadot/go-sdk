// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TrafficmodelsDirection trafficmodels direction
//
// swagger:model trafficmodels.Direction
type TrafficmodelsDirection string

func NewTrafficmodelsDirection(value TrafficmodelsDirection) *TrafficmodelsDirection {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TrafficmodelsDirection.
func (m TrafficmodelsDirection) Pointer() *TrafficmodelsDirection {
	return &m
}

const (

	// TrafficmodelsDirectionInbound captures enum value "Inbound"
	TrafficmodelsDirectionInbound TrafficmodelsDirection = "Inbound"

	// TrafficmodelsDirectionOutbound captures enum value "Outbound"
	TrafficmodelsDirectionOutbound TrafficmodelsDirection = "Outbound"
)

// for schema
var trafficmodelsDirectionEnum []interface{}

func init() {
	var res []TrafficmodelsDirection
	if err := json.Unmarshal([]byte(`["Inbound","Outbound"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		trafficmodelsDirectionEnum = append(trafficmodelsDirectionEnum, v)
	}
}

func (m TrafficmodelsDirection) validateTrafficmodelsDirectionEnum(path, location string, value TrafficmodelsDirection) error {
	if err := validate.EnumCase(path, location, value, trafficmodelsDirectionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this trafficmodels direction
func (m TrafficmodelsDirection) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTrafficmodelsDirectionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this trafficmodels direction based on context it is used
func (m TrafficmodelsDirection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
