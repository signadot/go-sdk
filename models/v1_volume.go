// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1Volume v1 volume
//
// swagger:model v1.Volume
type V1Volume struct {

	// aws elastic block store
	AwsElasticBlockStore *V1AWSElasticBlockStoreVolumeSource `json:"awsElasticBlockStore,omitempty"`

	// azure disk
	AzureDisk *V1AzureDiskVolumeSource `json:"azureDisk,omitempty"`

	// azure file
	AzureFile *V1AzureFileVolumeSource `json:"azureFile,omitempty"`

	// cephfs
	Cephfs *V1CephFSVolumeSource `json:"cephfs,omitempty"`

	// cinder
	Cinder *V1CinderVolumeSource `json:"cinder,omitempty"`

	// config map
	ConfigMap *V1ConfigMapVolumeSource `json:"configMap,omitempty"`

	// csi
	Csi *V1CSIVolumeSource `json:"csi,omitempty"`

	// downward API
	DownwardAPI *V1DownwardAPIVolumeSource `json:"downwardAPI,omitempty"`

	// empty dir
	EmptyDir *V1EmptyDirVolumeSource `json:"emptyDir,omitempty"`

	// ephemeral
	Ephemeral *V1EphemeralVolumeSource `json:"ephemeral,omitempty"`

	// fc
	Fc *V1FCVolumeSource `json:"fc,omitempty"`

	// flex volume
	FlexVolume *V1FlexVolumeSource `json:"flexVolume,omitempty"`

	// flocker
	Flocker *V1FlockerVolumeSource `json:"flocker,omitempty"`

	// gce persistent disk
	GcePersistentDisk *V1GCEPersistentDiskVolumeSource `json:"gcePersistentDisk,omitempty"`

	// git repo
	GitRepo *V1GitRepoVolumeSource `json:"gitRepo,omitempty"`

	// glusterfs
	Glusterfs *V1GlusterfsVolumeSource `json:"glusterfs,omitempty"`

	// host path
	HostPath *V1HostPathVolumeSource `json:"hostPath,omitempty"`

	// iscsi
	Iscsi *V1ISCSIVolumeSource `json:"iscsi,omitempty"`

	// name of the volume.
	// Must be a DNS_LABEL and unique within the pod.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name string `json:"name,omitempty"`

	// nfs
	Nfs *V1NFSVolumeSource `json:"nfs,omitempty"`

	// persistent volume claim
	PersistentVolumeClaim *V1PersistentVolumeClaimVolumeSource `json:"persistentVolumeClaim,omitempty"`

	// photon persistent disk
	PhotonPersistentDisk *V1PhotonPersistentDiskVolumeSource `json:"photonPersistentDisk,omitempty"`

	// portworx volume
	PortworxVolume *V1PortworxVolumeSource `json:"portworxVolume,omitempty"`

	// projected
	Projected *V1ProjectedVolumeSource `json:"projected,omitempty"`

	// quobyte
	Quobyte *V1QuobyteVolumeSource `json:"quobyte,omitempty"`

	// rbd
	Rbd *V1RBDVolumeSource `json:"rbd,omitempty"`

	// scale i o
	ScaleIO *V1ScaleIOVolumeSource `json:"scaleIO,omitempty"`

	// secret
	Secret *V1SecretVolumeSource `json:"secret,omitempty"`

	// storageos
	Storageos *V1StorageOSVolumeSource `json:"storageos,omitempty"`

	// vsphere volume
	VsphereVolume *V1VsphereVirtualDiskVolumeSource `json:"vsphereVolume,omitempty"`
}

// Validate validates this v1 volume
func (m *V1Volume) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsElasticBlockStore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureDisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureFile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCephfs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCinder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigMap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCsi(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownwardAPI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmptyDir(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEphemeral(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlexVolume(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlocker(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcePersistentDisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGitRepo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGlusterfs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsi(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNfs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersistentVolumeClaim(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhotonPersistentDisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortworxVolume(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjected(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuobyte(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRbd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScaleIO(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVsphereVolume(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Volume) validateAwsElasticBlockStore(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsElasticBlockStore) { // not required
		return nil
	}

	if m.AwsElasticBlockStore != nil {
		if err := m.AwsElasticBlockStore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsElasticBlockStore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsElasticBlockStore")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) validateAzureDisk(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureDisk) { // not required
		return nil
	}

	if m.AzureDisk != nil {
		if err := m.AzureDisk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureDisk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureDisk")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) validateAzureFile(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureFile) { // not required
		return nil
	}

	if m.AzureFile != nil {
		if err := m.AzureFile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureFile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureFile")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) validateCephfs(formats strfmt.Registry) error {
	if swag.IsZero(m.Cephfs) { // not required
		return nil
	}

	if m.Cephfs != nil {
		if err := m.Cephfs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cephfs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cephfs")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) validateCinder(formats strfmt.Registry) error {
	if swag.IsZero(m.Cinder) { // not required
		return nil
	}

	if m.Cinder != nil {
		if err := m.Cinder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cinder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cinder")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) validateConfigMap(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfigMap) { // not required
		return nil
	}

	if m.ConfigMap != nil {
		if err := m.ConfigMap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configMap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configMap")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) validateCsi(formats strfmt.Registry) error {
	if swag.IsZero(m.Csi) { // not required
		return nil
	}

	if m.Csi != nil {
		if err := m.Csi.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("csi")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("csi")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) validateDownwardAPI(formats strfmt.Registry) error {
	if swag.IsZero(m.DownwardAPI) { // not required
		return nil
	}

	if m.DownwardAPI != nil {
		if err := m.DownwardAPI.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downwardAPI")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("downwardAPI")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) validateEmptyDir(formats strfmt.Registry) error {
	if swag.IsZero(m.EmptyDir) { // not required
		return nil
	}

	if m.EmptyDir != nil {
		if err := m.EmptyDir.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emptyDir")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("emptyDir")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) validateEphemeral(formats strfmt.Registry) error {
	if swag.IsZero(m.Ephemeral) { // not required
		return nil
	}

	if m.Ephemeral != nil {
		if err := m.Ephemeral.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ephemeral")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ephemeral")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) validateFc(formats strfmt.Registry) error {
	if swag.IsZero(m.Fc) { // not required
		return nil
	}

	if m.Fc != nil {
		if err := m.Fc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fc")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) validateFlexVolume(formats strfmt.Registry) error {
	if swag.IsZero(m.FlexVolume) { // not required
		return nil
	}

	if m.FlexVolume != nil {
		if err := m.FlexVolume.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flexVolume")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flexVolume")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) validateFlocker(formats strfmt.Registry) error {
	if swag.IsZero(m.Flocker) { // not required
		return nil
	}

	if m.Flocker != nil {
		if err := m.Flocker.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flocker")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flocker")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) validateGcePersistentDisk(formats strfmt.Registry) error {
	if swag.IsZero(m.GcePersistentDisk) { // not required
		return nil
	}

	if m.GcePersistentDisk != nil {
		if err := m.GcePersistentDisk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcePersistentDisk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcePersistentDisk")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) validateGitRepo(formats strfmt.Registry) error {
	if swag.IsZero(m.GitRepo) { // not required
		return nil
	}

	if m.GitRepo != nil {
		if err := m.GitRepo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gitRepo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gitRepo")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) validateGlusterfs(formats strfmt.Registry) error {
	if swag.IsZero(m.Glusterfs) { // not required
		return nil
	}

	if m.Glusterfs != nil {
		if err := m.Glusterfs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("glusterfs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("glusterfs")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) validateHostPath(formats strfmt.Registry) error {
	if swag.IsZero(m.HostPath) { // not required
		return nil
	}

	if m.HostPath != nil {
		if err := m.HostPath.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostPath")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hostPath")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) validateIscsi(formats strfmt.Registry) error {
	if swag.IsZero(m.Iscsi) { // not required
		return nil
	}

	if m.Iscsi != nil {
		if err := m.Iscsi.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iscsi")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iscsi")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) validateNfs(formats strfmt.Registry) error {
	if swag.IsZero(m.Nfs) { // not required
		return nil
	}

	if m.Nfs != nil {
		if err := m.Nfs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nfs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nfs")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) validatePersistentVolumeClaim(formats strfmt.Registry) error {
	if swag.IsZero(m.PersistentVolumeClaim) { // not required
		return nil
	}

	if m.PersistentVolumeClaim != nil {
		if err := m.PersistentVolumeClaim.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("persistentVolumeClaim")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("persistentVolumeClaim")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) validatePhotonPersistentDisk(formats strfmt.Registry) error {
	if swag.IsZero(m.PhotonPersistentDisk) { // not required
		return nil
	}

	if m.PhotonPersistentDisk != nil {
		if err := m.PhotonPersistentDisk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("photonPersistentDisk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("photonPersistentDisk")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) validatePortworxVolume(formats strfmt.Registry) error {
	if swag.IsZero(m.PortworxVolume) { // not required
		return nil
	}

	if m.PortworxVolume != nil {
		if err := m.PortworxVolume.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("portworxVolume")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("portworxVolume")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) validateProjected(formats strfmt.Registry) error {
	if swag.IsZero(m.Projected) { // not required
		return nil
	}

	if m.Projected != nil {
		if err := m.Projected.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projected")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("projected")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) validateQuobyte(formats strfmt.Registry) error {
	if swag.IsZero(m.Quobyte) { // not required
		return nil
	}

	if m.Quobyte != nil {
		if err := m.Quobyte.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quobyte")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quobyte")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) validateRbd(formats strfmt.Registry) error {
	if swag.IsZero(m.Rbd) { // not required
		return nil
	}

	if m.Rbd != nil {
		if err := m.Rbd.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rbd")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rbd")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) validateScaleIO(formats strfmt.Registry) error {
	if swag.IsZero(m.ScaleIO) { // not required
		return nil
	}

	if m.ScaleIO != nil {
		if err := m.ScaleIO.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scaleIO")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scaleIO")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) validateSecret(formats strfmt.Registry) error {
	if swag.IsZero(m.Secret) { // not required
		return nil
	}

	if m.Secret != nil {
		if err := m.Secret.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secret")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secret")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) validateStorageos(formats strfmt.Registry) error {
	if swag.IsZero(m.Storageos) { // not required
		return nil
	}

	if m.Storageos != nil {
		if err := m.Storageos.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageos")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageos")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) validateVsphereVolume(formats strfmt.Registry) error {
	if swag.IsZero(m.VsphereVolume) { // not required
		return nil
	}

	if m.VsphereVolume != nil {
		if err := m.VsphereVolume.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vsphereVolume")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vsphereVolume")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 volume based on the context it is used
func (m *V1Volume) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsElasticBlockStore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureDisk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureFile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCephfs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCinder(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfigMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCsi(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDownwardAPI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmptyDir(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEphemeral(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFlexVolume(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFlocker(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGcePersistentDisk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGitRepo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGlusterfs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostPath(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsi(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNfs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePersistentVolumeClaim(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhotonPersistentDisk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePortworxVolume(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProjected(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuobyte(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRbd(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScaleIO(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecret(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageos(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVsphereVolume(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Volume) contextValidateAwsElasticBlockStore(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsElasticBlockStore != nil {
		if err := m.AwsElasticBlockStore.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsElasticBlockStore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsElasticBlockStore")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) contextValidateAzureDisk(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureDisk != nil {
		if err := m.AzureDisk.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureDisk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureDisk")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) contextValidateAzureFile(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureFile != nil {
		if err := m.AzureFile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureFile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureFile")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) contextValidateCephfs(ctx context.Context, formats strfmt.Registry) error {

	if m.Cephfs != nil {
		if err := m.Cephfs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cephfs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cephfs")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) contextValidateCinder(ctx context.Context, formats strfmt.Registry) error {

	if m.Cinder != nil {
		if err := m.Cinder.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cinder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cinder")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) contextValidateConfigMap(ctx context.Context, formats strfmt.Registry) error {

	if m.ConfigMap != nil {
		if err := m.ConfigMap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configMap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configMap")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) contextValidateCsi(ctx context.Context, formats strfmt.Registry) error {

	if m.Csi != nil {
		if err := m.Csi.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("csi")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("csi")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) contextValidateDownwardAPI(ctx context.Context, formats strfmt.Registry) error {

	if m.DownwardAPI != nil {
		if err := m.DownwardAPI.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downwardAPI")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("downwardAPI")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) contextValidateEmptyDir(ctx context.Context, formats strfmt.Registry) error {

	if m.EmptyDir != nil {
		if err := m.EmptyDir.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emptyDir")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("emptyDir")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) contextValidateEphemeral(ctx context.Context, formats strfmt.Registry) error {

	if m.Ephemeral != nil {
		if err := m.Ephemeral.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ephemeral")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ephemeral")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) contextValidateFc(ctx context.Context, formats strfmt.Registry) error {

	if m.Fc != nil {
		if err := m.Fc.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fc")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) contextValidateFlexVolume(ctx context.Context, formats strfmt.Registry) error {

	if m.FlexVolume != nil {
		if err := m.FlexVolume.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flexVolume")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flexVolume")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) contextValidateFlocker(ctx context.Context, formats strfmt.Registry) error {

	if m.Flocker != nil {
		if err := m.Flocker.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flocker")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flocker")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) contextValidateGcePersistentDisk(ctx context.Context, formats strfmt.Registry) error {

	if m.GcePersistentDisk != nil {
		if err := m.GcePersistentDisk.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcePersistentDisk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcePersistentDisk")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) contextValidateGitRepo(ctx context.Context, formats strfmt.Registry) error {

	if m.GitRepo != nil {
		if err := m.GitRepo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gitRepo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gitRepo")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) contextValidateGlusterfs(ctx context.Context, formats strfmt.Registry) error {

	if m.Glusterfs != nil {
		if err := m.Glusterfs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("glusterfs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("glusterfs")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) contextValidateHostPath(ctx context.Context, formats strfmt.Registry) error {

	if m.HostPath != nil {
		if err := m.HostPath.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostPath")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hostPath")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) contextValidateIscsi(ctx context.Context, formats strfmt.Registry) error {

	if m.Iscsi != nil {
		if err := m.Iscsi.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iscsi")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iscsi")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) contextValidateNfs(ctx context.Context, formats strfmt.Registry) error {

	if m.Nfs != nil {
		if err := m.Nfs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nfs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nfs")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) contextValidatePersistentVolumeClaim(ctx context.Context, formats strfmt.Registry) error {

	if m.PersistentVolumeClaim != nil {
		if err := m.PersistentVolumeClaim.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("persistentVolumeClaim")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("persistentVolumeClaim")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) contextValidatePhotonPersistentDisk(ctx context.Context, formats strfmt.Registry) error {

	if m.PhotonPersistentDisk != nil {
		if err := m.PhotonPersistentDisk.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("photonPersistentDisk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("photonPersistentDisk")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) contextValidatePortworxVolume(ctx context.Context, formats strfmt.Registry) error {

	if m.PortworxVolume != nil {
		if err := m.PortworxVolume.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("portworxVolume")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("portworxVolume")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) contextValidateProjected(ctx context.Context, formats strfmt.Registry) error {

	if m.Projected != nil {
		if err := m.Projected.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projected")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("projected")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) contextValidateQuobyte(ctx context.Context, formats strfmt.Registry) error {

	if m.Quobyte != nil {
		if err := m.Quobyte.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quobyte")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quobyte")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) contextValidateRbd(ctx context.Context, formats strfmt.Registry) error {

	if m.Rbd != nil {
		if err := m.Rbd.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rbd")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rbd")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) contextValidateScaleIO(ctx context.Context, formats strfmt.Registry) error {

	if m.ScaleIO != nil {
		if err := m.ScaleIO.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scaleIO")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scaleIO")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) contextValidateSecret(ctx context.Context, formats strfmt.Registry) error {

	if m.Secret != nil {
		if err := m.Secret.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secret")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secret")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) contextValidateStorageos(ctx context.Context, formats strfmt.Registry) error {

	if m.Storageos != nil {
		if err := m.Storageos.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageos")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageos")
			}
			return err
		}
	}

	return nil
}

func (m *V1Volume) contextValidateVsphereVolume(ctx context.Context, formats strfmt.Registry) error {

	if m.VsphereVolume != nil {
		if err := m.VsphereVolume.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vsphereVolume")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vsphereVolume")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Volume) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Volume) UnmarshalBinary(b []byte) error {
	var res V1Volume
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
