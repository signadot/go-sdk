// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ClustersDevMeshWorkloadStatus clusters dev mesh workload status
//
// swagger:model clusters.DevMeshWorkloadStatus
type ClustersDevMeshWorkloadStatus string

func NewClustersDevMeshWorkloadStatus(value ClustersDevMeshWorkloadStatus) *ClustersDevMeshWorkloadStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ClustersDevMeshWorkloadStatus.
func (m ClustersDevMeshWorkloadStatus) Pointer() *ClustersDevMeshWorkloadStatus {
	return &m
}

const (

	// ClustersDevMeshWorkloadStatusOk captures enum value "ok"
	ClustersDevMeshWorkloadStatusOk ClustersDevMeshWorkloadStatus = "ok"

	// ClustersDevMeshWorkloadStatusMissing captures enum value "missing"
	ClustersDevMeshWorkloadStatusMissing ClustersDevMeshWorkloadStatus = "missing"

	// ClustersDevMeshWorkloadStatusNeedsUpdate captures enum value "needs_update"
	ClustersDevMeshWorkloadStatusNeedsUpdate ClustersDevMeshWorkloadStatus = "needs_update"
)

// for schema
var clustersDevMeshWorkloadStatusEnum []interface{}

func init() {
	var res []ClustersDevMeshWorkloadStatus
	if err := json.Unmarshal([]byte(`["ok","missing","needs_update"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clustersDevMeshWorkloadStatusEnum = append(clustersDevMeshWorkloadStatusEnum, v)
	}
}

func (m ClustersDevMeshWorkloadStatus) validateClustersDevMeshWorkloadStatusEnum(path, location string, value ClustersDevMeshWorkloadStatus) error {
	if err := validate.EnumCase(path, location, value, clustersDevMeshWorkloadStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this clusters dev mesh workload status
func (m ClustersDevMeshWorkloadStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClustersDevMeshWorkloadStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this clusters dev mesh workload status based on context it is used
func (m ClustersDevMeshWorkloadStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
