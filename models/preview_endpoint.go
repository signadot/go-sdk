// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PreviewEndpoint preview endpoint
//
// swagger:model PreviewEndpoint
type PreviewEndpoint struct {

	// baseline preview URL
	BaselinePreviewURL string `json:"baselinePreviewURL,omitempty"`

	// cluster
	Cluster string `json:"cluster,omitempty"`

	// cluster ID
	ClusterID string `json:"clusterID,omitempty"`

	// fork of
	ForkOf *ForkOf `json:"forkOf,omitempty"`

	// host
	Host string `json:"host,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// port
	Port int64 `json:"port,omitempty"`

	// preview URL
	PreviewURL string `json:"previewURL,omitempty"`

	// protocol
	Protocol string `json:"protocol,omitempty"`

	// route type
	RouteType string `json:"routeType,omitempty"`
}

// Validate validates this preview endpoint
func (m *PreviewEndpoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateForkOf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PreviewEndpoint) validateForkOf(formats strfmt.Registry) error {
	if swag.IsZero(m.ForkOf) { // not required
		return nil
	}

	if m.ForkOf != nil {
		if err := m.ForkOf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("forkOf")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("forkOf")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this preview endpoint based on the context it is used
func (m *PreviewEndpoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateForkOf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PreviewEndpoint) contextValidateForkOf(ctx context.Context, formats strfmt.Registry) error {

	if m.ForkOf != nil {
		if err := m.ForkOf.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("forkOf")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("forkOf")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PreviewEndpoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PreviewEndpoint) UnmarshalBinary(b []byte) error {
	var res PreviewEndpoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
