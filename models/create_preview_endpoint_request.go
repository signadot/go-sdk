// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreatePreviewEndpointRequest create preview endpoint request
//
// swagger:model CreatePreviewEndpointRequest
type CreatePreviewEndpointRequest struct {

	// fork of
	ForkOf *ForkOf `json:"forkOf,omitempty"`

	// Host is the host-name of a service within Kubernetes of the form
	// `service-name.namespace.svc`. Only required when RouteType is 'static'
	Host string `json:"host,omitempty"`

	// Name of this endpoint.
	// If not specified, a name will be generated automatically.
	Name string `json:"name,omitempty"`

	// Port is the port on the above host that the preview will point to.
	// Only required when RouteType is 'static'
	Port int64 `json:"port,omitempty"`

	// Protocol of the endpoint that we will be connecting to for this preview URL. One of 'http', 'https', or 'grpc'.
	// If not specified, the default is 'http'.
	Protocol string `json:"protocol,omitempty"`

	// RouteType is one of 'static' or 'fork'. If you choose a route of type 'static',
	// this preview endpoint will route traffic to the Host / Port specified. If you
	// choose a route of type 'fork', this preview endpoint will route traffic to a forked entity as specified in forkOf.
	// Required: true
	RouteType *string `json:"routeType"`
}

// Validate validates this create preview endpoint request
func (m *CreatePreviewEndpointRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateForkOf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreatePreviewEndpointRequest) validateForkOf(formats strfmt.Registry) error {
	if swag.IsZero(m.ForkOf) { // not required
		return nil
	}

	if m.ForkOf != nil {
		if err := m.ForkOf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("forkOf")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("forkOf")
			}
			return err
		}
	}

	return nil
}

func (m *CreatePreviewEndpointRequest) validateRouteType(formats strfmt.Registry) error {

	if err := validate.Required("routeType", "body", m.RouteType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create preview endpoint request based on the context it is used
func (m *CreatePreviewEndpointRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateForkOf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreatePreviewEndpointRequest) contextValidateForkOf(ctx context.Context, formats strfmt.Registry) error {

	if m.ForkOf != nil {
		if err := m.ForkOf.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("forkOf")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("forkOf")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreatePreviewEndpointRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreatePreviewEndpointRequest) UnmarshalBinary(b []byte) error {
	var res CreatePreviewEndpointRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
