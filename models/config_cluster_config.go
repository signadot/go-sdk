// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConfigClusterConfig config cluster config
//
// swagger:model config.ClusterConfig
type ConfigClusterConfig struct {

	// allowed namespaces
	AllowedNamespaces []string `json:"allowedNamespaces"`

	// routing
	Routing *ConfigRoutingConfig `json:"routing,omitempty"`

	// sandbox traffic manager
	SandboxTrafficManager *ConfigSandboxTrafficManagerConfig `json:"sandboxTrafficManager,omitempty"`

	// traffic capture
	TrafficCapture *ConfigTrafficCaptureConfig `json:"trafficCapture,omitempty"`
}

// Validate validates this config cluster config
func (m *ConfigClusterConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRouting(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSandboxTrafficManager(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrafficCapture(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigClusterConfig) validateRouting(formats strfmt.Registry) error {
	if swag.IsZero(m.Routing) { // not required
		return nil
	}

	if m.Routing != nil {
		if err := m.Routing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("routing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("routing")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigClusterConfig) validateSandboxTrafficManager(formats strfmt.Registry) error {
	if swag.IsZero(m.SandboxTrafficManager) { // not required
		return nil
	}

	if m.SandboxTrafficManager != nil {
		if err := m.SandboxTrafficManager.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sandboxTrafficManager")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sandboxTrafficManager")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigClusterConfig) validateTrafficCapture(formats strfmt.Registry) error {
	if swag.IsZero(m.TrafficCapture) { // not required
		return nil
	}

	if m.TrafficCapture != nil {
		if err := m.TrafficCapture.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trafficCapture")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trafficCapture")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this config cluster config based on the context it is used
func (m *ConfigClusterConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRouting(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSandboxTrafficManager(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrafficCapture(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigClusterConfig) contextValidateRouting(ctx context.Context, formats strfmt.Registry) error {

	if m.Routing != nil {

		if swag.IsZero(m.Routing) { // not required
			return nil
		}

		if err := m.Routing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("routing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("routing")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigClusterConfig) contextValidateSandboxTrafficManager(ctx context.Context, formats strfmt.Registry) error {

	if m.SandboxTrafficManager != nil {

		if swag.IsZero(m.SandboxTrafficManager) { // not required
			return nil
		}

		if err := m.SandboxTrafficManager.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sandboxTrafficManager")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sandboxTrafficManager")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigClusterConfig) contextValidateTrafficCapture(ctx context.Context, formats strfmt.Registry) error {

	if m.TrafficCapture != nil {

		if swag.IsZero(m.TrafficCapture) { // not required
			return nil
		}

		if err := m.TrafficCapture.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trafficCapture")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trafficCapture")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigClusterConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigClusterConfig) UnmarshalBinary(b []byte) error {
	var res ConfigClusterConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
