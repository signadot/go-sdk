// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// JobsSpec jobs spec
//
// swagger:model jobs.Spec
type JobsSpec struct {

	// cluster
	Cluster string `json:"cluster,omitempty"`

	// command
	Command []string `json:"command"`

	// env
	Env []*JobsEnvItem `json:"env"`

	// labels
	Labels map[string]string `json:"labels,omitempty"`

	// name prefix
	NamePrefix string `json:"namePrefix,omitempty"`

	// routing context
	RoutingContext *JobsRoutingContext `json:"routingContext,omitempty"`

	// runner group
	RunnerGroup string `json:"runnerGroup,omitempty"`

	// script
	Script string `json:"script,omitempty"`

	// upload artifact
	UploadArtifact []*JobsUploadArtifact `json:"uploadArtifact"`
}

// Validate validates this jobs spec
func (m *JobsSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnv(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutingContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploadArtifact(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobsSpec) validateEnv(formats strfmt.Registry) error {
	if swag.IsZero(m.Env) { // not required
		return nil
	}

	for i := 0; i < len(m.Env); i++ {
		if swag.IsZero(m.Env[i]) { // not required
			continue
		}

		if m.Env[i] != nil {
			if err := m.Env[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("env" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("env" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JobsSpec) validateRoutingContext(formats strfmt.Registry) error {
	if swag.IsZero(m.RoutingContext) { // not required
		return nil
	}

	if m.RoutingContext != nil {
		if err := m.RoutingContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("routingContext")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("routingContext")
			}
			return err
		}
	}

	return nil
}

func (m *JobsSpec) validateUploadArtifact(formats strfmt.Registry) error {
	if swag.IsZero(m.UploadArtifact) { // not required
		return nil
	}

	for i := 0; i < len(m.UploadArtifact); i++ {
		if swag.IsZero(m.UploadArtifact[i]) { // not required
			continue
		}

		if m.UploadArtifact[i] != nil {
			if err := m.UploadArtifact[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("uploadArtifact" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("uploadArtifact" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this jobs spec based on the context it is used
func (m *JobsSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEnv(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoutingContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUploadArtifact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobsSpec) contextValidateEnv(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Env); i++ {

		if m.Env[i] != nil {

			if swag.IsZero(m.Env[i]) { // not required
				return nil
			}

			if err := m.Env[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("env" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("env" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JobsSpec) contextValidateRoutingContext(ctx context.Context, formats strfmt.Registry) error {

	if m.RoutingContext != nil {

		if swag.IsZero(m.RoutingContext) { // not required
			return nil
		}

		if err := m.RoutingContext.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("routingContext")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("routingContext")
			}
			return err
		}
	}

	return nil
}

func (m *JobsSpec) contextValidateUploadArtifact(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UploadArtifact); i++ {

		if m.UploadArtifact[i] != nil {

			if swag.IsZero(m.UploadArtifact[i]) { // not required
				return nil
			}

			if err := m.UploadArtifact[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("uploadArtifact" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("uploadArtifact" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobsSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobsSpec) UnmarshalBinary(b []byte) error {
	var res JobsSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
