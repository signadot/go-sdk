/*
Signadot API

API for Signadot Sandboxes

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EnvOp struct for EnvOp
type EnvOp struct {
	// name of container to which it applies
	Container *string `json:"container,omitempty"`
	// environmental variable name
	Name *string `json:"name,omitempty"`
	// upsert or delete
	Operation *string `json:"operation,omitempty"`
	// environmental variable value
	Value *string `json:"value,omitempty"`
	ValueFrom *EnvValueFrom `json:"valueFrom,omitempty"`
}

// NewEnvOp instantiates a new EnvOp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvOp() *EnvOp {
	this := EnvOp{}
	return &this
}

// NewEnvOpWithDefaults instantiates a new EnvOp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvOpWithDefaults() *EnvOp {
	this := EnvOp{}
	return &this
}

// GetContainer returns the Container field value if set, zero value otherwise.
func (o *EnvOp) GetContainer() string {
	if o == nil || o.Container == nil {
		var ret string
		return ret
	}
	return *o.Container
}

// GetContainerOk returns a tuple with the Container field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvOp) GetContainerOk() (*string, bool) {
	if o == nil || o.Container == nil {
		return nil, false
	}
	return o.Container, true
}

// HasContainer returns a boolean if a field has been set.
func (o *EnvOp) HasContainer() bool {
	if o != nil && o.Container != nil {
		return true
	}

	return false
}

// SetContainer gets a reference to the given string and assigns it to the Container field.
func (o *EnvOp) SetContainer(v string) {
	o.Container = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EnvOp) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvOp) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EnvOp) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EnvOp) SetName(v string) {
	o.Name = &v
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *EnvOp) GetOperation() string {
	if o == nil || o.Operation == nil {
		var ret string
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvOp) GetOperationOk() (*string, bool) {
	if o == nil || o.Operation == nil {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *EnvOp) HasOperation() bool {
	if o != nil && o.Operation != nil {
		return true
	}

	return false
}

// SetOperation gets a reference to the given string and assigns it to the Operation field.
func (o *EnvOp) SetOperation(v string) {
	o.Operation = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *EnvOp) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvOp) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *EnvOp) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *EnvOp) SetValue(v string) {
	o.Value = &v
}

// GetValueFrom returns the ValueFrom field value if set, zero value otherwise.
func (o *EnvOp) GetValueFrom() EnvValueFrom {
	if o == nil || o.ValueFrom == nil {
		var ret EnvValueFrom
		return ret
	}
	return *o.ValueFrom
}

// GetValueFromOk returns a tuple with the ValueFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvOp) GetValueFromOk() (*EnvValueFrom, bool) {
	if o == nil || o.ValueFrom == nil {
		return nil, false
	}
	return o.ValueFrom, true
}

// HasValueFrom returns a boolean if a field has been set.
func (o *EnvOp) HasValueFrom() bool {
	if o != nil && o.ValueFrom != nil {
		return true
	}

	return false
}

// SetValueFrom gets a reference to the given EnvValueFrom and assigns it to the ValueFrom field.
func (o *EnvOp) SetValueFrom(v EnvValueFrom) {
	o.ValueFrom = &v
}

func (o EnvOp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Container != nil {
		toSerialize["container"] = o.Container
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Operation != nil {
		toSerialize["operation"] = o.Operation
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.ValueFrom != nil {
		toSerialize["valueFrom"] = o.ValueFrom
	}
	return json.Marshal(toSerialize)
}

type NullableEnvOp struct {
	value *EnvOp
	isSet bool
}

func (v NullableEnvOp) Get() *EnvOp {
	return v.value
}

func (v *NullableEnvOp) Set(val *EnvOp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvOp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvOp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvOp(val *EnvOp) *NullableEnvOp {
	return &NullableEnvOp{value: val, isSet: true}
}

func (v NullableEnvOp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvOp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


