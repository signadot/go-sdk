/*
Signadot API

API for Signadot Sandboxes

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SandboxFork struct for SandboxFork
type SandboxFork struct {
	Customizations *SandboxCustomizations `json:"customizations,omitempty"`
	// Endpoints that correspond to this forked workload
	Endpoints []ForkEndpoint `json:"endpoints,omitempty"`
	ForkOf *ForkOf `json:"forkOf,omitempty"`
}

// NewSandboxFork instantiates a new SandboxFork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSandboxFork() *SandboxFork {
	this := SandboxFork{}
	return &this
}

// NewSandboxForkWithDefaults instantiates a new SandboxFork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSandboxForkWithDefaults() *SandboxFork {
	this := SandboxFork{}
	return &this
}

// GetCustomizations returns the Customizations field value if set, zero value otherwise.
func (o *SandboxFork) GetCustomizations() SandboxCustomizations {
	if o == nil || o.Customizations == nil {
		var ret SandboxCustomizations
		return ret
	}
	return *o.Customizations
}

// GetCustomizationsOk returns a tuple with the Customizations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SandboxFork) GetCustomizationsOk() (*SandboxCustomizations, bool) {
	if o == nil || o.Customizations == nil {
		return nil, false
	}
	return o.Customizations, true
}

// HasCustomizations returns a boolean if a field has been set.
func (o *SandboxFork) HasCustomizations() bool {
	if o != nil && o.Customizations != nil {
		return true
	}

	return false
}

// SetCustomizations gets a reference to the given SandboxCustomizations and assigns it to the Customizations field.
func (o *SandboxFork) SetCustomizations(v SandboxCustomizations) {
	o.Customizations = &v
}

// GetEndpoints returns the Endpoints field value if set, zero value otherwise.
func (o *SandboxFork) GetEndpoints() []ForkEndpoint {
	if o == nil || o.Endpoints == nil {
		var ret []ForkEndpoint
		return ret
	}
	return o.Endpoints
}

// GetEndpointsOk returns a tuple with the Endpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SandboxFork) GetEndpointsOk() ([]ForkEndpoint, bool) {
	if o == nil || o.Endpoints == nil {
		return nil, false
	}
	return o.Endpoints, true
}

// HasEndpoints returns a boolean if a field has been set.
func (o *SandboxFork) HasEndpoints() bool {
	if o != nil && o.Endpoints != nil {
		return true
	}

	return false
}

// SetEndpoints gets a reference to the given []ForkEndpoint and assigns it to the Endpoints field.
func (o *SandboxFork) SetEndpoints(v []ForkEndpoint) {
	o.Endpoints = v
}

// GetForkOf returns the ForkOf field value if set, zero value otherwise.
func (o *SandboxFork) GetForkOf() ForkOf {
	if o == nil || o.ForkOf == nil {
		var ret ForkOf
		return ret
	}
	return *o.ForkOf
}

// GetForkOfOk returns a tuple with the ForkOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SandboxFork) GetForkOfOk() (*ForkOf, bool) {
	if o == nil || o.ForkOf == nil {
		return nil, false
	}
	return o.ForkOf, true
}

// HasForkOf returns a boolean if a field has been set.
func (o *SandboxFork) HasForkOf() bool {
	if o != nil && o.ForkOf != nil {
		return true
	}

	return false
}

// SetForkOf gets a reference to the given ForkOf and assigns it to the ForkOf field.
func (o *SandboxFork) SetForkOf(v ForkOf) {
	o.ForkOf = &v
}

func (o SandboxFork) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Customizations != nil {
		toSerialize["customizations"] = o.Customizations
	}
	if o.Endpoints != nil {
		toSerialize["endpoints"] = o.Endpoints
	}
	if o.ForkOf != nil {
		toSerialize["forkOf"] = o.ForkOf
	}
	return json.Marshal(toSerialize)
}

type NullableSandboxFork struct {
	value *SandboxFork
	isSet bool
}

func (v NullableSandboxFork) Get() *SandboxFork {
	return v.value
}

func (v *NullableSandboxFork) Set(val *SandboxFork) {
	v.value = val
	v.isSet = true
}

func (v NullableSandboxFork) IsSet() bool {
	return v.isSet
}

func (v *NullableSandboxFork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSandboxFork(val *SandboxFork) *NullableSandboxFork {
	return &NullableSandboxFork{value: val, isSet: true}
}

func (v NullableSandboxFork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSandboxFork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


