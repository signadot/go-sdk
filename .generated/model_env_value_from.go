/*
Signadot API

API for Signadot Sandboxes

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EnvValueFrom struct for EnvValueFrom
type EnvValueFrom struct {
	Fork *EnvValueFromFork `json:"fork,omitempty"`
	Resource *EnvValueFromResource `json:"resource,omitempty"`
}

// NewEnvValueFrom instantiates a new EnvValueFrom object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvValueFrom() *EnvValueFrom {
	this := EnvValueFrom{}
	return &this
}

// NewEnvValueFromWithDefaults instantiates a new EnvValueFrom object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvValueFromWithDefaults() *EnvValueFrom {
	this := EnvValueFrom{}
	return &this
}

// GetFork returns the Fork field value if set, zero value otherwise.
func (o *EnvValueFrom) GetFork() EnvValueFromFork {
	if o == nil || o.Fork == nil {
		var ret EnvValueFromFork
		return ret
	}
	return *o.Fork
}

// GetForkOk returns a tuple with the Fork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvValueFrom) GetForkOk() (*EnvValueFromFork, bool) {
	if o == nil || o.Fork == nil {
		return nil, false
	}
	return o.Fork, true
}

// HasFork returns a boolean if a field has been set.
func (o *EnvValueFrom) HasFork() bool {
	if o != nil && o.Fork != nil {
		return true
	}

	return false
}

// SetFork gets a reference to the given EnvValueFromFork and assigns it to the Fork field.
func (o *EnvValueFrom) SetFork(v EnvValueFromFork) {
	o.Fork = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *EnvValueFrom) GetResource() EnvValueFromResource {
	if o == nil || o.Resource == nil {
		var ret EnvValueFromResource
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvValueFrom) GetResourceOk() (*EnvValueFromResource, bool) {
	if o == nil || o.Resource == nil {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *EnvValueFrom) HasResource() bool {
	if o != nil && o.Resource != nil {
		return true
	}

	return false
}

// SetResource gets a reference to the given EnvValueFromResource and assigns it to the Resource field.
func (o *EnvValueFrom) SetResource(v EnvValueFromResource) {
	o.Resource = &v
}

func (o EnvValueFrom) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Fork != nil {
		toSerialize["fork"] = o.Fork
	}
	if o.Resource != nil {
		toSerialize["resource"] = o.Resource
	}
	return json.Marshal(toSerialize)
}

type NullableEnvValueFrom struct {
	value *EnvValueFrom
	isSet bool
}

func (v NullableEnvValueFrom) Get() *EnvValueFrom {
	return v.value
}

func (v *NullableEnvValueFrom) Set(val *EnvValueFrom) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvValueFrom) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvValueFrom) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvValueFrom(val *EnvValueFrom) *NullableEnvValueFrom {
	return &NullableEnvValueFrom{value: val, isSet: true}
}

func (v NullableEnvValueFrom) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvValueFrom) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


