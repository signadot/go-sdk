/*
Signadot API

API for Signadot Sandboxes

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ForkOf struct for ForkOf
type ForkOf struct {
	// Kind of entity that we want to route to. One of (Service or Deployment or Rollout).
	Kind string `json:"kind"`
	// Name of the entity within the Kubernetes cluster.
	Name string `json:"name"`
	// Namespace within which the entity lives in the Kubernetes cluster.
	Namespace string `json:"namespace"`
}

// NewForkOf instantiates a new ForkOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForkOf(kind string, name string, namespace string) *ForkOf {
	this := ForkOf{}
	this.Kind = kind
	this.Name = name
	this.Namespace = namespace
	return &this
}

// NewForkOfWithDefaults instantiates a new ForkOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForkOfWithDefaults() *ForkOf {
	this := ForkOf{}
	return &this
}

// GetKind returns the Kind field value
func (o *ForkOf) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *ForkOf) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *ForkOf) SetKind(v string) {
	o.Kind = v
}

// GetName returns the Name field value
func (o *ForkOf) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ForkOf) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ForkOf) SetName(v string) {
	o.Name = v
}

// GetNamespace returns the Namespace field value
func (o *ForkOf) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *ForkOf) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *ForkOf) SetNamespace(v string) {
	o.Namespace = v
}

func (o ForkOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["namespace"] = o.Namespace
	}
	return json.Marshal(toSerialize)
}

type NullableForkOf struct {
	value *ForkOf
	isSet bool
}

func (v NullableForkOf) Get() *ForkOf {
	return v.value
}

func (v *NullableForkOf) Set(val *ForkOf) {
	v.value = val
	v.isSet = true
}

func (v NullableForkOf) IsSet() bool {
	return v.isSet
}

func (v *NullableForkOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForkOf(val *ForkOf) *NullableForkOf {
	return &NullableForkOf{value: val, isSet: true}
}

func (v NullableForkOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForkOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


