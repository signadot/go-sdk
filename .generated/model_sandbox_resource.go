/*
Signadot API

API for Signadot Sandboxes

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SandboxResource struct for SandboxResource
type SandboxResource struct {
	Name *string `json:"name,omitempty"`
	Params *map[string]string `json:"params,omitempty"`
	Plugin *string `json:"plugin,omitempty"`
}

// NewSandboxResource instantiates a new SandboxResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSandboxResource() *SandboxResource {
	this := SandboxResource{}
	return &this
}

// NewSandboxResourceWithDefaults instantiates a new SandboxResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSandboxResourceWithDefaults() *SandboxResource {
	this := SandboxResource{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SandboxResource) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SandboxResource) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SandboxResource) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SandboxResource) SetName(v string) {
	o.Name = &v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *SandboxResource) GetParams() map[string]string {
	if o == nil || o.Params == nil {
		var ret map[string]string
		return ret
	}
	return *o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SandboxResource) GetParamsOk() (*map[string]string, bool) {
	if o == nil || o.Params == nil {
		return nil, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *SandboxResource) HasParams() bool {
	if o != nil && o.Params != nil {
		return true
	}

	return false
}

// SetParams gets a reference to the given map[string]string and assigns it to the Params field.
func (o *SandboxResource) SetParams(v map[string]string) {
	o.Params = &v
}

// GetPlugin returns the Plugin field value if set, zero value otherwise.
func (o *SandboxResource) GetPlugin() string {
	if o == nil || o.Plugin == nil {
		var ret string
		return ret
	}
	return *o.Plugin
}

// GetPluginOk returns a tuple with the Plugin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SandboxResource) GetPluginOk() (*string, bool) {
	if o == nil || o.Plugin == nil {
		return nil, false
	}
	return o.Plugin, true
}

// HasPlugin returns a boolean if a field has been set.
func (o *SandboxResource) HasPlugin() bool {
	if o != nil && o.Plugin != nil {
		return true
	}

	return false
}

// SetPlugin gets a reference to the given string and assigns it to the Plugin field.
func (o *SandboxResource) SetPlugin(v string) {
	o.Plugin = &v
}

func (o SandboxResource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Params != nil {
		toSerialize["params"] = o.Params
	}
	if o.Plugin != nil {
		toSerialize["plugin"] = o.Plugin
	}
	return json.Marshal(toSerialize)
}

type NullableSandboxResource struct {
	value *SandboxResource
	isSet bool
}

func (v NullableSandboxResource) Get() *SandboxResource {
	return v.value
}

func (v *NullableSandboxResource) Set(val *SandboxResource) {
	v.value = val
	v.isSet = true
}

func (v NullableSandboxResource) IsSet() bool {
	return v.isSet
}

func (v *NullableSandboxResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSandboxResource(val *SandboxResource) *NullableSandboxResource {
	return &NullableSandboxResource{value: val, isSet: true}
}

func (v NullableSandboxResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSandboxResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


