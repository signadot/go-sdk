/*
Signadot API

API for Signadot Sandboxes

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ForkEndpoint struct for ForkEndpoint
type ForkEndpoint struct {
	// Name of the endpoint
	Name *string `json:"name,omitempty"`
	// Port it will map to on the forked workload
	Port *int32 `json:"port,omitempty"`
	// Protocol that this endpoint uses
	Protocol *string `json:"protocol,omitempty"`
}

// NewForkEndpoint instantiates a new ForkEndpoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForkEndpoint() *ForkEndpoint {
	this := ForkEndpoint{}
	return &this
}

// NewForkEndpointWithDefaults instantiates a new ForkEndpoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForkEndpointWithDefaults() *ForkEndpoint {
	this := ForkEndpoint{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ForkEndpoint) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForkEndpoint) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ForkEndpoint) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ForkEndpoint) SetName(v string) {
	o.Name = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *ForkEndpoint) GetPort() int32 {
	if o == nil || o.Port == nil {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForkEndpoint) GetPortOk() (*int32, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *ForkEndpoint) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *ForkEndpoint) SetPort(v int32) {
	o.Port = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *ForkEndpoint) GetProtocol() string {
	if o == nil || o.Protocol == nil {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForkEndpoint) GetProtocolOk() (*string, bool) {
	if o == nil || o.Protocol == nil {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *ForkEndpoint) HasProtocol() bool {
	if o != nil && o.Protocol != nil {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *ForkEndpoint) SetProtocol(v string) {
	o.Protocol = &v
}

func (o ForkEndpoint) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	if o.Protocol != nil {
		toSerialize["protocol"] = o.Protocol
	}
	return json.Marshal(toSerialize)
}

type NullableForkEndpoint struct {
	value *ForkEndpoint
	isSet bool
}

func (v NullableForkEndpoint) Get() *ForkEndpoint {
	return v.value
}

func (v *NullableForkEndpoint) Set(val *ForkEndpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableForkEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableForkEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForkEndpoint(val *ForkEndpoint) *NullableForkEndpoint {
	return &NullableForkEndpoint{value: val, isSet: true}
}

func (v NullableForkEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForkEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


