/*
Signadot API

API for Signadot Sandboxes

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EnvValueFromFork struct for EnvValueFromFork
type EnvValueFromFork struct {
	Expression *string `json:"expression,omitempty"`
	ForkOf *ForkOf `json:"forkOf,omitempty"`
}

// NewEnvValueFromFork instantiates a new EnvValueFromFork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvValueFromFork() *EnvValueFromFork {
	this := EnvValueFromFork{}
	return &this
}

// NewEnvValueFromForkWithDefaults instantiates a new EnvValueFromFork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvValueFromForkWithDefaults() *EnvValueFromFork {
	this := EnvValueFromFork{}
	return &this
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *EnvValueFromFork) GetExpression() string {
	if o == nil || o.Expression == nil {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvValueFromFork) GetExpressionOk() (*string, bool) {
	if o == nil || o.Expression == nil {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *EnvValueFromFork) HasExpression() bool {
	if o != nil && o.Expression != nil {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *EnvValueFromFork) SetExpression(v string) {
	o.Expression = &v
}

// GetForkOf returns the ForkOf field value if set, zero value otherwise.
func (o *EnvValueFromFork) GetForkOf() ForkOf {
	if o == nil || o.ForkOf == nil {
		var ret ForkOf
		return ret
	}
	return *o.ForkOf
}

// GetForkOfOk returns a tuple with the ForkOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvValueFromFork) GetForkOfOk() (*ForkOf, bool) {
	if o == nil || o.ForkOf == nil {
		return nil, false
	}
	return o.ForkOf, true
}

// HasForkOf returns a boolean if a field has been set.
func (o *EnvValueFromFork) HasForkOf() bool {
	if o != nil && o.ForkOf != nil {
		return true
	}

	return false
}

// SetForkOf gets a reference to the given ForkOf and assigns it to the ForkOf field.
func (o *EnvValueFromFork) SetForkOf(v ForkOf) {
	o.ForkOf = &v
}

func (o EnvValueFromFork) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Expression != nil {
		toSerialize["expression"] = o.Expression
	}
	if o.ForkOf != nil {
		toSerialize["forkOf"] = o.ForkOf
	}
	return json.Marshal(toSerialize)
}

type NullableEnvValueFromFork struct {
	value *EnvValueFromFork
	isSet bool
}

func (v NullableEnvValueFromFork) Get() *EnvValueFromFork {
	return v.value
}

func (v *NullableEnvValueFromFork) Set(val *EnvValueFromFork) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvValueFromFork) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvValueFromFork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvValueFromFork(val *EnvValueFromFork) *NullableEnvValueFromFork {
	return &NullableEnvValueFromFork{value: val, isSet: true}
}

func (v NullableEnvValueFromFork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvValueFromFork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


