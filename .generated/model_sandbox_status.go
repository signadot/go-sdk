/*
Signadot API

API for Signadot Sandboxes

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SandboxStatus struct for SandboxStatus
type SandboxStatus struct {
	// The id of the sandbox.
	Id *string `json:"id,omitempty"`
	// Message is a human readable explanation of why the sandbox is healthy or not.
	Message *string `json:"message,omitempty"`
	// Ready indicates whether the sandbox is ready, meaning that it can be used for testing.
	Ready *bool `json:"ready,omitempty"`
	// Reason is a machine readable explanation of why the sandbox is healthy or not.
	Reason *string `json:"reason,omitempty"`
}

// NewSandboxStatus instantiates a new SandboxStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSandboxStatus() *SandboxStatus {
	this := SandboxStatus{}
	return &this
}

// NewSandboxStatusWithDefaults instantiates a new SandboxStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSandboxStatusWithDefaults() *SandboxStatus {
	this := SandboxStatus{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SandboxStatus) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SandboxStatus) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SandboxStatus) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SandboxStatus) SetId(v string) {
	o.Id = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *SandboxStatus) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SandboxStatus) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *SandboxStatus) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *SandboxStatus) SetMessage(v string) {
	o.Message = &v
}

// GetReady returns the Ready field value if set, zero value otherwise.
func (o *SandboxStatus) GetReady() bool {
	if o == nil || o.Ready == nil {
		var ret bool
		return ret
	}
	return *o.Ready
}

// GetReadyOk returns a tuple with the Ready field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SandboxStatus) GetReadyOk() (*bool, bool) {
	if o == nil || o.Ready == nil {
		return nil, false
	}
	return o.Ready, true
}

// HasReady returns a boolean if a field has been set.
func (o *SandboxStatus) HasReady() bool {
	if o != nil && o.Ready != nil {
		return true
	}

	return false
}

// SetReady gets a reference to the given bool and assigns it to the Ready field.
func (o *SandboxStatus) SetReady(v bool) {
	o.Ready = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *SandboxStatus) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SandboxStatus) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *SandboxStatus) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *SandboxStatus) SetReason(v string) {
	o.Reason = &v
}

func (o SandboxStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.Ready != nil {
		toSerialize["ready"] = o.Ready
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	return json.Marshal(toSerialize)
}

type NullableSandboxStatus struct {
	value *SandboxStatus
	isSet bool
}

func (v NullableSandboxStatus) Get() *SandboxStatus {
	return v.value
}

func (v *NullableSandboxStatus) Set(val *SandboxStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSandboxStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSandboxStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSandboxStatus(val *SandboxStatus) *NullableSandboxStatus {
	return &NullableSandboxStatus{value: val, isSet: true}
}

func (v NullableSandboxStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSandboxStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


