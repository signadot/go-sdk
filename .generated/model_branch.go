/*
Signadot API

API for Signadot Sandboxes

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Branch struct for Branch
type Branch struct {
	HeadCommit *string `json:"headCommit,omitempty"`
	PullRequest *int32 `json:"pullRequest,omitempty"`
	VcsName *string `json:"vcsName,omitempty"`
	VcsRepo *string `json:"vcsRepo,omitempty"`
	VcsType *string `json:"vcsType,omitempty"`
}

// NewBranch instantiates a new Branch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBranch() *Branch {
	this := Branch{}
	return &this
}

// NewBranchWithDefaults instantiates a new Branch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBranchWithDefaults() *Branch {
	this := Branch{}
	return &this
}

// GetHeadCommit returns the HeadCommit field value if set, zero value otherwise.
func (o *Branch) GetHeadCommit() string {
	if o == nil || o.HeadCommit == nil {
		var ret string
		return ret
	}
	return *o.HeadCommit
}

// GetHeadCommitOk returns a tuple with the HeadCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Branch) GetHeadCommitOk() (*string, bool) {
	if o == nil || o.HeadCommit == nil {
		return nil, false
	}
	return o.HeadCommit, true
}

// HasHeadCommit returns a boolean if a field has been set.
func (o *Branch) HasHeadCommit() bool {
	if o != nil && o.HeadCommit != nil {
		return true
	}

	return false
}

// SetHeadCommit gets a reference to the given string and assigns it to the HeadCommit field.
func (o *Branch) SetHeadCommit(v string) {
	o.HeadCommit = &v
}

// GetPullRequest returns the PullRequest field value if set, zero value otherwise.
func (o *Branch) GetPullRequest() int32 {
	if o == nil || o.PullRequest == nil {
		var ret int32
		return ret
	}
	return *o.PullRequest
}

// GetPullRequestOk returns a tuple with the PullRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Branch) GetPullRequestOk() (*int32, bool) {
	if o == nil || o.PullRequest == nil {
		return nil, false
	}
	return o.PullRequest, true
}

// HasPullRequest returns a boolean if a field has been set.
func (o *Branch) HasPullRequest() bool {
	if o != nil && o.PullRequest != nil {
		return true
	}

	return false
}

// SetPullRequest gets a reference to the given int32 and assigns it to the PullRequest field.
func (o *Branch) SetPullRequest(v int32) {
	o.PullRequest = &v
}

// GetVcsName returns the VcsName field value if set, zero value otherwise.
func (o *Branch) GetVcsName() string {
	if o == nil || o.VcsName == nil {
		var ret string
		return ret
	}
	return *o.VcsName
}

// GetVcsNameOk returns a tuple with the VcsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Branch) GetVcsNameOk() (*string, bool) {
	if o == nil || o.VcsName == nil {
		return nil, false
	}
	return o.VcsName, true
}

// HasVcsName returns a boolean if a field has been set.
func (o *Branch) HasVcsName() bool {
	if o != nil && o.VcsName != nil {
		return true
	}

	return false
}

// SetVcsName gets a reference to the given string and assigns it to the VcsName field.
func (o *Branch) SetVcsName(v string) {
	o.VcsName = &v
}

// GetVcsRepo returns the VcsRepo field value if set, zero value otherwise.
func (o *Branch) GetVcsRepo() string {
	if o == nil || o.VcsRepo == nil {
		var ret string
		return ret
	}
	return *o.VcsRepo
}

// GetVcsRepoOk returns a tuple with the VcsRepo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Branch) GetVcsRepoOk() (*string, bool) {
	if o == nil || o.VcsRepo == nil {
		return nil, false
	}
	return o.VcsRepo, true
}

// HasVcsRepo returns a boolean if a field has been set.
func (o *Branch) HasVcsRepo() bool {
	if o != nil && o.VcsRepo != nil {
		return true
	}

	return false
}

// SetVcsRepo gets a reference to the given string and assigns it to the VcsRepo field.
func (o *Branch) SetVcsRepo(v string) {
	o.VcsRepo = &v
}

// GetVcsType returns the VcsType field value if set, zero value otherwise.
func (o *Branch) GetVcsType() string {
	if o == nil || o.VcsType == nil {
		var ret string
		return ret
	}
	return *o.VcsType
}

// GetVcsTypeOk returns a tuple with the VcsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Branch) GetVcsTypeOk() (*string, bool) {
	if o == nil || o.VcsType == nil {
		return nil, false
	}
	return o.VcsType, true
}

// HasVcsType returns a boolean if a field has been set.
func (o *Branch) HasVcsType() bool {
	if o != nil && o.VcsType != nil {
		return true
	}

	return false
}

// SetVcsType gets a reference to the given string and assigns it to the VcsType field.
func (o *Branch) SetVcsType(v string) {
	o.VcsType = &v
}

func (o Branch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HeadCommit != nil {
		toSerialize["headCommit"] = o.HeadCommit
	}
	if o.PullRequest != nil {
		toSerialize["pullRequest"] = o.PullRequest
	}
	if o.VcsName != nil {
		toSerialize["vcsName"] = o.VcsName
	}
	if o.VcsRepo != nil {
		toSerialize["vcsRepo"] = o.VcsRepo
	}
	if o.VcsType != nil {
		toSerialize["vcsType"] = o.VcsType
	}
	return json.Marshal(toSerialize)
}

type NullableBranch struct {
	value *Branch
	isSet bool
}

func (v NullableBranch) Get() *Branch {
	return v.value
}

func (v *NullableBranch) Set(val *Branch) {
	v.value = val
	v.isSet = true
}

func (v NullableBranch) IsSet() bool {
	return v.isSet
}

func (v *NullableBranch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBranch(val *Branch) *NullableBranch {
	return &NullableBranch{value: val, isSet: true}
}

func (v NullableBranch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBranch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


